
STM32L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007acc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007c60  08007c60  00017c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800808c  0800808c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008094  08008094  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800809c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001dc  08008278  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08008278  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fc8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a60  00000000  00000000  000361d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00038c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225bd  00000000  00000000  0003b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dd9  00000000  00000000  0005d79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde9d  00000000  00000000  00072576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006254  00000000  00000000  00140468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c44 	.word	0x08007c44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007c44 	.word	0x08007c44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f023 030f 	bic.w	r3, r3, #15
 8000f56:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	f043 030c 	orr.w	r3, r3, #12
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	723b      	strb	r3, [r7, #8]
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	727b      	strb	r3, [r7, #9]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f043 030c 	orr.w	r3, r3, #12
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	72bb      	strb	r3, [r7, #10]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <lcd16x2_i2c_sendCommand+0x60>)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <lcd16x2_i2c_sendCommand+0x64>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	f107 0208 	add.w	r2, r7, #8
 8000f8e:	23c8      	movs	r3, #200	; 0xc8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2304      	movs	r3, #4
 8000f94:	f001 fab0 	bl	80024f8 <HAL_I2C_Master_Transmit>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001f8 	.word	0x200001f8
 8000fa4:	200001fc 	.word	0x200001fc

08000fa8 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000fb0:	2032      	movs	r0, #50	; 0x32
 8000fb2:	f000 fec3 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000fb6:	4a30      	ldr	r2, [pc, #192]	; (8001078 <lcd16x2_i2c_init+0xd0>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <lcd16x2_i2c_init+0xd0>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	214e      	movs	r1, #78	; 0x4e
 8000fc8:	f001 fb8a 	bl	80026e0 <HAL_I2C_IsDeviceReady>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d010      	beq.n	8000ff4 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <lcd16x2_i2c_init+0xd0>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fda:	2205      	movs	r2, #5
 8000fdc:	217e      	movs	r1, #126	; 0x7e
 8000fde:	f001 fb7f 	bl	80026e0 <HAL_I2C_IsDeviceReady>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e040      	b.n	800106e <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <lcd16x2_i2c_init+0xd4>)
 8000fee:	227e      	movs	r2, #126	; 0x7e
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e002      	b.n	8000ffa <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <lcd16x2_i2c_init+0xd4>)
 8000ff6:	224e      	movs	r2, #78	; 0x4e
 8000ff8:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000ffa:	202d      	movs	r0, #45	; 0x2d
 8000ffc:	f000 fe9e 	bl	8001d3c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001000:	2030      	movs	r0, #48	; 0x30
 8001002:	f7ff ff9d 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8001006:	2005      	movs	r0, #5
 8001008:	f000 fe98 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 800100c:	2030      	movs	r0, #48	; 0x30
 800100e:	f7ff ff97 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 fe92 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001018:	2030      	movs	r0, #48	; 0x30
 800101a:	f7ff ff91 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800101e:	2008      	movs	r0, #8
 8001020:	f000 fe8c 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001024:	2020      	movs	r0, #32
 8001026:	f7ff ff8b 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800102a:	2008      	movs	r0, #8
 800102c:	f000 fe86 	bl	8001d3c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f7ff ff85 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f000 fe80 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 800103c:	2008      	movs	r0, #8
 800103e:	f7ff ff7f 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fe7a 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff79 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 fe74 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001054:	2006      	movs	r0, #6
 8001056:	f7ff ff73 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f000 fe6e 	bl	8001d3c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001060:	200c      	movs	r0, #12
 8001062:	f7ff ff6d 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 fe68 	bl	8001d3c <HAL_Delay>

  return true;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001f8 	.word	0x200001f8
 800107c:	200001fc 	.word	0x200001fc

08001080 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ff5b 	bl	8000f40 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 fe56 	bl	8001d3c <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]


	__HAL_TIM_SET_COUNTER(&htim7, 0);
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <delay+0x30>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim7))<time);
 80010a6:	bf00      	nop
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <delay+0x30>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3f9      	bcc.n	80010a8 <delay+0x14>
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000340 	.word	0x20000340

080010c8 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 ffd4 	bl	80020a4 <HAL_GPIO_Init>
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ffb6 	bl	80020a4 <HAL_GPIO_Init>
}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <DHT22_Start>:

#define DHT22_PORT GPIOB
#define DHT22_PIN GPIO_PIN_1

void DHT22_Start (void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT22_PORT, DHT22_PIN);  // set the pin as output
 8001144:	2102      	movs	r1, #2
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <DHT22_Start+0x3c>)
 8001148:	f7ff ffbe 	bl	80010c8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 800114c:	2200      	movs	r2, #0
 800114e:	2102      	movs	r1, #2
 8001150:	480a      	ldr	r0, [pc, #40]	; (800117c <DHT22_Start+0x3c>)
 8001152:	f001 f929 	bl	80023a8 <HAL_GPIO_WritePin>


	delay (1200);  // >1ms delay
 8001156:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800115a:	f7ff ff9b 	bl	8001094 <delay>

    HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <DHT22_Start+0x3c>)
 8001164:	f001 f920 	bl	80023a8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001168:	2014      	movs	r0, #20
 800116a:	f7ff ff93 	bl	8001094 <delay>
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);    // set as input
 800116e:	2102      	movs	r1, #2
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DHT22_Start+0x3c>)
 8001172:	f7ff ffc7 	bl	8001104 <Set_Pin_Input>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	48000400 	.word	0x48000400

08001180 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800118a:	2028      	movs	r0, #40	; 0x28
 800118c:	f7ff ff82 	bl	8001094 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001190:	2102      	movs	r1, #2
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <DHT22_Check_Response+0x58>)
 8001194:	f001 f8f0 	bl	8002378 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10e      	bne.n	80011bc <DHT22_Check_Response+0x3c>
	{
		delay (80);
 800119e:	2050      	movs	r0, #80	; 0x50
 80011a0:	f7ff ff78 	bl	8001094 <delay>
		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 80011a4:	2102      	movs	r1, #2
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <DHT22_Check_Response+0x58>)
 80011a8:	f001 f8e6 	bl	8002378 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <DHT22_Check_Response+0x38>
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e001      	b.n	80011bc <DHT22_Check_Response+0x3c>
		else Response = -1;
 80011b8:	23ff      	movs	r3, #255	; 0xff
 80011ba:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 80011bc:	bf00      	nop
 80011be:	2102      	movs	r1, #2
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <DHT22_Check_Response+0x58>)
 80011c2:	f001 f8d9 	bl	8002378 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f8      	bne.n	80011be <DHT22_Check_Response+0x3e>

	return Response;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	48000400 	.word	0x48000400

080011dc <DHT22_Read>:



uint8_t DHT22_Read (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	e037      	b.n	8001258 <DHT22_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 80011e8:	bf00      	nop
 80011ea:	2102      	movs	r1, #2
 80011ec:	481e      	ldr	r0, [pc, #120]	; (8001268 <DHT22_Read+0x8c>)
 80011ee:	f001 f8c3 	bl	8002378 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f8      	beq.n	80011ea <DHT22_Read+0xe>
		delay (40);   // wait for 40 us
 80011f8:	2028      	movs	r0, #40	; 0x28
 80011fa:	f7ff ff4b 	bl	8001094 <delay>
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80011fe:	2102      	movs	r1, #2
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <DHT22_Read+0x8c>)
 8001202:	f001 f8b9 	bl	8002378 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10e      	bne.n	800122a <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2201      	movs	r2, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	b25b      	sxtb	r3, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	b25a      	sxtb	r2, r3
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4013      	ands	r3, r2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	e00b      	b.n	8001242 <DHT22_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	f1c3 0307 	rsb	r3, r3, #7
 8001230:	2201      	movs	r2, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	b25a      	sxtb	r2, r3
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
 8001240:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 8001242:	bf00      	nop
 8001244:	2102      	movs	r1, #2
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <DHT22_Read+0x8c>)
 8001248:	f001 f896 	bl	8002378 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f8      	bne.n	8001244 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	3301      	adds	r3, #1
 8001256:	71bb      	strb	r3, [r7, #6]
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	2b07      	cmp	r3, #7
 800125c:	d9c4      	bls.n	80011e8 <DHT22_Read+0xc>
	}
	return i;
 800125e:	79fb      	ldrb	r3, [r7, #7]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	48000400 	.word	0x48000400

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001272:	f000 fcee 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001276:	f000 f8a3 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127a:	f000 f9e3 	bl	8001644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800127e:	f000 f9b1 	bl	80015e4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8001282:	f000 f903 	bl	800148c <MX_I2C3_Init>
  MX_TIM6_Init();
 8001286:	f000 f941 	bl	800150c <MX_TIM6_Init>
  MX_TIM7_Init();
 800128a:	f000 f975 	bl	8001578 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800128e:	f000 f8e9 	bl	8001464 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 8001292:	483d      	ldr	r0, [pc, #244]	; (8001388 <main+0x11c>)
 8001294:	f002 ff00 	bl	8004098 <HAL_TIM_Base_Start>
  if(lcd16x2_i2c_init(&hi2c3)){
 8001298:	483c      	ldr	r0, [pc, #240]	; (800138c <main+0x120>)
 800129a:	f7ff fe85 	bl	8000fa8 <lcd16x2_i2c_init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <main+0x42>
  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2108      	movs	r1, #8
 80012a8:	4839      	ldr	r0, [pc, #228]	; (8001390 <main+0x124>)
 80012aa:	f001 f87d 	bl	80023a8 <HAL_GPIO_WritePin>
   }
  lcd16x2_i2c_clear();
 80012ae:	f7ff fee7 	bl	8001080 <lcd16x2_i2c_clear>

  int a = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  DHT22_Start();
 80012b6:	f7ff ff43 	bl	8001140 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 80012ba:	f7ff ff61 	bl	8001180 <DHT22_Check_Response>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <main+0x128>)
 80012c4:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read();
 80012c6:	f7ff ff89 	bl	80011dc <DHT22_Read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <main+0x12c>)
 80012d0:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read();
 80012d2:	f7ff ff83 	bl	80011dc <DHT22_Read>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0x130>)
 80012dc:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read();
 80012de:	f7ff ff7d 	bl	80011dc <DHT22_Read>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <main+0x134>)
 80012e8:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read();
 80012ea:	f7ff ff77 	bl	80011dc <DHT22_Read>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <main+0x138>)
 80012f4:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 80012f6:	f7ff ff71 	bl	80011dc <DHT22_Read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <main+0x13c>)
 8001300:	801a      	strh	r2, [r3, #0]

	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <main+0x134>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <main+0x138>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21b      	sxth	r3, r3
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <main+0x140>)
 8001318:	801a      	strh	r2, [r3, #0]
	  RH =((Rh_byte1<<8)|Rh_byte2);
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <main+0x12c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <main+0x130>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <main+0x144>)
 8001330:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) (TEMP/10.0);
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <main+0x140>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f4 	bl	8000524 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <main+0x148>)
 8001342:	f7ff fa83 	bl	800084c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc2b 	bl	8000ba8 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <main+0x14c>)
 8001356:	6013      	str	r3, [r2, #0]
	  Humidity = (float) (RH/10.0);
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x144>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8e1 	bl	8000524 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <main+0x148>)
 8001368:	f7ff fa70 	bl	800084c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc18 	bl	8000ba8 <__aeabi_d2f>
 8001378:	4603      	mov	r3, r0
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <main+0x150>)
 800137c:	6013      	str	r3, [r2, #0]
//	  lcd16x2_i2c_setCursor(1,9);
//	  lcd16x2_i2c_printf("C: %d",a);
//	  a++;


	  HAL_Delay(3000);
 800137e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001382:	f000 fcdb 	bl	8001d3c <HAL_Delay>
	  DHT22_Start();
 8001386:	e796      	b.n	80012b6 <main+0x4a>
 8001388:	20000340 	.word	0x20000340
 800138c:	20000218 	.word	0x20000218
 8001390:	48000400 	.word	0x48000400
 8001394:	20000208 	.word	0x20000208
 8001398:	20000264 	.word	0x20000264
 800139c:	2000026b 	.word	0x2000026b
 80013a0:	2000026a 	.word	0x2000026a
 80013a4:	2000038c 	.word	0x2000038c
 80013a8:	2000033c 	.word	0x2000033c
 80013ac:	20000268 	.word	0x20000268
 80013b0:	20000266 	.word	0x20000266
 80013b4:	40240000 	.word	0x40240000
 80013b8:	20000200 	.word	0x20000200
 80013bc:	20000204 	.word	0x20000204

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	; 0x58
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2244      	movs	r2, #68	; 0x44
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 ff5e 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013e6:	f001 fc9d 	bl	8002d24 <HAL_PWREx_ControlVoltageScaling>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f0:	f000 f972 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fe:	2310      	movs	r3, #16
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001406:	2302      	movs	r3, #2
 8001408:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800140a:	2302      	movs	r3, #2
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 800140e:	2319      	movs	r3, #25
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001412:	2307      	movs	r3, #7
 8001414:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800141a:	2304      	movs	r3, #4
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fcd4 	bl	8002dd0 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800142e:	f000 f953 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
 8001434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001436:	2303      	movs	r3, #3
 8001438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	2103      	movs	r1, #3
 800144c:	4618      	mov	r0, r3
 800144e:	f002 f8df 	bl	8003610 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001458:	f000 f93e 	bl	80016d8 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3758      	adds	r7, #88	; 0x58
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2036      	movs	r0, #54	; 0x36
 800146e:	f000 fd64 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001472:	2036      	movs	r0, #54	; 0x36
 8001474:	f000 fd7d 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2037      	movs	r0, #55	; 0x37
 800147e:	f000 fd5c 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001482:	2037      	movs	r0, #55	; 0x37
 8001484:	f000 fd75 	bl	8001f72 <HAL_NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_I2C3_Init+0x74>)
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <MX_I2C3_Init+0x78>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00606092;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_I2C3_Init+0x74>)
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <MX_I2C3_Init+0x7c>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_I2C3_Init+0x74>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_I2C3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_I2C3_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <MX_I2C3_Init+0x74>)
 80014c8:	f000 ff86 	bl	80023d8 <HAL_I2C_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f000 f901 	bl	80016d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <MX_I2C3_Init+0x74>)
 80014da:	f001 fb7d 	bl	8002bd8 <HAL_I2CEx_ConfigAnalogFilter>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014e4:	f000 f8f8 	bl	80016d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_I2C3_Init+0x74>)
 80014ec:	f001 fbbf 	bl	8002c6e <HAL_I2CEx_ConfigDigitalFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 f8ef 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000218 	.word	0x20000218
 8001504:	40005c00 	.word	0x40005c00
 8001508:	00606092 	.word	0x00606092

0800150c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_TIM6_Init+0x64>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <MX_TIM6_Init+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_TIM6_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_TIM6_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_TIM6_Init+0x64>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_TIM6_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_TIM6_Init+0x64>)
 800153e:	f002 fd53 	bl	8003fe8 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001548:	f000 f8c6 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM6_Init+0x64>)
 800155a:	f002 ff9f 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001564:	f000 f8b8 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000026c 	.word	0x2000026c
 8001574:	40001000 	.word	0x40001000

08001578 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_TIM7_Init+0x64>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_TIM7_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 50-1;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_TIM7_Init+0x64>)
 8001590:	2231      	movs	r2, #49	; 0x31
 8001592:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_TIM7_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_TIM7_Init+0x64>)
 800159c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_TIM7_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_TIM7_Init+0x64>)
 80015aa:	f002 fd1d 	bl	8003fe8 <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015b4:	f000 f890 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_TIM7_Init+0x64>)
 80015c6:	f002 ff69 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015d0:	f000 f882 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000340 	.word	0x20000340
 80015e0:	40001400 	.word	0x40001400

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART2_UART_Init+0x58>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <MX_USART2_UART_Init+0x5c>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART2_UART_Init+0x58>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_USART2_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_USART2_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_USART2_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_USART2_UART_Init+0x58>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_USART2_UART_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_USART2_UART_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_USART2_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_USART2_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_USART2_UART_Init+0x58>)
 8001628:	f002 ffbc 	bl	80045a4 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001632:	f000 f851 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002b8 	.word	0x200002b8
 8001640:	40004400 	.word	0x40004400

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_GPIO_Init+0x8c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_GPIO_Init+0x8c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_GPIO_Init+0x8c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	210a      	movs	r1, #10
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <MX_GPIO_Init+0x90>)
 80016a8:	f000 fe7e 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80016ac:	230a      	movs	r3, #10
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_GPIO_Init+0x90>)
 80016c4:	f000 fcee 	bl	80020a4 <HAL_GPIO_Init>

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000400 	.word	0x48000400

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_MspInit+0x50>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_MspInit+0x50>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x50>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x50>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_MspInit+0x50>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x50>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fc0b 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001724:	2005      	movs	r0, #5
 8001726:	f000 fc24 	bl	8001f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0a0      	sub	sp, #128	; 0x80
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	2254      	movs	r2, #84	; 0x54
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fd99 	bl	8005290 <memset>
  if(hi2c->Instance==I2C3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_I2C_MspInit+0xe0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d153      	bne.n	8001810 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800176e:	2300      	movs	r3, #0
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	4618      	mov	r0, r3
 8001778:	f002 f950 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001782:	f7ff ffa9 	bl	80016d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_I2C_MspInit+0xe4>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_I2C_MspInit+0xe4>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_I2C_MspInit+0xe4>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_I2C_MspInit+0xe4>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_I2C_MspInit+0xe4>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_I2C_MspInit+0xe4>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ba:	2312      	movs	r3, #18
 80017bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017c6:	2304      	movs	r3, #4
 80017c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f000 fc66 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d8:	2310      	movs	r3, #16
 80017da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017dc:	2312      	movs	r3, #18
 80017de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017e8:	2304      	movs	r3, #4
 80017ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017f0:	4619      	mov	r1, r3
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <HAL_I2C_MspInit+0xe8>)
 80017f4:	f000 fc56 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0xe4>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0xe4>)
 80017fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001802:	6593      	str	r3, [r2, #88]	; 0x58
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0xe4>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3780      	adds	r7, #128	; 0x80
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005c00 	.word	0x40005c00
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <HAL_TIM_Base_MspInit+0x5c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10c      	bne.n	8001850 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800184e:	e010      	b.n	8001872 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_TIM_Base_MspInit+0x64>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10b      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_TIM_Base_MspInit+0x60>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40001000 	.word	0x40001000
 8001884:	40021000 	.word	0x40021000
 8001888:	40001400 	.word	0x40001400

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b09e      	sub	sp, #120	; 0x78
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2254      	movs	r2, #84	; 0x54
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fcef 	bl	8005290 <memset>
  if(huart->Instance==USART2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <HAL_UART_MspInit+0xdc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d150      	bne.n	800195e <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 f8a7 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d4:	f7ff ff00 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0xe0>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001908:	2304      	movs	r3, #4
 800190a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001918:	2307      	movs	r3, #7
 800191a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f000 fbbd 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800192a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800193c:	2303      	movs	r3, #3
 800193e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f000 fbab 	bl	80020a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	2026      	movs	r0, #38	; 0x26
 8001954:	f000 faf1 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001958:	2026      	movs	r0, #38	; 0x26
 800195a:	f000 fb0a 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3778      	adds	r7, #120	; 0x78
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40004400 	.word	0x40004400
 800196c:	40021000 	.word	0x40021000

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019bc:	f000 f99e 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <USART2_IRQHandler+0x10>)
 80019da:	f002 fe31 	bl	8004640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200002b8 	.word	0x200002b8

080019e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <TIM6_DAC_IRQHandler+0x10>)
 80019ee:	f002 fb9f 	bl	8004130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000026c 	.word	0x2000026c

080019fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM7_IRQHandler+0x10>)
 8001a02:	f002 fb95 	bl	8004130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000340 	.word	0x20000340

08001a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return 1;
 8001a14:	2301      	movs	r3, #1
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_kill>:

int _kill(int pid, int sig)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a2a:	f003 fc07 	bl	800523c <__errno>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2216      	movs	r2, #22
 8001a32:	601a      	str	r2, [r3, #0]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_exit>:

void _exit (int status)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffe7 	bl	8001a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a52:	e7fe      	b.n	8001a52 <_exit+0x12>

08001a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a66:	f3af 8000 	nop.w
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbf0      	blt.n	8001a66 <_read+0x12>
	}

return len;
 8001a84:	687b      	ldr	r3, [r7, #4]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e009      	b.n	8001ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf1      	blt.n	8001aa0 <_write+0x12>
	}
	return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_close>:

int _close(int file)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aee:	605a      	str	r2, [r3, #4]
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_isatty>:

int _isatty(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return 1;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f003 fb6c 	bl	800523c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000c000 	.word	0x2000c000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	2000020c 	.word	0x2000020c
 8001b98:	200003a8 	.word	0x200003a8

08001b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <SystemInit+0x5c>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <SystemInit+0x5c>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SystemInit+0x60>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <SystemInit+0x60>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <SystemInit+0x60>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <SystemInit+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <SystemInit+0x60>)
 8001bc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001bcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <SystemInit+0x60>)
 8001bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <SystemInit+0x60>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <SystemInit+0x60>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SystemInit+0x60>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	40021000 	.word	0x40021000

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffca 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c0a:	e003      	b.n	8001c14 <LoopCopyDataInit>

08001c0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c12:	3104      	adds	r1, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c14:	480a      	ldr	r0, [pc, #40]	; (8001c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c1c:	d3f6      	bcc.n	8001c0c <CopyDataInit>
	ldr	r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c20:	e002      	b.n	8001c28 <LoopFillZerobss>

08001c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c24:	f842 3b04 	str.w	r3, [r2], #4

08001c28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LoopForever+0x16>)
	cmp	r2, r3
 8001c2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c2c:	d3f9      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f003 fb0b 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fb1b 	bl	800126c <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8001c3c:	0800809c 	.word	0x0800809c
	ldr	r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c44:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001c48:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001c4c:	200003a4 	.word	0x200003a4

08001c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f961 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fd36 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f96d 	bl	8001f8e <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc8:	f000 f937 	bl	8001f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000390 	.word	0x20000390

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000390 	.word	0x20000390

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff3e 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff31 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffa2 	bl	8001ee0 <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e022      	b.n	8002016 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 020e 	bic.w	r2, r2, #14
 8001fde:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 021c 	and.w	r2, r3, #28
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d005      	beq.n	8002046 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2204      	movs	r2, #4
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e029      	b.n	800209a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 020e 	bic.w	r2, r2, #14
 8002054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f003 021c 	and.w	r2, r3, #28
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
    }
  }
  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b2:	e148      	b.n	8002346 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 813a 	beq.w	8002340 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d00b      	beq.n	80020ec <HAL_GPIO_Init+0x48>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e0:	2b11      	cmp	r3, #17
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d130      	bne.n	800214e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002122:	2201      	movs	r2, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 0201 	and.w	r2, r3, #1
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0xea>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b12      	cmp	r3, #18
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	6939      	ldr	r1, [r7, #16]
 80021d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0203 	and.w	r2, r3, #3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8094 	beq.w	8002340 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b52      	ldr	r3, [pc, #328]	; (8002364 <HAL_GPIO_Init+0x2c0>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_GPIO_Init+0x2c0>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6613      	str	r3, [r2, #96]	; 0x60
 8002224:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x2c0>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x2c4>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800225a:	d00d      	beq.n	8002278 <HAL_GPIO_Init+0x1d4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_GPIO_Init+0x2c8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x1d0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_GPIO_Init+0x2cc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d101      	bne.n	8002270 <HAL_GPIO_Init+0x1cc>
 800226c:	2302      	movs	r3, #2
 800226e:	e004      	b.n	800227a <HAL_GPIO_Init+0x1d6>
 8002270:	2307      	movs	r3, #7
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x1d6>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_GPIO_Init+0x1d6>
 8002278:	2300      	movs	r3, #0
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800228a:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_GPIO_Init+0x2c4>)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e6:	4a23      	ldr	r2, [pc, #140]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002310:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3301      	adds	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f aeaf 	bne.w	80020b4 <HAL_GPIO_Init+0x10>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000
 800236c:	48000400 	.word	0x48000400
 8002370:	48000800 	.word	0x48000800
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e081      	b.n	80024ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff f99a 	bl	8001738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e006      	b.n	8002460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800245e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d104      	bne.n	8002472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002484:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002494:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	ea42 0103 	orr.w	r1, r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	021a      	lsls	r2, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69d9      	ldr	r1, [r3, #28]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	f040 80da 	bne.w	80026ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2C_Master_Transmit+0x30>
 8002524:	2302      	movs	r3, #2
 8002526:	e0d3      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002530:	f7ff fbf8 	bl	8001d24 <HAL_GetTick>
 8002534:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2319      	movs	r3, #25
 800253c:	2201      	movs	r2, #1
 800253e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9f7 	bl	8002936 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0be      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	; 0x21
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2210      	movs	r2, #16
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	893a      	ldrh	r2, [r7, #8]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d90e      	bls.n	80025a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	22ff      	movs	r2, #255	; 0xff
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	b2da      	uxtb	r2, r3
 8002590:	8979      	ldrh	r1, [r7, #10]
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 faee 	bl	8002b7c <I2C_TransferConfig>
 80025a0:	e06c      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fadd 	bl	8002b7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80025c2:	e05b      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f9f4 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e07b      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d034      	beq.n	800267c <HAL_I2C_Master_Transmit+0x184>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2200      	movs	r2, #0
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f986 	bl	8002936 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04d      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d90e      	bls.n	800265c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa91 	bl	8002b7c <I2C_TransferConfig>
 800265a:	e00f      	b.n	800267c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa80 	bl	8002b7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d19e      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6a39      	ldr	r1, [r7, #32]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f9d3 	bl	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01a      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2220      	movs	r2, #32
 80026a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_I2C_Master_Transmit+0x1e4>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	80002000 	.word	0x80002000
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	f040 80f1 	bne.w	80028e4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	d101      	bne.n	8002716 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	e0e7      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2C_IsDeviceReady+0x44>
 8002720:	2302      	movs	r3, #2
 8002722:	e0e0      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2224      	movs	r2, #36	; 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_I2C_IsDeviceReady+0x72>
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002750:	e004      	b.n	800275c <HAL_I2C_IsDeviceReady+0x7c>
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002762:	f7ff fadf 	bl	8001d24 <HAL_GetTick>
 8002766:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002794:	e034      	b.n	8002800 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d01a      	beq.n	80027d4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7ff fac1 	bl	8001d24 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <HAL_I2C_IsDeviceReady+0xd4>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e088      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b20      	cmp	r3, #32
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_I2C_IsDeviceReady+0x12c>
 8002806:	7fbb      	ldrb	r3, [r7, #30]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0c4      	beq.n	8002796 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d01a      	beq.n	8002850 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2120      	movs	r1, #32
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f886 	bl	8002936 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e058      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2220      	movs	r2, #32
 800283a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e04a      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	2120      	movs	r1, #32
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f86b 	bl	8002936 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e03d      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2210      	movs	r2, #16
 8002870:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2220      	movs	r2, #32
 8002878:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d118      	bne.n	80028b4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002890:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	2120      	movs	r1, #32
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f84a 	bl	8002936 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01c      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2220      	movs	r2, #32
 80028b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	f63f af3b 	bhi.w	800273a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d103      	bne.n	800290c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d007      	beq.n	800292a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	619a      	str	r2, [r3, #24]
  }
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002946:	e022      	b.n	800298e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294e:	d01e      	beq.n	800298e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7ff f9e8 	bl	8001d24 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d113      	bne.n	800298e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0cd      	beq.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c2:	e02c      	b.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f871 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e02a      	b.n	8002a2e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029de:	d01e      	beq.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7ff f9a0 	bl	8001d24 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d302      	bcc.n	80029f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d1cb      	bne.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a42:	e028      	b.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f831 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e026      	b.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff f964 	bl	8001d24 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d113      	bne.n	8002a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e007      	b.n	8002aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d1cf      	bne.n	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d151      	bne.n	8002b6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	e022      	b.n	8002b12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad2:	d01e      	beq.n	8002b12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad4:	f7ff f926 	bl	8001d24 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <I2C_IsAcknowledgeFailed+0x3a>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e02e      	b.n	8002b70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d1d5      	bne.n	8002acc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fedc 	bl	80028ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b42:	400b      	ands	r3, r1
 8002b44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fe00e800 	.word	0xfe00e800

08002b7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	0d5b      	lsrs	r3, r3, #21
 8002b98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <I2C_TransferConfig+0x58>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	ea02 0103 	and.w	r1, r2, r3
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bac:	7a7b      	ldrb	r3, [r7, #9]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	03ff63ff 	.word	0x03ff63ff

08002bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d138      	bne.n	8002c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e032      	b.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d139      	bne.n	8002cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e033      	b.n	8002cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2224      	movs	r2, #36	; 0x24
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40007000 	.word	0x40007000

08002d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d32:	d130      	bne.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d038      	beq.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2232      	movs	r2, #50	; 0x32
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	3301      	adds	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d68:	e002      	b.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7c:	d102      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f2      	bne.n	8002d6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d110      	bne.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e00f      	b.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d007      	beq.n	8002db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dac:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	431bde83 	.word	0x431bde83

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f000 bc11 	b.w	8003606 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de4:	4ba0      	ldr	r3, [pc, #640]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dee:	4b9e      	ldr	r3, [pc, #632]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80e4 	beq.w	8002fce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4c>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	f040 808b 	bne.w	8002f2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 8087 	bne.w	8002f2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e1c:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x64>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e3e8      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_RCC_OscConfig+0x7e>
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	e005      	b.n	8002e5a <HAL_RCC_OscConfig+0x8a>
 8002e4e:	4b86      	ldr	r3, [pc, #536]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d223      	bcs.n	8002ea6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fd7a 	bl	800395c <RCC_SetFlashLatencyFromMSIRange>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e3c9      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e72:	4b7d      	ldr	r3, [pc, #500]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4977      	ldr	r1, [pc, #476]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e90:	4b75      	ldr	r3, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	4972      	ldr	r1, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e025      	b.n	8002ef2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6f      	ldr	r2, [pc, #444]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	496a      	ldr	r1, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4965      	ldr	r1, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fd3a 	bl	800395c <RCC_SetFlashLatencyFromMSIRange>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e389      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef2:	f000 fc6f 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b5b      	ldr	r3, [pc, #364]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	495a      	ldr	r1, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x29c>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_OscConfig+0x2a0>)
 8002f10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f12:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe feb4 	bl	8001c84 <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d052      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	e36d      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d032      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f32:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fef1 	bl	8001d24 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f46:	f7fe feed 	bl	8001d24 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e356      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f58:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	493a      	ldr	r1, [pc, #232]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	4935      	ldr	r1, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e01a      	b.n	8002fce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f98:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe febe 	bl	8001d24 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fac:	f7fe feba 	bl	8001d24 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e323      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1dc>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d073      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x21c>
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d10e      	bne.n	8003004 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d063      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d15f      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e300      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x24c>
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0x288>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x270>
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x288>
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <HAL_RCC_OscConfig+0x298>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fe60 	bl	8001d24 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	e010      	b.n	800308a <HAL_RCC_OscConfig+0x2ba>
 8003068:	40021000 	.word	0x40021000
 800306c:	08007c60 	.word	0x08007c60
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fe54 	bl	8001d24 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e2bd      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	4baf      	ldr	r3, [pc, #700]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x2a8>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fe44 	bl	8001d24 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fe40 	bl	8001d24 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e2a9      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	4ba5      	ldr	r3, [pc, #660]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2d0>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d060      	beq.n	8003190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_OscConfig+0x310>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d119      	bne.n	800310e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d116      	bne.n	800310e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	4b99      	ldr	r3, [pc, #612]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x328>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e286      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b93      	ldr	r3, [pc, #588]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	4990      	ldr	r1, [pc, #576]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	e040      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d023      	beq.n	800315e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003116:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a8b      	ldr	r2, [pc, #556]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fdff 	bl	8001d24 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe fdfb 	bl	8001d24 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e264      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313c:	4b82      	ldr	r3, [pc, #520]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	497c      	ldr	r1, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	e018      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a79      	ldr	r2, [pc, #484]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fddb 	bl	8001d24 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fdd7 	bl	8001d24 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e240      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003184:	4b70      	ldr	r3, [pc, #448]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d03c      	beq.n	8003216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031aa:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fdb6 	bl	8001d24 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fdb2 	bl	8001d24 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e21b      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ef      	beq.n	80031bc <HAL_RCC_OscConfig+0x3ec>
 80031dc:	e01b      	b.n	8003216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80031e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe fd99 	bl	8001d24 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe fd95 	bl	8001d24 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e1fe      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ef      	bne.n	80031f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a6 	beq.w	8003370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b44      	ldr	r3, [pc, #272]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	4a43      	ldr	r2, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	6593      	str	r3, [r2, #88]	; 0x58
 8003240:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324c:	2301      	movs	r3, #1
 800324e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003250:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_RCC_OscConfig+0x57c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d118      	bne.n	800328e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325c:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_OscConfig+0x57c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3a      	ldr	r2, [pc, #232]	; (800334c <HAL_RCC_OscConfig+0x57c>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003268:	f7fe fd5c 	bl	8001d24 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fe fd58 	bl	8001d24 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1c1      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003282:	4b32      	ldr	r3, [pc, #200]	; (800334c <HAL_RCC_OscConfig+0x57c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4d8>
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a6:	e024      	b.n	80032f2 <HAL_RCC_OscConfig+0x522>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d110      	bne.n	80032d2 <HAL_RCC_OscConfig+0x502>
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	4a20      	ldr	r2, [pc, #128]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d0:	e00f      	b.n	80032f2 <HAL_RCC_OscConfig+0x522>
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 80032ea:	f023 0304 	bic.w	r3, r3, #4
 80032ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe fd13 	bl	8001d24 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe fd0f 	bl	8001d24 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e176      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_OscConfig+0x578>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ed      	beq.n	8003302 <HAL_RCC_OscConfig+0x532>
 8003326:	e01a      	b.n	800335e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe fcfc 	bl	8001d24 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe fcf8 	bl	8001d24 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d906      	bls.n	8003350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e15f      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003350:	4baa      	ldr	r3, [pc, #680]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e8      	bne.n	8003330 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4ba5      	ldr	r3, [pc, #660]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	4aa4      	ldr	r2, [pc, #656]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003384:	4b9d      	ldr	r3, [pc, #628]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	4a9c      	ldr	r2, [pc, #624]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fcc6 	bl	8001d24 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800339c:	f7fe fcc2 	bl	8001d24 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e12b      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ae:	4b93      	ldr	r3, [pc, #588]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80033b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCC_OscConfig+0x5cc>
 80033bc:	e01b      	b.n	80033f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c4:	4a8d      	ldr	r2, [pc, #564]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fca9 	bl	8001d24 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d6:	f7fe fca5 	bl	8001d24 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e10e      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e8:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80033ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ef      	bne.n	80033d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8102 	beq.w	8003604 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	f040 80c5 	bne.w	8003594 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	429a      	cmp	r2, r3
 800341c:	d12c      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	3b01      	subs	r3, #1
 800342a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d123      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d11b      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d113      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d109      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d067      	beq.n	8003548 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d062      	beq.n	8003544 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0bb      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003498:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800349a:	f7fe fc43 	bl	8001d24 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe fc3f 	bl	8001d24 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0a8      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCC_OscConfig+0x830>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034da:	0212      	lsls	r2, r2, #8
 80034dc:	4311      	orrs	r1, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0552      	lsls	r2, r2, #21
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0652      	lsls	r2, r2, #25
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fa:	06d2      	lsls	r2, r2, #27
 80034fc:	430a      	orrs	r2, r1
 80034fe:	493f      	ldr	r1, [pc, #252]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a39      	ldr	r2, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800351c:	f7fe fc02 	bl	8001d24 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fbfe 	bl	8001d24 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e067      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003542:	e05f      	b.n	8003604 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e05e      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003548:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d157      	bne.n	8003604 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003560:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800356c:	f7fe fbda 	bl	8001d24 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fbd6 	bl	8001d24 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e03f      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x7a4>
 8003592:	e037      	b.n	8003604 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d02d      	beq.n	80035f6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035b8:	f023 0303 	bic.w	r3, r3, #3
 80035bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fba9 	bl	8001d24 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fba5 	bl	8001d24 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e00e      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x806>
 80035f4:	e006      	b.n	8003604 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e005      	b.n	8003606 <HAL_RCC_OscConfig+0x836>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0c8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4961      	ldr	r1, [pc, #388]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b0      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d04c      	beq.n	80036fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003668:	4b56      	ldr	r3, [pc, #344]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d121      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e09e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e092      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003698:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e086      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e07e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 0203 	bic.w	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	493f      	ldr	r1, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fe fb2b 	bl	8001d24 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d2:	f7fe fb27 	bl	8001d24 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e066      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 020c 	and.w	r2, r3, #12
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d1eb      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003706:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	492c      	ldr	r1, [pc, #176]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d210      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 0207 	bic.w	r2, r3, #7
 800372e:	4924      	ldr	r1, [pc, #144]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e036      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4910      	ldr	r1, [pc, #64]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003786:	f000 f825 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490c      	ldr	r1, [pc, #48]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fa6a 	bl	8001c84 <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80037b4:	7afb      	ldrb	r3, [r7, #11]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08007c60 	.word	0x08007c60
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x34>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d121      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d11e      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003808:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003814:	4b31      	ldr	r3, [pc, #196]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003830:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003844:	e00a      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d102      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e004      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d101      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800385a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d134      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0xa6>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d003      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xac>
 8003878:	e005      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800387c:	617b      	str	r3, [r7, #20]
      break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003882:	617b      	str	r3, [r7, #20]
      break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	617b      	str	r3, [r7, #20]
      break;
 800388a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	fb02 f203 	mul.w	r2, r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0e5b      	lsrs	r3, r3, #25
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	3301      	adds	r3, #1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038cc:	69bb      	ldr	r3, [r7, #24]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08007c78 	.word	0x08007c78
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	007a1200 	.word	0x007a1200

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	08007c70 	.word	0x08007c70

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003934:	f7ff ffda 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08007c70 	.word	0x08007c70

0800395c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003968:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff f9c8 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
 800397a:	e014      	b.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6593      	str	r3, [r2, #88]	; 0x58
 8003988:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003994:	f7ff f9b8 	bl	8002d08 <HAL_PWREx_GetVoltageRange>
 8003998:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ac:	d10b      	bne.n	80039c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b80      	cmp	r3, #128	; 0x80
 80039b2:	d919      	bls.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2ba0      	cmp	r3, #160	; 0xa0
 80039b8:	d902      	bls.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ba:	2302      	movs	r3, #2
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e013      	b.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c0:	2301      	movs	r3, #1
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	e010      	b.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d902      	bls.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039cc:	2303      	movs	r3, #3
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e00a      	b.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d102      	bne.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039d8:	2302      	movs	r3, #2
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e004      	b.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d101      	bne.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039e4:	2301      	movs	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 0207 	bic.w	r2, r3, #7
 80039f0:	4909      	ldr	r1, [pc, #36]	; (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40022000 	.word	0x40022000

08003a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d031      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a40:	d01a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a46:	d814      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a52:	4bac      	ldr	r3, [pc, #688]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4aab      	ldr	r2, [pc, #684]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f9cc 	bl	8003e04 <RCCEx_PLLSAI1_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	74fb      	strb	r3, [r7, #19]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4ba0      	ldr	r3, [pc, #640]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	499d      	ldr	r1, [pc, #628]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8099 	beq.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aae:	4b95      	ldr	r3, [pc, #596]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a8e      	ldr	r2, [pc, #568]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad0:	4b8c      	ldr	r3, [pc, #560]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003adc:	2301      	movs	r3, #1
 8003ade:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae0:	4b89      	ldr	r3, [pc, #548]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a88      	ldr	r2, [pc, #544]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aec:	f7fe f91a 	bl	8001d24 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fe f916 	bl	8001d24 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	74fb      	strb	r3, [r7, #19]
        break;
 8003b06:	e005      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b08:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ef      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d155      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01e      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d019      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b36:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b42:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b52:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b62:	4a68      	ldr	r2, [pc, #416]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d016      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe f8d6 	bl	8001d24 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe f8d2 	bl	8001d24 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d902      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	74fb      	strb	r3, [r7, #19]
            break;
 8003b92:	e006      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b94:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ec      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	4b56      	ldr	r3, [pc, #344]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	4953      	ldr	r1, [pc, #332]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
 8003bc4:	e001      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7c7b      	ldrb	r3, [r7, #17]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be8:	4b46      	ldr	r3, [pc, #280]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4943      	ldr	r1, [pc, #268]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f023 020c 	bic.w	r2, r3, #12
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	493a      	ldr	r1, [pc, #232]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	4932      	ldr	r1, [pc, #200]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	4929      	ldr	r1, [pc, #164]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c70:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4921      	ldr	r1, [pc, #132]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02c      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf6:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4a02      	ldr	r2, [pc, #8]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d00:	60d3      	str	r3, [r2, #12]
 8003d02:	e015      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f871 	bl	8003e04 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d028      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	492d      	ldr	r1, [pc, #180]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d66:	60d3      	str	r3, [r2, #12]
 8003d68:	e011      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f842 	bl	8003e04 <RCCEx_PLLSAI1_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f81f 	bl	8003e04 <RCCEx_PLLSAI1_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	4904      	ldr	r1, [pc, #16]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003df6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e12:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d018      	beq.n	8003e50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e1e:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0203 	and.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10d      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
       ||
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e36:	4b6b      	ldr	r3, [pc, #428]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
       ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d047      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	e044      	b.n	8003eda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d018      	beq.n	8003e8a <RCCEx_PLLSAI1_Config+0x86>
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d825      	bhi.n	8003ea8 <RCCEx_PLLSAI1_Config+0xa4>
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d002      	beq.n	8003e66 <RCCEx_PLLSAI1_Config+0x62>
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d009      	beq.n	8003e78 <RCCEx_PLLSAI1_Config+0x74>
 8003e64:	e020      	b.n	8003ea8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11d      	bne.n	8003eae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e76:	e01a      	b.n	8003eae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e78:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d116      	bne.n	8003eb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e88:	e013      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e8a:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e96:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ea6:	e006      	b.n	8003eb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003eac:	e004      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	4943      	ldr	r1, [pc, #268]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d17c      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3f      	ldr	r2, [pc, #252]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fd ff1a 	bl	8001d24 <HAL_GetTick>
 8003ef0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef2:	e009      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef4:	f7fd ff16 	bl	8001d24 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	73fb      	strb	r3, [r7, #15]
        break;
 8003f06:	e005      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ef      	bne.n	8003ef4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d15f      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d110      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6892      	ldr	r2, [r2, #8]
 8003f30:	0211      	lsls	r1, r2, #8
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	06d2      	lsls	r2, r2, #27
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	492a      	ldr	r1, [pc, #168]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
 8003f40:	e027      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d112      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	0211      	lsls	r1, r2, #8
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6912      	ldr	r2, [r2, #16]
 8003f5e:	0852      	lsrs	r2, r2, #1
 8003f60:	3a01      	subs	r2, #1
 8003f62:	0552      	lsls	r2, r2, #21
 8003f64:	430a      	orrs	r2, r1
 8003f66:	491f      	ldr	r1, [pc, #124]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	610b      	str	r3, [r1, #16]
 8003f6c:	e011      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	0211      	lsls	r1, r2, #8
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6952      	ldr	r2, [r2, #20]
 8003f84:	0852      	lsrs	r2, r2, #1
 8003f86:	3a01      	subs	r2, #1
 8003f88:	0652      	lsls	r2, r2, #25
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	4915      	ldr	r1, [pc, #84]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7fd fec1 	bl	8001d24 <HAL_GetTick>
 8003fa2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fa4:	e009      	b.n	8003fba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fa6:	f7fd febd 	bl	8001d24 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d902      	bls.n	8003fba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	73fb      	strb	r3, [r7, #15]
          break;
 8003fb8:	e005      	b.n	8003fc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ef      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e049      	b.n	800408e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fc08 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f000 f9d4 	bl	80043d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e033      	b.n	8004118 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_TIM_Base_Start+0x8c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_TIM_Base_Start+0x3e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_Base_Start+0x3e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a15      	ldr	r2, [pc, #84]	; (8004128 <HAL_TIM_Base_Start+0x90>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d115      	bne.n	8004102 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_TIM_Base_Start+0x94>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d015      	beq.n	8004114 <HAL_TIM_Base_Start+0x7c>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d011      	beq.n	8004114 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004100:	e008      	b.n	8004114 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e000      	b.n	8004116 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40014000 	.word	0x40014000
 800412c:	00010007 	.word	0x00010007

08004130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0202 	mvn.w	r2, #2
 800415c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f90f 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f901 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f912 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0204 	mvn.w	r2, #4
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8e5 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f8d7 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8e8 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0208 	mvn.w	r2, #8
 8004204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2204      	movs	r2, #4
 800420a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8bb 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8ad 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8be 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d122      	bne.n	8004288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b10      	cmp	r3, #16
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0210 	mvn.w	r2, #16
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2208      	movs	r2, #8
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f891 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f883 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f894 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10e      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0201 	mvn.w	r2, #1
 80042ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f85d 	bl	800436e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d10e      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d107      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f94e 	bl	800457c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f941 	bl	8004590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d10e      	bne.n	800433a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d107      	bne.n	800433a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f842 	bl	80043be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b20      	cmp	r3, #32
 8004346:	d10e      	bne.n	8004366 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	d107      	bne.n	8004366 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f06f 0220 	mvn.w	r2, #32
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f901 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <TIM_Base_SetConfig+0xbc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x20>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <TIM_Base_SetConfig+0xbc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0x52>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0x52>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <TIM_Base_SetConfig+0xc0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0x52>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <TIM_Base_SetConfig+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <TIM_Base_SetConfig+0xbc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0xa0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <TIM_Base_SetConfig+0xc0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0xa0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <TIM_Base_SetConfig+0xc4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	615a      	str	r2, [r3, #20]
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400

0800449c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e04f      	b.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d004      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10c      	bne.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4313      	orrs	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e040      	b.n	8004638 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f960 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa4e 	bl	8004a84 <UART_SetConfig>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e022      	b.n	8004638 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fc4e 	bl	8004e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fcd5 	bl	8004fe0 <UART_CheckIdleState>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f640 030f 	movw	r3, #2063	; 0x80f
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d113      	bne.n	8004698 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 81ce 	beq.w	8004a2a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
      }
      return;
 8004696:	e1c8      	b.n	8004a2a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80e3 	beq.w	8004866 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4ba6      	ldr	r3, [pc, #664]	; (8004948 <HAL_UART_IRQHandler+0x308>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80d8 	beq.w	8004866 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d010      	beq.n	80046e2 <HAL_UART_IRQHandler+0xa2>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <HAL_UART_IRQHandler+0xce>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2202      	movs	r2, #2
 80046fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d010      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2204      	movs	r2, #4
 8004728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004730:	f043 0202 	orr.w	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2208      	movs	r2, #8
 800475e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004766:	f043 0208 	orr.w	r2, r3, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_UART_IRQHandler+0x15e>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8142 	beq.w	8004a2e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d004      	beq.n	80047ee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d031      	beq.n	8004852 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fcbb 	bl	800516a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d123      	bne.n	800484a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a4b      	ldr	r2, [pc, #300]	; (800494c <HAL_UART_IRQHandler+0x30c>)
 8004820:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fbfb 	bl	8002022 <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00f      	b.n	8004862 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f908 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00b      	b.n	8004862 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f904 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e007      	b.n	8004862 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f900 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004860:	e0e5      	b.n	8004a2e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004862:	bf00      	nop
    return;
 8004864:	e0e3      	b.n	8004a2e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	2b01      	cmp	r3, #1
 800486c:	f040 80a9 	bne.w	80049c2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80a3 	beq.w	80049c2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 809d 	beq.w	80049c2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d158      	bne.n	8004950 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80048a8:	893b      	ldrh	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80c1 	beq.w	8004a32 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048b6:	893a      	ldrh	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	f080 80ba 	bcs.w	8004a32 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	893a      	ldrh	r2, [r7, #8]
 80048c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12a      	bne.n	800492c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004904:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0210 	bic.w	r2, r2, #16
 8004920:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fb3d 	bl	8001fa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004938:	b29b      	uxth	r3, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f893 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004946:	e074      	b.n	8004a32 <HAL_UART_IRQHandler+0x3f2>
 8004948:	04000120 	.word	0x04000120
 800494c:	080051c9 	.word	0x080051c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495c:	b29b      	uxth	r3, r3
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d063      	beq.n	8004a36 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d060      	beq.n	8004a36 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004982:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0210 	bic.w	r2, r2, #16
 80049b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f856 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049c0:	e039      	b.n	8004a36 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_UART_IRQHandler+0x3a8>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fc20 	bl	8005226 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049e6:	e029      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
    }
    return;
 8004a0c:	e015      	b.n	8004a3a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fbe6 	bl	80051f4 <UART_EndTransmit_IT>
    return;
 8004a28:	e008      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e006      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a2e:	bf00      	nop
 8004a30:	e004      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4baf      	ldr	r3, [pc, #700]	; (8004d6c <UART_SetConfig+0x2e8>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	69f9      	ldr	r1, [r7, #28]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4aa4      	ldr	r2, [pc, #656]	; (8004d70 <UART_SetConfig+0x2ec>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9b      	ldr	r2, [pc, #620]	; (8004d74 <UART_SetConfig+0x2f0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d121      	bne.n	8004b4e <UART_SetConfig+0xca>
 8004b0a:	4b9b      	ldr	r3, [pc, #620]	; (8004d78 <UART_SetConfig+0x2f4>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d817      	bhi.n	8004b48 <UART_SetConfig+0xc4>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0x9c>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b37 	.word	0x08004b37
 8004b2c:	08004b43 	.word	0x08004b43
 8004b30:	2301      	movs	r3, #1
 8004b32:	76fb      	strb	r3, [r7, #27]
 8004b34:	e070      	b.n	8004c18 <UART_SetConfig+0x194>
 8004b36:	2302      	movs	r3, #2
 8004b38:	76fb      	strb	r3, [r7, #27]
 8004b3a:	e06d      	b.n	8004c18 <UART_SetConfig+0x194>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	76fb      	strb	r3, [r7, #27]
 8004b40:	e06a      	b.n	8004c18 <UART_SetConfig+0x194>
 8004b42:	2308      	movs	r3, #8
 8004b44:	76fb      	strb	r3, [r7, #27]
 8004b46:	e067      	b.n	8004c18 <UART_SetConfig+0x194>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	76fb      	strb	r3, [r7, #27]
 8004b4c:	e064      	b.n	8004c18 <UART_SetConfig+0x194>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a8a      	ldr	r2, [pc, #552]	; (8004d7c <UART_SetConfig+0x2f8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d132      	bne.n	8004bbe <UART_SetConfig+0x13a>
 8004b58:	4b87      	ldr	r3, [pc, #540]	; (8004d78 <UART_SetConfig+0x2f4>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d828      	bhi.n	8004bb8 <UART_SetConfig+0x134>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0xe8>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bb9 	.word	0x08004bb9
 8004b74:	08004bb9 	.word	0x08004bb9
 8004b78:	08004bb9 	.word	0x08004bb9
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bb9 	.word	0x08004bb9
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bb9 	.word	0x08004bb9
 8004b8c:	08004ba7 	.word	0x08004ba7
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004bb3 	.word	0x08004bb3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	76fb      	strb	r3, [r7, #27]
 8004ba4:	e038      	b.n	8004c18 <UART_SetConfig+0x194>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	76fb      	strb	r3, [r7, #27]
 8004baa:	e035      	b.n	8004c18 <UART_SetConfig+0x194>
 8004bac:	2304      	movs	r3, #4
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e032      	b.n	8004c18 <UART_SetConfig+0x194>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	76fb      	strb	r3, [r7, #27]
 8004bb6:	e02f      	b.n	8004c18 <UART_SetConfig+0x194>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	76fb      	strb	r3, [r7, #27]
 8004bbc:	e02c      	b.n	8004c18 <UART_SetConfig+0x194>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6b      	ldr	r2, [pc, #428]	; (8004d70 <UART_SetConfig+0x2ec>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d125      	bne.n	8004c14 <UART_SetConfig+0x190>
 8004bc8:	4b6b      	ldr	r3, [pc, #428]	; (8004d78 <UART_SetConfig+0x2f4>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bd6:	d017      	beq.n	8004c08 <UART_SetConfig+0x184>
 8004bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bdc:	d817      	bhi.n	8004c0e <UART_SetConfig+0x18a>
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be2:	d00b      	beq.n	8004bfc <UART_SetConfig+0x178>
 8004be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be8:	d811      	bhi.n	8004c0e <UART_SetConfig+0x18a>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <UART_SetConfig+0x172>
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf2:	d006      	beq.n	8004c02 <UART_SetConfig+0x17e>
 8004bf4:	e00b      	b.n	8004c0e <UART_SetConfig+0x18a>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	76fb      	strb	r3, [r7, #27]
 8004bfa:	e00d      	b.n	8004c18 <UART_SetConfig+0x194>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	76fb      	strb	r3, [r7, #27]
 8004c00:	e00a      	b.n	8004c18 <UART_SetConfig+0x194>
 8004c02:	2304      	movs	r3, #4
 8004c04:	76fb      	strb	r3, [r7, #27]
 8004c06:	e007      	b.n	8004c18 <UART_SetConfig+0x194>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	76fb      	strb	r3, [r7, #27]
 8004c0c:	e004      	b.n	8004c18 <UART_SetConfig+0x194>
 8004c0e:	2310      	movs	r3, #16
 8004c10:	76fb      	strb	r3, [r7, #27]
 8004c12:	e001      	b.n	8004c18 <UART_SetConfig+0x194>
 8004c14:	2310      	movs	r3, #16
 8004c16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a54      	ldr	r2, [pc, #336]	; (8004d70 <UART_SetConfig+0x2ec>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d173      	bne.n	8004d0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c22:	7efb      	ldrb	r3, [r7, #27]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d824      	bhi.n	8004c72 <UART_SetConfig+0x1ee>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x1ac>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c63 	.word	0x08004c63
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c73 	.word	0x08004c73
 8004c50:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fe fe56 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8004c58:	6178      	str	r0, [r7, #20]
        break;
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b48      	ldr	r3, [pc, #288]	; (8004d80 <UART_SetConfig+0x2fc>)
 8004c5e:	617b      	str	r3, [r7, #20]
        break;
 8004c60:	e00c      	b.n	8004c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7fe fdb7 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004c66:	6178      	str	r0, [r7, #20]
        break;
 8004c68:	e008      	b.n	8004c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	617b      	str	r3, [r7, #20]
        break;
 8004c70:	e004      	b.n	8004c7c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	76bb      	strb	r3, [r7, #26]
        break;
 8004c7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80fe 	beq.w	8004e80 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d305      	bcc.n	8004ca0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d902      	bls.n	8004ca6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	76bb      	strb	r3, [r7, #26]
 8004ca4:	e0ec      	b.n	8004e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	020b      	lsls	r3, r1, #8
 8004cb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cbc:	0202      	lsls	r2, r0, #8
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	6849      	ldr	r1, [r1, #4]
 8004cc2:	0849      	lsrs	r1, r1, #1
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	1814      	adds	r4, r2, r0
 8004ccc:	eb43 0501 	adc.w	r5, r3, r1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f7fb ffb3 	bl	8000c48 <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf0:	d308      	bcc.n	8004d04 <UART_SetConfig+0x280>
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf8:	d204      	bcs.n	8004d04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	e0bd      	b.n	8004e80 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	76bb      	strb	r3, [r7, #26]
 8004d08:	e0ba      	b.n	8004e80 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d12:	d168      	bne.n	8004de6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004d14:	7efb      	ldrb	r3, [r7, #27]
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d834      	bhi.n	8004d84 <UART_SetConfig+0x300>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x29c>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004d55 	.word	0x08004d55
 8004d2c:	08004d85 	.word	0x08004d85
 8004d30:	08004d5b 	.word	0x08004d5b
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004d85 	.word	0x08004d85
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d63 	.word	0x08004d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fe fdde 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8004d48:	6178      	str	r0, [r7, #20]
        break;
 8004d4a:	e020      	b.n	8004d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7fe fdf0 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8004d50:	6178      	str	r0, [r7, #20]
        break;
 8004d52:	e01c      	b.n	8004d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <UART_SetConfig+0x2fc>)
 8004d56:	617b      	str	r3, [r7, #20]
        break;
 8004d58:	e019      	b.n	8004d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5a:	f7fe fd3b 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004d5e:	6178      	str	r0, [r7, #20]
        break;
 8004d60:	e015      	b.n	8004d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d66:	617b      	str	r3, [r7, #20]
        break;
 8004d68:	e011      	b.n	8004d8e <UART_SetConfig+0x30a>
 8004d6a:	bf00      	nop
 8004d6c:	efff69f3 	.word	0xefff69f3
 8004d70:	40008000 	.word	0x40008000
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40004400 	.word	0x40004400
 8004d80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	76bb      	strb	r3, [r7, #26]
        break;
 8004d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d075      	beq.n	8004e80 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005a      	lsls	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d916      	bls.n	8004de0 <UART_SetConfig+0x35c>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d212      	bcs.n	8004de0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f023 030f 	bic.w	r3, r3, #15
 8004dc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	89fa      	ldrh	r2, [r7, #14]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e04f      	b.n	8004e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	76bb      	strb	r3, [r7, #26]
 8004de4:	e04c      	b.n	8004e80 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de6:	7efb      	ldrb	r3, [r7, #27]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d828      	bhi.n	8004e3e <UART_SetConfig+0x3ba>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x370>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e3f 	.word	0x08004e3f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
 8004e14:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe fd74 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6178      	str	r0, [r7, #20]
        break;
 8004e1e:	e013      	b.n	8004e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fe fd86 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8004e24:	6178      	str	r0, [r7, #20]
        break;
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <UART_SetConfig+0x414>)
 8004e2a:	617b      	str	r3, [r7, #20]
        break;
 8004e2c:	e00c      	b.n	8004e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fe fcd1 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004e32:	6178      	str	r0, [r7, #20]
        break;
 8004e34:	e008      	b.n	8004e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3a:	617b      	str	r3, [r7, #20]
        break;
 8004e3c:	e004      	b.n	8004e48 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	76bb      	strb	r3, [r7, #26]
        break;
 8004e46:	bf00      	nop
    }

    if (pclk != 0U)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085a      	lsrs	r2, r3, #1
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d908      	bls.n	8004e7c <UART_SetConfig+0x3f8>
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e70:	d204      	bcs.n	8004e7c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e001      	b.n	8004e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bdb0      	pop	{r4, r5, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	00f42400 	.word	0x00f42400

08004e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d10a      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff0:	f7fc fe98 	bl	8001d24 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10e      	bne.n	8005022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f82d 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e023      	b.n	800506a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10e      	bne.n	800504e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f817 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e00d      	b.n	800506a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005082:	e05e      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800508a:	d05a      	beq.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fc fe4a 	bl	8001d24 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11b      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e043      	b.n	8005162 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02c      	beq.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f6:	d124      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005100:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e00f      	b.n	8005162 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4013      	ands	r3, r2
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	429a      	cmp	r2, r3
 800515e:	d091      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005180:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0210 	bic.w	r2, r2, #16
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fc36 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fc13 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <__errno>:
 800523c:	4b01      	ldr	r3, [pc, #4]	; (8005244 <__errno+0x8>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000000c 	.word	0x2000000c

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	; (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	; (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	; (800528c <__libc_init_array+0x44>)
 800525c:	f002 fcf2 	bl	8007c44 <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08008094 	.word	0x08008094
 8005284:	08008094 	.word	0x08008094
 8005288:	08008094 	.word	0x08008094
 800528c:	08008098 	.word	0x08008098

08005290 <memset>:
 8005290:	4402      	add	r2, r0
 8005292:	4603      	mov	r3, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <__cvt>:
 80052a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	ec55 4b10 	vmov	r4, r5, d0
 80052a8:	2d00      	cmp	r5, #0
 80052aa:	460e      	mov	r6, r1
 80052ac:	4619      	mov	r1, r3
 80052ae:	462b      	mov	r3, r5
 80052b0:	bfbb      	ittet	lt
 80052b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052b6:	461d      	movlt	r5, r3
 80052b8:	2300      	movge	r3, #0
 80052ba:	232d      	movlt	r3, #45	; 0x2d
 80052bc:	700b      	strb	r3, [r1, #0]
 80052be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052c4:	4691      	mov	r9, r2
 80052c6:	f023 0820 	bic.w	r8, r3, #32
 80052ca:	bfbc      	itt	lt
 80052cc:	4622      	movlt	r2, r4
 80052ce:	4614      	movlt	r4, r2
 80052d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052d4:	d005      	beq.n	80052e2 <__cvt+0x42>
 80052d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052da:	d100      	bne.n	80052de <__cvt+0x3e>
 80052dc:	3601      	adds	r6, #1
 80052de:	2102      	movs	r1, #2
 80052e0:	e000      	b.n	80052e4 <__cvt+0x44>
 80052e2:	2103      	movs	r1, #3
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	ab02      	add	r3, sp, #8
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	ec45 4b10 	vmov	d0, r4, r5
 80052f0:	4653      	mov	r3, sl
 80052f2:	4632      	mov	r2, r6
 80052f4:	f000 fccc 	bl	8005c90 <_dtoa_r>
 80052f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052fc:	4607      	mov	r7, r0
 80052fe:	d102      	bne.n	8005306 <__cvt+0x66>
 8005300:	f019 0f01 	tst.w	r9, #1
 8005304:	d022      	beq.n	800534c <__cvt+0xac>
 8005306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800530a:	eb07 0906 	add.w	r9, r7, r6
 800530e:	d110      	bne.n	8005332 <__cvt+0x92>
 8005310:	783b      	ldrb	r3, [r7, #0]
 8005312:	2b30      	cmp	r3, #48	; 0x30
 8005314:	d10a      	bne.n	800532c <__cvt+0x8c>
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f7fb fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005322:	b918      	cbnz	r0, 800532c <__cvt+0x8c>
 8005324:	f1c6 0601 	rsb	r6, r6, #1
 8005328:	f8ca 6000 	str.w	r6, [sl]
 800532c:	f8da 3000 	ldr.w	r3, [sl]
 8005330:	4499      	add	r9, r3
 8005332:	2200      	movs	r2, #0
 8005334:	2300      	movs	r3, #0
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fb fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800533e:	b108      	cbz	r0, 8005344 <__cvt+0xa4>
 8005340:	f8cd 900c 	str.w	r9, [sp, #12]
 8005344:	2230      	movs	r2, #48	; 0x30
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	454b      	cmp	r3, r9
 800534a:	d307      	bcc.n	800535c <__cvt+0xbc>
 800534c:	9b03      	ldr	r3, [sp, #12]
 800534e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005350:	1bdb      	subs	r3, r3, r7
 8005352:	4638      	mov	r0, r7
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	b004      	add	sp, #16
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	1c59      	adds	r1, r3, #1
 800535e:	9103      	str	r1, [sp, #12]
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e7f0      	b.n	8005346 <__cvt+0xa6>

08005364 <__exponent>:
 8005364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005366:	4603      	mov	r3, r0
 8005368:	2900      	cmp	r1, #0
 800536a:	bfb8      	it	lt
 800536c:	4249      	neglt	r1, r1
 800536e:	f803 2b02 	strb.w	r2, [r3], #2
 8005372:	bfb4      	ite	lt
 8005374:	222d      	movlt	r2, #45	; 0x2d
 8005376:	222b      	movge	r2, #43	; 0x2b
 8005378:	2909      	cmp	r1, #9
 800537a:	7042      	strb	r2, [r0, #1]
 800537c:	dd2a      	ble.n	80053d4 <__exponent+0x70>
 800537e:	f10d 0407 	add.w	r4, sp, #7
 8005382:	46a4      	mov	ip, r4
 8005384:	270a      	movs	r7, #10
 8005386:	46a6      	mov	lr, r4
 8005388:	460a      	mov	r2, r1
 800538a:	fb91 f6f7 	sdiv	r6, r1, r7
 800538e:	fb07 1516 	mls	r5, r7, r6, r1
 8005392:	3530      	adds	r5, #48	; 0x30
 8005394:	2a63      	cmp	r2, #99	; 0x63
 8005396:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800539a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800539e:	4631      	mov	r1, r6
 80053a0:	dcf1      	bgt.n	8005386 <__exponent+0x22>
 80053a2:	3130      	adds	r1, #48	; 0x30
 80053a4:	f1ae 0502 	sub.w	r5, lr, #2
 80053a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053ac:	1c44      	adds	r4, r0, #1
 80053ae:	4629      	mov	r1, r5
 80053b0:	4561      	cmp	r1, ip
 80053b2:	d30a      	bcc.n	80053ca <__exponent+0x66>
 80053b4:	f10d 0209 	add.w	r2, sp, #9
 80053b8:	eba2 020e 	sub.w	r2, r2, lr
 80053bc:	4565      	cmp	r5, ip
 80053be:	bf88      	it	hi
 80053c0:	2200      	movhi	r2, #0
 80053c2:	4413      	add	r3, r2
 80053c4:	1a18      	subs	r0, r3, r0
 80053c6:	b003      	add	sp, #12
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053d2:	e7ed      	b.n	80053b0 <__exponent+0x4c>
 80053d4:	2330      	movs	r3, #48	; 0x30
 80053d6:	3130      	adds	r1, #48	; 0x30
 80053d8:	7083      	strb	r3, [r0, #2]
 80053da:	70c1      	strb	r1, [r0, #3]
 80053dc:	1d03      	adds	r3, r0, #4
 80053de:	e7f1      	b.n	80053c4 <__exponent+0x60>

080053e0 <_printf_float>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	ed2d 8b02 	vpush	{d8}
 80053e8:	b08d      	sub	sp, #52	; 0x34
 80053ea:	460c      	mov	r4, r1
 80053ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053f0:	4616      	mov	r6, r2
 80053f2:	461f      	mov	r7, r3
 80053f4:	4605      	mov	r5, r0
 80053f6:	f001 fa37 	bl	8006868 <_localeconv_r>
 80053fa:	f8d0 a000 	ldr.w	sl, [r0]
 80053fe:	4650      	mov	r0, sl
 8005400:	f7fa fee6 	bl	80001d0 <strlen>
 8005404:	2300      	movs	r3, #0
 8005406:	930a      	str	r3, [sp, #40]	; 0x28
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f8d8 3000 	ldr.w	r3, [r8]
 8005410:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005414:	3307      	adds	r3, #7
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	f103 0208 	add.w	r2, r3, #8
 800541e:	f8c8 2000 	str.w	r2, [r8]
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800542a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800542e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005432:	9307      	str	r3, [sp, #28]
 8005434:	f8cd 8018 	str.w	r8, [sp, #24]
 8005438:	ee08 0a10 	vmov	s16, r0
 800543c:	4b9f      	ldr	r3, [pc, #636]	; (80056bc <_printf_float+0x2dc>)
 800543e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005446:	f7fb fb71 	bl	8000b2c <__aeabi_dcmpun>
 800544a:	bb88      	cbnz	r0, 80054b0 <_printf_float+0xd0>
 800544c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005450:	4b9a      	ldr	r3, [pc, #616]	; (80056bc <_printf_float+0x2dc>)
 8005452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005456:	f7fb fb4b 	bl	8000af0 <__aeabi_dcmple>
 800545a:	bb48      	cbnz	r0, 80054b0 <_printf_float+0xd0>
 800545c:	2200      	movs	r2, #0
 800545e:	2300      	movs	r3, #0
 8005460:	4640      	mov	r0, r8
 8005462:	4649      	mov	r1, r9
 8005464:	f7fb fb3a 	bl	8000adc <__aeabi_dcmplt>
 8005468:	b110      	cbz	r0, 8005470 <_printf_float+0x90>
 800546a:	232d      	movs	r3, #45	; 0x2d
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	4b93      	ldr	r3, [pc, #588]	; (80056c0 <_printf_float+0x2e0>)
 8005472:	4894      	ldr	r0, [pc, #592]	; (80056c4 <_printf_float+0x2e4>)
 8005474:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005478:	bf94      	ite	ls
 800547a:	4698      	movls	r8, r3
 800547c:	4680      	movhi	r8, r0
 800547e:	2303      	movs	r3, #3
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	9b05      	ldr	r3, [sp, #20]
 8005484:	f023 0204 	bic.w	r2, r3, #4
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	f04f 0900 	mov.w	r9, #0
 800548e:	9700      	str	r7, [sp, #0]
 8005490:	4633      	mov	r3, r6
 8005492:	aa0b      	add	r2, sp, #44	; 0x2c
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f9d8 	bl	800584c <_printf_common>
 800549c:	3001      	adds	r0, #1
 800549e:	f040 8090 	bne.w	80055c2 <_printf_float+0x1e2>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a6:	b00d      	add	sp, #52	; 0x34
 80054a8:	ecbd 8b02 	vpop	{d8}
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	4640      	mov	r0, r8
 80054b6:	4649      	mov	r1, r9
 80054b8:	f7fb fb38 	bl	8000b2c <__aeabi_dcmpun>
 80054bc:	b140      	cbz	r0, 80054d0 <_printf_float+0xf0>
 80054be:	464b      	mov	r3, r9
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbc      	itt	lt
 80054c4:	232d      	movlt	r3, #45	; 0x2d
 80054c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ca:	487f      	ldr	r0, [pc, #508]	; (80056c8 <_printf_float+0x2e8>)
 80054cc:	4b7f      	ldr	r3, [pc, #508]	; (80056cc <_printf_float+0x2ec>)
 80054ce:	e7d1      	b.n	8005474 <_printf_float+0x94>
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054d6:	9206      	str	r2, [sp, #24]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	d13f      	bne.n	800555c <_printf_float+0x17c>
 80054dc:	2306      	movs	r3, #6
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	6861      	ldr	r1, [r4, #4]
 80054e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054e8:	2300      	movs	r3, #0
 80054ea:	9303      	str	r3, [sp, #12]
 80054ec:	ab0a      	add	r3, sp, #40	; 0x28
 80054ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054f2:	ab09      	add	r3, sp, #36	; 0x24
 80054f4:	ec49 8b10 	vmov	d0, r8, r9
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	6022      	str	r2, [r4, #0]
 80054fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005500:	4628      	mov	r0, r5
 8005502:	f7ff fecd 	bl	80052a0 <__cvt>
 8005506:	9b06      	ldr	r3, [sp, #24]
 8005508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800550a:	2b47      	cmp	r3, #71	; 0x47
 800550c:	4680      	mov	r8, r0
 800550e:	d108      	bne.n	8005522 <_printf_float+0x142>
 8005510:	1cc8      	adds	r0, r1, #3
 8005512:	db02      	blt.n	800551a <_printf_float+0x13a>
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	4299      	cmp	r1, r3
 8005518:	dd41      	ble.n	800559e <_printf_float+0x1be>
 800551a:	f1ab 0b02 	sub.w	fp, fp, #2
 800551e:	fa5f fb8b 	uxtb.w	fp, fp
 8005522:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005526:	d820      	bhi.n	800556a <_printf_float+0x18a>
 8005528:	3901      	subs	r1, #1
 800552a:	465a      	mov	r2, fp
 800552c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005530:	9109      	str	r1, [sp, #36]	; 0x24
 8005532:	f7ff ff17 	bl	8005364 <__exponent>
 8005536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005538:	1813      	adds	r3, r2, r0
 800553a:	2a01      	cmp	r2, #1
 800553c:	4681      	mov	r9, r0
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	dc02      	bgt.n	8005548 <_printf_float+0x168>
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	07d2      	lsls	r2, r2, #31
 8005546:	d501      	bpl.n	800554c <_printf_float+0x16c>
 8005548:	3301      	adds	r3, #1
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005550:	2b00      	cmp	r3, #0
 8005552:	d09c      	beq.n	800548e <_printf_float+0xae>
 8005554:	232d      	movs	r3, #45	; 0x2d
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555a:	e798      	b.n	800548e <_printf_float+0xae>
 800555c:	9a06      	ldr	r2, [sp, #24]
 800555e:	2a47      	cmp	r2, #71	; 0x47
 8005560:	d1be      	bne.n	80054e0 <_printf_float+0x100>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1bc      	bne.n	80054e0 <_printf_float+0x100>
 8005566:	2301      	movs	r3, #1
 8005568:	e7b9      	b.n	80054de <_printf_float+0xfe>
 800556a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800556e:	d118      	bne.n	80055a2 <_printf_float+0x1c2>
 8005570:	2900      	cmp	r1, #0
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	dd0b      	ble.n	800558e <_printf_float+0x1ae>
 8005576:	6121      	str	r1, [r4, #16]
 8005578:	b913      	cbnz	r3, 8005580 <_printf_float+0x1a0>
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	07d0      	lsls	r0, r2, #31
 800557e:	d502      	bpl.n	8005586 <_printf_float+0x1a6>
 8005580:	3301      	adds	r3, #1
 8005582:	440b      	add	r3, r1
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	65a1      	str	r1, [r4, #88]	; 0x58
 8005588:	f04f 0900 	mov.w	r9, #0
 800558c:	e7de      	b.n	800554c <_printf_float+0x16c>
 800558e:	b913      	cbnz	r3, 8005596 <_printf_float+0x1b6>
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	07d2      	lsls	r2, r2, #31
 8005594:	d501      	bpl.n	800559a <_printf_float+0x1ba>
 8005596:	3302      	adds	r3, #2
 8005598:	e7f4      	b.n	8005584 <_printf_float+0x1a4>
 800559a:	2301      	movs	r3, #1
 800559c:	e7f2      	b.n	8005584 <_printf_float+0x1a4>
 800559e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a4:	4299      	cmp	r1, r3
 80055a6:	db05      	blt.n	80055b4 <_printf_float+0x1d4>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	6121      	str	r1, [r4, #16]
 80055ac:	07d8      	lsls	r0, r3, #31
 80055ae:	d5ea      	bpl.n	8005586 <_printf_float+0x1a6>
 80055b0:	1c4b      	adds	r3, r1, #1
 80055b2:	e7e7      	b.n	8005584 <_printf_float+0x1a4>
 80055b4:	2900      	cmp	r1, #0
 80055b6:	bfd4      	ite	le
 80055b8:	f1c1 0202 	rsble	r2, r1, #2
 80055bc:	2201      	movgt	r2, #1
 80055be:	4413      	add	r3, r2
 80055c0:	e7e0      	b.n	8005584 <_printf_float+0x1a4>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	055a      	lsls	r2, r3, #21
 80055c6:	d407      	bmi.n	80055d8 <_printf_float+0x1f8>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	4642      	mov	r2, r8
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	d12c      	bne.n	8005630 <_printf_float+0x250>
 80055d6:	e764      	b.n	80054a2 <_printf_float+0xc2>
 80055d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055dc:	f240 80e0 	bls.w	80057a0 <_printf_float+0x3c0>
 80055e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f7fb fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d034      	beq.n	800565a <_printf_float+0x27a>
 80055f0:	4a37      	ldr	r2, [pc, #220]	; (80056d0 <_printf_float+0x2f0>)
 80055f2:	2301      	movs	r3, #1
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f af51 	beq.w	80054a2 <_printf_float+0xc2>
 8005600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005604:	429a      	cmp	r2, r3
 8005606:	db02      	blt.n	800560e <_printf_float+0x22e>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07d8      	lsls	r0, r3, #31
 800560c:	d510      	bpl.n	8005630 <_printf_float+0x250>
 800560e:	ee18 3a10 	vmov	r3, s16
 8005612:	4652      	mov	r2, sl
 8005614:	4631      	mov	r1, r6
 8005616:	4628      	mov	r0, r5
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	f43f af41 	beq.w	80054a2 <_printf_float+0xc2>
 8005620:	f04f 0800 	mov.w	r8, #0
 8005624:	f104 091a 	add.w	r9, r4, #26
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	3b01      	subs	r3, #1
 800562c:	4543      	cmp	r3, r8
 800562e:	dc09      	bgt.n	8005644 <_printf_float+0x264>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	f100 8105 	bmi.w	8005842 <_printf_float+0x462>
 8005638:	68e0      	ldr	r0, [r4, #12]
 800563a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800563c:	4298      	cmp	r0, r3
 800563e:	bfb8      	it	lt
 8005640:	4618      	movlt	r0, r3
 8005642:	e730      	b.n	80054a6 <_printf_float+0xc6>
 8005644:	2301      	movs	r3, #1
 8005646:	464a      	mov	r2, r9
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	f43f af27 	beq.w	80054a2 <_printf_float+0xc2>
 8005654:	f108 0801 	add.w	r8, r8, #1
 8005658:	e7e6      	b.n	8005628 <_printf_float+0x248>
 800565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	dc39      	bgt.n	80056d4 <_printf_float+0x2f4>
 8005660:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <_printf_float+0x2f0>)
 8005662:	2301      	movs	r3, #1
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f af19 	beq.w	80054a2 <_printf_float+0xc2>
 8005670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005674:	4313      	orrs	r3, r2
 8005676:	d102      	bne.n	800567e <_printf_float+0x29e>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	07d9      	lsls	r1, r3, #31
 800567c:	d5d8      	bpl.n	8005630 <_printf_float+0x250>
 800567e:	ee18 3a10 	vmov	r3, s16
 8005682:	4652      	mov	r2, sl
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af09 	beq.w	80054a2 <_printf_float+0xc2>
 8005690:	f04f 0900 	mov.w	r9, #0
 8005694:	f104 0a1a 	add.w	sl, r4, #26
 8005698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569a:	425b      	negs	r3, r3
 800569c:	454b      	cmp	r3, r9
 800569e:	dc01      	bgt.n	80056a4 <_printf_float+0x2c4>
 80056a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a2:	e792      	b.n	80055ca <_printf_float+0x1ea>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4652      	mov	r2, sl
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f aef7 	beq.w	80054a2 <_printf_float+0xc2>
 80056b4:	f109 0901 	add.w	r9, r9, #1
 80056b8:	e7ee      	b.n	8005698 <_printf_float+0x2b8>
 80056ba:	bf00      	nop
 80056bc:	7fefffff 	.word	0x7fefffff
 80056c0:	08007cac 	.word	0x08007cac
 80056c4:	08007cb0 	.word	0x08007cb0
 80056c8:	08007cb8 	.word	0x08007cb8
 80056cc:	08007cb4 	.word	0x08007cb4
 80056d0:	08007cbc 	.word	0x08007cbc
 80056d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056d8:	429a      	cmp	r2, r3
 80056da:	bfa8      	it	ge
 80056dc:	461a      	movge	r2, r3
 80056de:	2a00      	cmp	r2, #0
 80056e0:	4691      	mov	r9, r2
 80056e2:	dc37      	bgt.n	8005754 <_printf_float+0x374>
 80056e4:	f04f 0b00 	mov.w	fp, #0
 80056e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ec:	f104 021a 	add.w	r2, r4, #26
 80056f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	eba3 0309 	sub.w	r3, r3, r9
 80056f8:	455b      	cmp	r3, fp
 80056fa:	dc33      	bgt.n	8005764 <_printf_float+0x384>
 80056fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005700:	429a      	cmp	r2, r3
 8005702:	db3b      	blt.n	800577c <_printf_float+0x39c>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	07da      	lsls	r2, r3, #31
 8005708:	d438      	bmi.n	800577c <_printf_float+0x39c>
 800570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570c:	9b05      	ldr	r3, [sp, #20]
 800570e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	eba2 0901 	sub.w	r9, r2, r1
 8005716:	4599      	cmp	r9, r3
 8005718:	bfa8      	it	ge
 800571a:	4699      	movge	r9, r3
 800571c:	f1b9 0f00 	cmp.w	r9, #0
 8005720:	dc35      	bgt.n	800578e <_printf_float+0x3ae>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800572a:	f104 0a1a 	add.w	sl, r4, #26
 800572e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	eba3 0309 	sub.w	r3, r3, r9
 8005738:	4543      	cmp	r3, r8
 800573a:	f77f af79 	ble.w	8005630 <_printf_float+0x250>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f aeaa 	beq.w	80054a2 <_printf_float+0xc2>
 800574e:	f108 0801 	add.w	r8, r8, #1
 8005752:	e7ec      	b.n	800572e <_printf_float+0x34e>
 8005754:	4613      	mov	r3, r2
 8005756:	4631      	mov	r1, r6
 8005758:	4642      	mov	r2, r8
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	d1c0      	bne.n	80056e4 <_printf_float+0x304>
 8005762:	e69e      	b.n	80054a2 <_printf_float+0xc2>
 8005764:	2301      	movs	r3, #1
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	9205      	str	r2, [sp, #20]
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae97 	beq.w	80054a2 <_printf_float+0xc2>
 8005774:	9a05      	ldr	r2, [sp, #20]
 8005776:	f10b 0b01 	add.w	fp, fp, #1
 800577a:	e7b9      	b.n	80056f0 <_printf_float+0x310>
 800577c:	ee18 3a10 	vmov	r3, s16
 8005780:	4652      	mov	r2, sl
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	d1be      	bne.n	800570a <_printf_float+0x32a>
 800578c:	e689      	b.n	80054a2 <_printf_float+0xc2>
 800578e:	9a05      	ldr	r2, [sp, #20]
 8005790:	464b      	mov	r3, r9
 8005792:	4442      	add	r2, r8
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	d1c1      	bne.n	8005722 <_printf_float+0x342>
 800579e:	e680      	b.n	80054a2 <_printf_float+0xc2>
 80057a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a2:	2a01      	cmp	r2, #1
 80057a4:	dc01      	bgt.n	80057aa <_printf_float+0x3ca>
 80057a6:	07db      	lsls	r3, r3, #31
 80057a8:	d538      	bpl.n	800581c <_printf_float+0x43c>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4642      	mov	r2, r8
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae74 	beq.w	80054a2 <_printf_float+0xc2>
 80057ba:	ee18 3a10 	vmov	r3, s16
 80057be:	4652      	mov	r2, sl
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	f43f ae6b 	beq.w	80054a2 <_printf_float+0xc2>
 80057cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f7fb f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d8:	b9d8      	cbnz	r0, 8005812 <_printf_float+0x432>
 80057da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057dc:	f108 0201 	add.w	r2, r8, #1
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	d10e      	bne.n	800580a <_printf_float+0x42a>
 80057ec:	e659      	b.n	80054a2 <_printf_float+0xc2>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	f43f ae52 	beq.w	80054a2 <_printf_float+0xc2>
 80057fe:	f108 0801 	add.w	r8, r8, #1
 8005802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	4543      	cmp	r3, r8
 8005808:	dcf1      	bgt.n	80057ee <_printf_float+0x40e>
 800580a:	464b      	mov	r3, r9
 800580c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005810:	e6dc      	b.n	80055cc <_printf_float+0x1ec>
 8005812:	f04f 0800 	mov.w	r8, #0
 8005816:	f104 0a1a 	add.w	sl, r4, #26
 800581a:	e7f2      	b.n	8005802 <_printf_float+0x422>
 800581c:	2301      	movs	r3, #1
 800581e:	4642      	mov	r2, r8
 8005820:	e7df      	b.n	80057e2 <_printf_float+0x402>
 8005822:	2301      	movs	r3, #1
 8005824:	464a      	mov	r2, r9
 8005826:	4631      	mov	r1, r6
 8005828:	4628      	mov	r0, r5
 800582a:	47b8      	blx	r7
 800582c:	3001      	adds	r0, #1
 800582e:	f43f ae38 	beq.w	80054a2 <_printf_float+0xc2>
 8005832:	f108 0801 	add.w	r8, r8, #1
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	4543      	cmp	r3, r8
 800583e:	dcf0      	bgt.n	8005822 <_printf_float+0x442>
 8005840:	e6fa      	b.n	8005638 <_printf_float+0x258>
 8005842:	f04f 0800 	mov.w	r8, #0
 8005846:	f104 0919 	add.w	r9, r4, #25
 800584a:	e7f4      	b.n	8005836 <_printf_float+0x456>

0800584c <_printf_common>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	4616      	mov	r6, r2
 8005852:	4699      	mov	r9, r3
 8005854:	688a      	ldr	r2, [r1, #8]
 8005856:	690b      	ldr	r3, [r1, #16]
 8005858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800585c:	4293      	cmp	r3, r2
 800585e:	bfb8      	it	lt
 8005860:	4613      	movlt	r3, r2
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005868:	4607      	mov	r7, r0
 800586a:	460c      	mov	r4, r1
 800586c:	b10a      	cbz	r2, 8005872 <_printf_common+0x26>
 800586e:	3301      	adds	r3, #1
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	0699      	lsls	r1, r3, #26
 8005876:	bf42      	ittt	mi
 8005878:	6833      	ldrmi	r3, [r6, #0]
 800587a:	3302      	addmi	r3, #2
 800587c:	6033      	strmi	r3, [r6, #0]
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	f015 0506 	ands.w	r5, r5, #6
 8005884:	d106      	bne.n	8005894 <_printf_common+0x48>
 8005886:	f104 0a19 	add.w	sl, r4, #25
 800588a:	68e3      	ldr	r3, [r4, #12]
 800588c:	6832      	ldr	r2, [r6, #0]
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	42ab      	cmp	r3, r5
 8005892:	dc26      	bgt.n	80058e2 <_printf_common+0x96>
 8005894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005898:	1e13      	subs	r3, r2, #0
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	0692      	lsls	r2, r2, #26
 80058a2:	d42b      	bmi.n	80058fc <_printf_common+0xb0>
 80058a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a8:	4649      	mov	r1, r9
 80058aa:	4638      	mov	r0, r7
 80058ac:	47c0      	blx	r8
 80058ae:	3001      	adds	r0, #1
 80058b0:	d01e      	beq.n	80058f0 <_printf_common+0xa4>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	68e5      	ldr	r5, [r4, #12]
 80058b6:	6832      	ldr	r2, [r6, #0]
 80058b8:	f003 0306 	and.w	r3, r3, #6
 80058bc:	2b04      	cmp	r3, #4
 80058be:	bf08      	it	eq
 80058c0:	1aad      	subeq	r5, r5, r2
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	bf0c      	ite	eq
 80058c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058cc:	2500      	movne	r5, #0
 80058ce:	4293      	cmp	r3, r2
 80058d0:	bfc4      	itt	gt
 80058d2:	1a9b      	subgt	r3, r3, r2
 80058d4:	18ed      	addgt	r5, r5, r3
 80058d6:	2600      	movs	r6, #0
 80058d8:	341a      	adds	r4, #26
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d11a      	bne.n	8005914 <_printf_common+0xc8>
 80058de:	2000      	movs	r0, #0
 80058e0:	e008      	b.n	80058f4 <_printf_common+0xa8>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4649      	mov	r1, r9
 80058e8:	4638      	mov	r0, r7
 80058ea:	47c0      	blx	r8
 80058ec:	3001      	adds	r0, #1
 80058ee:	d103      	bne.n	80058f8 <_printf_common+0xac>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7c6      	b.n	800588a <_printf_common+0x3e>
 80058fc:	18e1      	adds	r1, r4, r3
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	2030      	movs	r0, #48	; 0x30
 8005902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005906:	4422      	add	r2, r4
 8005908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800590c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005910:	3302      	adds	r3, #2
 8005912:	e7c7      	b.n	80058a4 <_printf_common+0x58>
 8005914:	2301      	movs	r3, #1
 8005916:	4622      	mov	r2, r4
 8005918:	4649      	mov	r1, r9
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d0e6      	beq.n	80058f0 <_printf_common+0xa4>
 8005922:	3601      	adds	r6, #1
 8005924:	e7d9      	b.n	80058da <_printf_common+0x8e>
	...

08005928 <_printf_i>:
 8005928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	460c      	mov	r4, r1
 800592e:	4691      	mov	r9, r2
 8005930:	7e27      	ldrb	r7, [r4, #24]
 8005932:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005934:	2f78      	cmp	r7, #120	; 0x78
 8005936:	4680      	mov	r8, r0
 8005938:	469a      	mov	sl, r3
 800593a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800593e:	d807      	bhi.n	8005950 <_printf_i+0x28>
 8005940:	2f62      	cmp	r7, #98	; 0x62
 8005942:	d80a      	bhi.n	800595a <_printf_i+0x32>
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80d8 	beq.w	8005afa <_printf_i+0x1d2>
 800594a:	2f58      	cmp	r7, #88	; 0x58
 800594c:	f000 80a3 	beq.w	8005a96 <_printf_i+0x16e>
 8005950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005958:	e03a      	b.n	80059d0 <_printf_i+0xa8>
 800595a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800595e:	2b15      	cmp	r3, #21
 8005960:	d8f6      	bhi.n	8005950 <_printf_i+0x28>
 8005962:	a001      	add	r0, pc, #4	; (adr r0, 8005968 <_printf_i+0x40>)
 8005964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005951 	.word	0x08005951
 8005974:	08005951 	.word	0x08005951
 8005978:	08005951 	.word	0x08005951
 800597c:	08005951 	.word	0x08005951
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005951 	.word	0x08005951
 8005988:	08005951 	.word	0x08005951
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005ae1 	.word	0x08005ae1
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005ac3 	.word	0x08005ac3
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005b03 	.word	0x08005b03
 80059ac:	08005951 	.word	0x08005951
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005acb 	.word	0x08005acb
 80059c0:	680b      	ldr	r3, [r1, #0]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	600a      	str	r2, [r1, #0]
 80059c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0a3      	b.n	8005b1c <_printf_i+0x1f4>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	6808      	ldr	r0, [r1, #0]
 80059d8:	062e      	lsls	r6, r5, #24
 80059da:	f100 0304 	add.w	r3, r0, #4
 80059de:	d50a      	bpl.n	80059f6 <_printf_i+0xce>
 80059e0:	6805      	ldr	r5, [r0, #0]
 80059e2:	600b      	str	r3, [r1, #0]
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xc8>
 80059e8:	232d      	movs	r3, #45	; 0x2d
 80059ea:	426d      	negs	r5, r5
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	485e      	ldr	r0, [pc, #376]	; (8005b6c <_printf_i+0x244>)
 80059f2:	230a      	movs	r3, #10
 80059f4:	e019      	b.n	8005a2a <_printf_i+0x102>
 80059f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059fa:	6805      	ldr	r5, [r0, #0]
 80059fc:	600b      	str	r3, [r1, #0]
 80059fe:	bf18      	it	ne
 8005a00:	b22d      	sxthne	r5, r5
 8005a02:	e7ef      	b.n	80059e4 <_printf_i+0xbc>
 8005a04:	680b      	ldr	r3, [r1, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	1d18      	adds	r0, r3, #4
 8005a0a:	6008      	str	r0, [r1, #0]
 8005a0c:	0628      	lsls	r0, r5, #24
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0xec>
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0xf2>
 8005a14:	0669      	lsls	r1, r5, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0xe8>
 8005a18:	881d      	ldrh	r5, [r3, #0]
 8005a1a:	4854      	ldr	r0, [pc, #336]	; (8005b6c <_printf_i+0x244>)
 8005a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1e:	bf0c      	ite	eq
 8005a20:	2308      	moveq	r3, #8
 8005a22:	230a      	movne	r3, #10
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2a:	6866      	ldr	r6, [r4, #4]
 8005a2c:	60a6      	str	r6, [r4, #8]
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	bfa2      	ittt	ge
 8005a32:	6821      	ldrge	r1, [r4, #0]
 8005a34:	f021 0104 	bicge.w	r1, r1, #4
 8005a38:	6021      	strge	r1, [r4, #0]
 8005a3a:	b90d      	cbnz	r5, 8005a40 <_printf_i+0x118>
 8005a3c:	2e00      	cmp	r6, #0
 8005a3e:	d04d      	beq.n	8005adc <_printf_i+0x1b4>
 8005a40:	4616      	mov	r6, r2
 8005a42:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a46:	fb03 5711 	mls	r7, r3, r1, r5
 8005a4a:	5dc7      	ldrb	r7, [r0, r7]
 8005a4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a50:	462f      	mov	r7, r5
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	460d      	mov	r5, r1
 8005a56:	d9f4      	bls.n	8005a42 <_printf_i+0x11a>
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d10b      	bne.n	8005a74 <_printf_i+0x14c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07df      	lsls	r7, r3, #31
 8005a60:	d508      	bpl.n	8005a74 <_printf_i+0x14c>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	6861      	ldr	r1, [r4, #4]
 8005a66:	4299      	cmp	r1, r3
 8005a68:	bfde      	ittt	le
 8005a6a:	2330      	movle	r3, #48	; 0x30
 8005a6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a70:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005a74:	1b92      	subs	r2, r2, r6
 8005a76:	6122      	str	r2, [r4, #16]
 8005a78:	f8cd a000 	str.w	sl, [sp]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	aa03      	add	r2, sp, #12
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fee2 	bl	800584c <_printf_common>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d14c      	bne.n	8005b26 <_printf_i+0x1fe>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a90:	b004      	add	sp, #16
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	4835      	ldr	r0, [pc, #212]	; (8005b6c <_printf_i+0x244>)
 8005a98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	680e      	ldr	r6, [r1, #0]
 8005aa0:	061f      	lsls	r7, r3, #24
 8005aa2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005aa6:	600e      	str	r6, [r1, #0]
 8005aa8:	d514      	bpl.n	8005ad4 <_printf_i+0x1ac>
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	bf44      	itt	mi
 8005aae:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab2:	6023      	strmi	r3, [r4, #0]
 8005ab4:	b91d      	cbnz	r5, 8005abe <_printf_i+0x196>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	f023 0320 	bic.w	r3, r3, #32
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	2310      	movs	r3, #16
 8005ac0:	e7b0      	b.n	8005a24 <_printf_i+0xfc>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f043 0320 	orr.w	r3, r3, #32
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	2378      	movs	r3, #120	; 0x78
 8005acc:	4828      	ldr	r0, [pc, #160]	; (8005b70 <_printf_i+0x248>)
 8005ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ad2:	e7e3      	b.n	8005a9c <_printf_i+0x174>
 8005ad4:	065e      	lsls	r6, r3, #25
 8005ad6:	bf48      	it	mi
 8005ad8:	b2ad      	uxthmi	r5, r5
 8005ada:	e7e6      	b.n	8005aaa <_printf_i+0x182>
 8005adc:	4616      	mov	r6, r2
 8005ade:	e7bb      	b.n	8005a58 <_printf_i+0x130>
 8005ae0:	680b      	ldr	r3, [r1, #0]
 8005ae2:	6826      	ldr	r6, [r4, #0]
 8005ae4:	6960      	ldr	r0, [r4, #20]
 8005ae6:	1d1d      	adds	r5, r3, #4
 8005ae8:	600d      	str	r5, [r1, #0]
 8005aea:	0635      	lsls	r5, r6, #24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0x1cc>
 8005af0:	6018      	str	r0, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0x1d2>
 8005af4:	0671      	lsls	r1, r6, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0x1c8>
 8005af8:	8018      	strh	r0, [r3, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	4616      	mov	r6, r2
 8005b00:	e7ba      	b.n	8005a78 <_printf_i+0x150>
 8005b02:	680b      	ldr	r3, [r1, #0]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	600a      	str	r2, [r1, #0]
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f7fa fb66 	bl	80001e0 <memchr>
 8005b14:	b108      	cbz	r0, 8005b1a <_printf_i+0x1f2>
 8005b16:	1b80      	subs	r0, r0, r6
 8005b18:	6060      	str	r0, [r4, #4]
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	e7a8      	b.n	8005a78 <_printf_i+0x150>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	4632      	mov	r2, r6
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	47d0      	blx	sl
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0ab      	beq.n	8005a8c <_printf_i+0x164>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	079b      	lsls	r3, r3, #30
 8005b38:	d413      	bmi.n	8005b62 <_printf_i+0x23a>
 8005b3a:	68e0      	ldr	r0, [r4, #12]
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	bfb8      	it	lt
 8005b42:	4618      	movlt	r0, r3
 8005b44:	e7a4      	b.n	8005a90 <_printf_i+0x168>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d09b      	beq.n	8005a8c <_printf_i+0x164>
 8005b54:	3501      	adds	r5, #1
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	9903      	ldr	r1, [sp, #12]
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dcf2      	bgt.n	8005b46 <_printf_i+0x21e>
 8005b60:	e7eb      	b.n	8005b3a <_printf_i+0x212>
 8005b62:	2500      	movs	r5, #0
 8005b64:	f104 0619 	add.w	r6, r4, #25
 8005b68:	e7f5      	b.n	8005b56 <_printf_i+0x22e>
 8005b6a:	bf00      	nop
 8005b6c:	08007cbe 	.word	0x08007cbe
 8005b70:	08007ccf 	.word	0x08007ccf

08005b74 <quorem>:
 8005b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	6903      	ldr	r3, [r0, #16]
 8005b7a:	690c      	ldr	r4, [r1, #16]
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	4607      	mov	r7, r0
 8005b80:	f2c0 8081 	blt.w	8005c86 <quorem+0x112>
 8005b84:	3c01      	subs	r4, #1
 8005b86:	f101 0814 	add.w	r8, r1, #20
 8005b8a:	f100 0514 	add.w	r5, r0, #20
 8005b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bac:	d331      	bcc.n	8005c12 <quorem+0x9e>
 8005bae:	f04f 0e00 	mov.w	lr, #0
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	46ac      	mov	ip, r5
 8005bb6:	46f2      	mov	sl, lr
 8005bb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bbc:	b293      	uxth	r3, r2
 8005bbe:	fb06 e303 	mla	r3, r6, r3, lr
 8005bc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bcc:	0c12      	lsrs	r2, r2, #16
 8005bce:	f8dc a000 	ldr.w	sl, [ip]
 8005bd2:	fb06 e202 	mla	r2, r6, r2, lr
 8005bd6:	fa13 f38a 	uxtah	r3, r3, sl
 8005bda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bde:	fa1f fa82 	uxth.w	sl, r2
 8005be2:	f8dc 2000 	ldr.w	r2, [ip]
 8005be6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005bea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf4:	4581      	cmp	r9, r0
 8005bf6:	f84c 3b04 	str.w	r3, [ip], #4
 8005bfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bfe:	d2db      	bcs.n	8005bb8 <quorem+0x44>
 8005c00:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c04:	b92b      	cbnz	r3, 8005c12 <quorem+0x9e>
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	3b04      	subs	r3, #4
 8005c0a:	429d      	cmp	r5, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	d32e      	bcc.n	8005c6e <quorem+0xfa>
 8005c10:	613c      	str	r4, [r7, #16]
 8005c12:	4638      	mov	r0, r7
 8005c14:	f001 f8c0 	bl	8006d98 <__mcmp>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	db24      	blt.n	8005c66 <quorem+0xf2>
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f04f 0c00 	mov.w	ip, #0
 8005c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c28:	f8d0 e000 	ldr.w	lr, [r0]
 8005c2c:	b293      	uxth	r3, r2
 8005c2e:	ebac 0303 	sub.w	r3, ip, r3
 8005c32:	0c12      	lsrs	r2, r2, #16
 8005c34:	fa13 f38e 	uxtah	r3, r3, lr
 8005c38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c46:	45c1      	cmp	r9, r8
 8005c48:	f840 3b04 	str.w	r3, [r0], #4
 8005c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c50:	d2e8      	bcs.n	8005c24 <quorem+0xb0>
 8005c52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5a:	b922      	cbnz	r2, 8005c66 <quorem+0xf2>
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	429d      	cmp	r5, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	d30a      	bcc.n	8005c7a <quorem+0x106>
 8005c64:	613c      	str	r4, [r7, #16]
 8005c66:	4630      	mov	r0, r6
 8005c68:	b003      	add	sp, #12
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	d1cc      	bne.n	8005c10 <quorem+0x9c>
 8005c76:	3c01      	subs	r4, #1
 8005c78:	e7c7      	b.n	8005c0a <quorem+0x96>
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d1f0      	bne.n	8005c64 <quorem+0xf0>
 8005c82:	3c01      	subs	r4, #1
 8005c84:	e7eb      	b.n	8005c5e <quorem+0xea>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e7ee      	b.n	8005c68 <quorem+0xf4>
 8005c8a:	0000      	movs	r0, r0
 8005c8c:	0000      	movs	r0, r0
	...

08005c90 <_dtoa_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ed2d 8b02 	vpush	{d8}
 8005c98:	ec57 6b10 	vmov	r6, r7, d0
 8005c9c:	b095      	sub	sp, #84	; 0x54
 8005c9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ca0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005caa:	4604      	mov	r4, r0
 8005cac:	9209      	str	r2, [sp, #36]	; 0x24
 8005cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cb0:	b975      	cbnz	r5, 8005cd0 <_dtoa_r+0x40>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f000 fddc 	bl	8006870 <malloc>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6260      	str	r0, [r4, #36]	; 0x24
 8005cbc:	b920      	cbnz	r0, 8005cc8 <_dtoa_r+0x38>
 8005cbe:	4bb2      	ldr	r3, [pc, #712]	; (8005f88 <_dtoa_r+0x2f8>)
 8005cc0:	21ea      	movs	r1, #234	; 0xea
 8005cc2:	48b2      	ldr	r0, [pc, #712]	; (8005f8c <_dtoa_r+0x2fc>)
 8005cc4:	f001 fa32 	bl	800712c <__assert_func>
 8005cc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ccc:	6005      	str	r5, [r0, #0]
 8005cce:	60c5      	str	r5, [r0, #12]
 8005cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	b151      	cbz	r1, 8005cec <_dtoa_r+0x5c>
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	604a      	str	r2, [r1, #4]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4093      	lsls	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 fe1b 	bl	800691c <_Bfree>
 8005ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	1e3b      	subs	r3, r7, #0
 8005cee:	bfb9      	ittee	lt
 8005cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	9303      	strlt	r3, [sp, #12]
 8005cf6:	2300      	movge	r3, #0
 8005cf8:	f8c8 3000 	strge.w	r3, [r8]
 8005cfc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d00:	4ba3      	ldr	r3, [pc, #652]	; (8005f90 <_dtoa_r+0x300>)
 8005d02:	bfbc      	itt	lt
 8005d04:	2201      	movlt	r2, #1
 8005d06:	f8c8 2000 	strlt.w	r2, [r8]
 8005d0a:	ea33 0309 	bics.w	r3, r3, r9
 8005d0e:	d11b      	bne.n	8005d48 <_dtoa_r+0xb8>
 8005d10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d12:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d1c:	4333      	orrs	r3, r6
 8005d1e:	f000 857a 	beq.w	8006816 <_dtoa_r+0xb86>
 8005d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d24:	b963      	cbnz	r3, 8005d40 <_dtoa_r+0xb0>
 8005d26:	4b9b      	ldr	r3, [pc, #620]	; (8005f94 <_dtoa_r+0x304>)
 8005d28:	e024      	b.n	8005d74 <_dtoa_r+0xe4>
 8005d2a:	4b9b      	ldr	r3, [pc, #620]	; (8005f98 <_dtoa_r+0x308>)
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	9800      	ldr	r0, [sp, #0]
 8005d36:	b015      	add	sp, #84	; 0x54
 8005d38:	ecbd 8b02 	vpop	{d8}
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	4b94      	ldr	r3, [pc, #592]	; (8005f94 <_dtoa_r+0x304>)
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	3303      	adds	r3, #3
 8005d46:	e7f3      	b.n	8005d30 <_dtoa_r+0xa0>
 8005d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	ec51 0b17 	vmov	r0, r1, d7
 8005d52:	2300      	movs	r3, #0
 8005d54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005d58:	f7fa feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	b158      	cbz	r0, 8005d78 <_dtoa_r+0xe8>
 8005d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d62:	2301      	movs	r3, #1
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8551 	beq.w	8006810 <_dtoa_r+0xb80>
 8005d6e:	488b      	ldr	r0, [pc, #556]	; (8005f9c <_dtoa_r+0x30c>)
 8005d70:	6018      	str	r0, [r3, #0]
 8005d72:	1e43      	subs	r3, r0, #1
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	e7dd      	b.n	8005d34 <_dtoa_r+0xa4>
 8005d78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005d7c:	aa12      	add	r2, sp, #72	; 0x48
 8005d7e:	a913      	add	r1, sp, #76	; 0x4c
 8005d80:	4620      	mov	r0, r4
 8005d82:	f001 f8ad 	bl	8006ee0 <__d2b>
 8005d86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d8a:	4683      	mov	fp, r0
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	d07c      	beq.n	8005e8a <_dtoa_r+0x1fa>
 8005d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005d9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005da2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005daa:	4b7d      	ldr	r3, [pc, #500]	; (8005fa0 <_dtoa_r+0x310>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	f7fa fa69 	bl	8000288 <__aeabi_dsub>
 8005db6:	a36e      	add	r3, pc, #440	; (adr r3, 8005f70 <_dtoa_r+0x2e0>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fc1c 	bl	80005f8 <__aeabi_dmul>
 8005dc0:	a36d      	add	r3, pc, #436	; (adr r3, 8005f78 <_dtoa_r+0x2e8>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fa61 	bl	800028c <__adddf3>
 8005dca:	4606      	mov	r6, r0
 8005dcc:	4628      	mov	r0, r5
 8005dce:	460f      	mov	r7, r1
 8005dd0:	f7fa fba8 	bl	8000524 <__aeabi_i2d>
 8005dd4:	a36a      	add	r3, pc, #424	; (adr r3, 8005f80 <_dtoa_r+0x2f0>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa fc0d 	bl	80005f8 <__aeabi_dmul>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fa51 	bl	800028c <__adddf3>
 8005dea:	4606      	mov	r6, r0
 8005dec:	460f      	mov	r7, r1
 8005dee:	f7fa feb3 	bl	8000b58 <__aeabi_d2iz>
 8005df2:	2200      	movs	r2, #0
 8005df4:	4682      	mov	sl, r0
 8005df6:	2300      	movs	r3, #0
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	f7fa fe6e 	bl	8000adc <__aeabi_dcmplt>
 8005e00:	b148      	cbz	r0, 8005e16 <_dtoa_r+0x186>
 8005e02:	4650      	mov	r0, sl
 8005e04:	f7fa fb8e 	bl	8000524 <__aeabi_i2d>
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	f7fa fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e10:	b908      	cbnz	r0, 8005e16 <_dtoa_r+0x186>
 8005e12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e16:	f1ba 0f16 	cmp.w	sl, #22
 8005e1a:	d854      	bhi.n	8005ec6 <_dtoa_r+0x236>
 8005e1c:	4b61      	ldr	r3, [pc, #388]	; (8005fa4 <_dtoa_r+0x314>)
 8005e1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e2a:	f7fa fe57 	bl	8000adc <__aeabi_dcmplt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d04b      	beq.n	8005eca <_dtoa_r+0x23a>
 8005e32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e36:	2300      	movs	r3, #0
 8005e38:	930e      	str	r3, [sp, #56]	; 0x38
 8005e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e3c:	1b5d      	subs	r5, r3, r5
 8005e3e:	1e6b      	subs	r3, r5, #1
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	bf43      	ittte	mi
 8005e44:	2300      	movmi	r3, #0
 8005e46:	f1c5 0801 	rsbmi	r8, r5, #1
 8005e4a:	9304      	strmi	r3, [sp, #16]
 8005e4c:	f04f 0800 	movpl.w	r8, #0
 8005e50:	f1ba 0f00 	cmp.w	sl, #0
 8005e54:	db3b      	blt.n	8005ece <_dtoa_r+0x23e>
 8005e56:	9b04      	ldr	r3, [sp, #16]
 8005e58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005e5c:	4453      	add	r3, sl
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	9306      	str	r3, [sp, #24]
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d869      	bhi.n	8005f3e <_dtoa_r+0x2ae>
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	bfc4      	itt	gt
 8005e6e:	3b04      	subgt	r3, #4
 8005e70:	9305      	strgt	r3, [sp, #20]
 8005e72:	9b05      	ldr	r3, [sp, #20]
 8005e74:	f1a3 0302 	sub.w	r3, r3, #2
 8005e78:	bfcc      	ite	gt
 8005e7a:	2500      	movgt	r5, #0
 8005e7c:	2501      	movle	r5, #1
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d869      	bhi.n	8005f56 <_dtoa_r+0x2c6>
 8005e82:	e8df f003 	tbb	[pc, r3]
 8005e86:	4e2c      	.short	0x4e2c
 8005e88:	5a4c      	.short	0x5a4c
 8005e8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e8e:	441d      	add	r5, r3
 8005e90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	bfc1      	itttt	gt
 8005e98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ea0:	fa09 f303 	lslgt.w	r3, r9, r3
 8005ea4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ea8:	bfda      	itte	le
 8005eaa:	f1c3 0320 	rsble	r3, r3, #32
 8005eae:	fa06 f003 	lslle.w	r0, r6, r3
 8005eb2:	4318      	orrgt	r0, r3
 8005eb4:	f7fa fb26 	bl	8000504 <__aeabi_ui2d>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4606      	mov	r6, r0
 8005ebc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ec0:	3d01      	subs	r5, #1
 8005ec2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ec4:	e771      	b.n	8005daa <_dtoa_r+0x11a>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e7b6      	b.n	8005e38 <_dtoa_r+0x1a8>
 8005eca:	900e      	str	r0, [sp, #56]	; 0x38
 8005ecc:	e7b5      	b.n	8005e3a <_dtoa_r+0x1aa>
 8005ece:	f1ca 0300 	rsb	r3, sl, #0
 8005ed2:	9306      	str	r3, [sp, #24]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	eba8 080a 	sub.w	r8, r8, sl
 8005eda:	930d      	str	r3, [sp, #52]	; 0x34
 8005edc:	e7c2      	b.n	8005e64 <_dtoa_r+0x1d4>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc39      	bgt.n	8005f5c <_dtoa_r+0x2cc>
 8005ee8:	f04f 0901 	mov.w	r9, #1
 8005eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ef8:	2200      	movs	r2, #0
 8005efa:	6042      	str	r2, [r0, #4]
 8005efc:	2204      	movs	r2, #4
 8005efe:	f102 0614 	add.w	r6, r2, #20
 8005f02:	429e      	cmp	r6, r3
 8005f04:	6841      	ldr	r1, [r0, #4]
 8005f06:	d92f      	bls.n	8005f68 <_dtoa_r+0x2d8>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fcc7 	bl	800689c <_Balloc>
 8005f0e:	9000      	str	r0, [sp, #0]
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d14b      	bne.n	8005fac <_dtoa_r+0x31c>
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <_dtoa_r+0x318>)
 8005f16:	4602      	mov	r2, r0
 8005f18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f1c:	e6d1      	b.n	8005cc2 <_dtoa_r+0x32>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7de      	b.n	8005ee0 <_dtoa_r+0x250>
 8005f22:	2300      	movs	r3, #0
 8005f24:	9308      	str	r3, [sp, #32]
 8005f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f28:	eb0a 0903 	add.w	r9, sl, r3
 8005f2c:	f109 0301 	add.w	r3, r9, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	bfb8      	it	lt
 8005f36:	2301      	movlt	r3, #1
 8005f38:	e7dd      	b.n	8005ef6 <_dtoa_r+0x266>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7f2      	b.n	8005f24 <_dtoa_r+0x294>
 8005f3e:	2501      	movs	r5, #1
 8005f40:	2300      	movs	r3, #0
 8005f42:	9305      	str	r3, [sp, #20]
 8005f44:	9508      	str	r5, [sp, #32]
 8005f46:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f50:	2312      	movs	r3, #18
 8005f52:	9209      	str	r2, [sp, #36]	; 0x24
 8005f54:	e7cf      	b.n	8005ef6 <_dtoa_r+0x266>
 8005f56:	2301      	movs	r3, #1
 8005f58:	9308      	str	r3, [sp, #32]
 8005f5a:	e7f4      	b.n	8005f46 <_dtoa_r+0x2b6>
 8005f5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005f60:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f64:	464b      	mov	r3, r9
 8005f66:	e7c6      	b.n	8005ef6 <_dtoa_r+0x266>
 8005f68:	3101      	adds	r1, #1
 8005f6a:	6041      	str	r1, [r0, #4]
 8005f6c:	0052      	lsls	r2, r2, #1
 8005f6e:	e7c6      	b.n	8005efe <_dtoa_r+0x26e>
 8005f70:	636f4361 	.word	0x636f4361
 8005f74:	3fd287a7 	.word	0x3fd287a7
 8005f78:	8b60c8b3 	.word	0x8b60c8b3
 8005f7c:	3fc68a28 	.word	0x3fc68a28
 8005f80:	509f79fb 	.word	0x509f79fb
 8005f84:	3fd34413 	.word	0x3fd34413
 8005f88:	08007ced 	.word	0x08007ced
 8005f8c:	08007d04 	.word	0x08007d04
 8005f90:	7ff00000 	.word	0x7ff00000
 8005f94:	08007ce9 	.word	0x08007ce9
 8005f98:	08007ce0 	.word	0x08007ce0
 8005f9c:	08007cbd 	.word	0x08007cbd
 8005fa0:	3ff80000 	.word	0x3ff80000
 8005fa4:	08007e00 	.word	0x08007e00
 8005fa8:	08007d63 	.word	0x08007d63
 8005fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fae:	9a00      	ldr	r2, [sp, #0]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	2b0e      	cmp	r3, #14
 8005fb6:	f200 80ad 	bhi.w	8006114 <_dtoa_r+0x484>
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	f000 80aa 	beq.w	8006114 <_dtoa_r+0x484>
 8005fc0:	f1ba 0f00 	cmp.w	sl, #0
 8005fc4:	dd36      	ble.n	8006034 <_dtoa_r+0x3a4>
 8005fc6:	4ac3      	ldr	r2, [pc, #780]	; (80062d4 <_dtoa_r+0x644>)
 8005fc8:	f00a 030f 	and.w	r3, sl, #15
 8005fcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fd0:	ed93 7b00 	vldr	d7, [r3]
 8005fd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005fd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005fdc:	eeb0 8a47 	vmov.f32	s16, s14
 8005fe0:	eef0 8a67 	vmov.f32	s17, s15
 8005fe4:	d016      	beq.n	8006014 <_dtoa_r+0x384>
 8005fe6:	4bbc      	ldr	r3, [pc, #752]	; (80062d8 <_dtoa_r+0x648>)
 8005fe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ff0:	f7fa fc2c 	bl	800084c <__aeabi_ddiv>
 8005ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff8:	f007 070f 	and.w	r7, r7, #15
 8005ffc:	2503      	movs	r5, #3
 8005ffe:	4eb6      	ldr	r6, [pc, #728]	; (80062d8 <_dtoa_r+0x648>)
 8006000:	b957      	cbnz	r7, 8006018 <_dtoa_r+0x388>
 8006002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006006:	ec53 2b18 	vmov	r2, r3, d8
 800600a:	f7fa fc1f 	bl	800084c <__aeabi_ddiv>
 800600e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006012:	e029      	b.n	8006068 <_dtoa_r+0x3d8>
 8006014:	2502      	movs	r5, #2
 8006016:	e7f2      	b.n	8005ffe <_dtoa_r+0x36e>
 8006018:	07f9      	lsls	r1, r7, #31
 800601a:	d508      	bpl.n	800602e <_dtoa_r+0x39e>
 800601c:	ec51 0b18 	vmov	r0, r1, d8
 8006020:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006024:	f7fa fae8 	bl	80005f8 <__aeabi_dmul>
 8006028:	ec41 0b18 	vmov	d8, r0, r1
 800602c:	3501      	adds	r5, #1
 800602e:	107f      	asrs	r7, r7, #1
 8006030:	3608      	adds	r6, #8
 8006032:	e7e5      	b.n	8006000 <_dtoa_r+0x370>
 8006034:	f000 80a6 	beq.w	8006184 <_dtoa_r+0x4f4>
 8006038:	f1ca 0600 	rsb	r6, sl, #0
 800603c:	4ba5      	ldr	r3, [pc, #660]	; (80062d4 <_dtoa_r+0x644>)
 800603e:	4fa6      	ldr	r7, [pc, #664]	; (80062d8 <_dtoa_r+0x648>)
 8006040:	f006 020f 	and.w	r2, r6, #15
 8006044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006050:	f7fa fad2 	bl	80005f8 <__aeabi_dmul>
 8006054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006058:	1136      	asrs	r6, r6, #4
 800605a:	2300      	movs	r3, #0
 800605c:	2502      	movs	r5, #2
 800605e:	2e00      	cmp	r6, #0
 8006060:	f040 8085 	bne.w	800616e <_dtoa_r+0x4de>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1d2      	bne.n	800600e <_dtoa_r+0x37e>
 8006068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 808c 	beq.w	8006188 <_dtoa_r+0x4f8>
 8006070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006074:	4b99      	ldr	r3, [pc, #612]	; (80062dc <_dtoa_r+0x64c>)
 8006076:	2200      	movs	r2, #0
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa fd2e 	bl	8000adc <__aeabi_dcmplt>
 8006080:	2800      	cmp	r0, #0
 8006082:	f000 8081 	beq.w	8006188 <_dtoa_r+0x4f8>
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d07d      	beq.n	8006188 <_dtoa_r+0x4f8>
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	dd3c      	ble.n	800610c <_dtoa_r+0x47c>
 8006092:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006096:	9307      	str	r3, [sp, #28]
 8006098:	2200      	movs	r2, #0
 800609a:	4b91      	ldr	r3, [pc, #580]	; (80062e0 <_dtoa_r+0x650>)
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa faaa 	bl	80005f8 <__aeabi_dmul>
 80060a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a8:	3501      	adds	r5, #1
 80060aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80060ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7fa fa36 	bl	8000524 <__aeabi_i2d>
 80060b8:	4632      	mov	r2, r6
 80060ba:	463b      	mov	r3, r7
 80060bc:	f7fa fa9c 	bl	80005f8 <__aeabi_dmul>
 80060c0:	4b88      	ldr	r3, [pc, #544]	; (80062e4 <_dtoa_r+0x654>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa f8e2 	bl	800028c <__adddf3>
 80060c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d15c      	bne.n	8006192 <_dtoa_r+0x502>
 80060d8:	4b83      	ldr	r3, [pc, #524]	; (80062e8 <_dtoa_r+0x658>)
 80060da:	2200      	movs	r2, #0
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa f8d2 	bl	8000288 <__aeabi_dsub>
 80060e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	f7fa fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f040 8296 	bne.w	8006622 <_dtoa_r+0x992>
 80060f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060fa:	4630      	mov	r0, r6
 80060fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa fceb 	bl	8000adc <__aeabi_dcmplt>
 8006106:	2800      	cmp	r0, #0
 8006108:	f040 8288 	bne.w	800661c <_dtoa_r+0x98c>
 800610c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006116:	2b00      	cmp	r3, #0
 8006118:	f2c0 8158 	blt.w	80063cc <_dtoa_r+0x73c>
 800611c:	f1ba 0f0e 	cmp.w	sl, #14
 8006120:	f300 8154 	bgt.w	80063cc <_dtoa_r+0x73c>
 8006124:	4b6b      	ldr	r3, [pc, #428]	; (80062d4 <_dtoa_r+0x644>)
 8006126:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800612a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	f280 80e3 	bge.w	80062fc <_dtoa_r+0x66c>
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f300 80df 	bgt.w	80062fc <_dtoa_r+0x66c>
 800613e:	f040 826d 	bne.w	800661c <_dtoa_r+0x98c>
 8006142:	4b69      	ldr	r3, [pc, #420]	; (80062e8 <_dtoa_r+0x658>)
 8006144:	2200      	movs	r2, #0
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f7fa fa55 	bl	80005f8 <__aeabi_dmul>
 800614e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006152:	f7fa fcd7 	bl	8000b04 <__aeabi_dcmpge>
 8006156:	9e01      	ldr	r6, [sp, #4]
 8006158:	4637      	mov	r7, r6
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 8243 	bne.w	80065e6 <_dtoa_r+0x956>
 8006160:	9d00      	ldr	r5, [sp, #0]
 8006162:	2331      	movs	r3, #49	; 0x31
 8006164:	f805 3b01 	strb.w	r3, [r5], #1
 8006168:	f10a 0a01 	add.w	sl, sl, #1
 800616c:	e23f      	b.n	80065ee <_dtoa_r+0x95e>
 800616e:	07f2      	lsls	r2, r6, #31
 8006170:	d505      	bpl.n	800617e <_dtoa_r+0x4ee>
 8006172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006176:	f7fa fa3f 	bl	80005f8 <__aeabi_dmul>
 800617a:	3501      	adds	r5, #1
 800617c:	2301      	movs	r3, #1
 800617e:	1076      	asrs	r6, r6, #1
 8006180:	3708      	adds	r7, #8
 8006182:	e76c      	b.n	800605e <_dtoa_r+0x3ce>
 8006184:	2502      	movs	r5, #2
 8006186:	e76f      	b.n	8006068 <_dtoa_r+0x3d8>
 8006188:	9b01      	ldr	r3, [sp, #4]
 800618a:	f8cd a01c 	str.w	sl, [sp, #28]
 800618e:	930c      	str	r3, [sp, #48]	; 0x30
 8006190:	e78d      	b.n	80060ae <_dtoa_r+0x41e>
 8006192:	9900      	ldr	r1, [sp, #0]
 8006194:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006198:	4b4e      	ldr	r3, [pc, #312]	; (80062d4 <_dtoa_r+0x644>)
 800619a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800619e:	4401      	add	r1, r0
 80061a0:	9102      	str	r1, [sp, #8]
 80061a2:	9908      	ldr	r1, [sp, #32]
 80061a4:	eeb0 8a47 	vmov.f32	s16, s14
 80061a8:	eef0 8a67 	vmov.f32	s17, s15
 80061ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d045      	beq.n	8006244 <_dtoa_r+0x5b4>
 80061b8:	494c      	ldr	r1, [pc, #304]	; (80062ec <_dtoa_r+0x65c>)
 80061ba:	2000      	movs	r0, #0
 80061bc:	f7fa fb46 	bl	800084c <__aeabi_ddiv>
 80061c0:	ec53 2b18 	vmov	r2, r3, d8
 80061c4:	f7fa f860 	bl	8000288 <__aeabi_dsub>
 80061c8:	9d00      	ldr	r5, [sp, #0]
 80061ca:	ec41 0b18 	vmov	d8, r0, r1
 80061ce:	4639      	mov	r1, r7
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7fa fcc1 	bl	8000b58 <__aeabi_d2iz>
 80061d6:	900c      	str	r0, [sp, #48]	; 0x30
 80061d8:	f7fa f9a4 	bl	8000524 <__aeabi_i2d>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7fa f850 	bl	8000288 <__aeabi_dsub>
 80061e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ea:	3330      	adds	r3, #48	; 0x30
 80061ec:	f805 3b01 	strb.w	r3, [r5], #1
 80061f0:	ec53 2b18 	vmov	r2, r3, d8
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	f7fa fc70 	bl	8000adc <__aeabi_dcmplt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d165      	bne.n	80062cc <_dtoa_r+0x63c>
 8006200:	4632      	mov	r2, r6
 8006202:	463b      	mov	r3, r7
 8006204:	4935      	ldr	r1, [pc, #212]	; (80062dc <_dtoa_r+0x64c>)
 8006206:	2000      	movs	r0, #0
 8006208:	f7fa f83e 	bl	8000288 <__aeabi_dsub>
 800620c:	ec53 2b18 	vmov	r2, r3, d8
 8006210:	f7fa fc64 	bl	8000adc <__aeabi_dcmplt>
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 80b9 	bne.w	800638c <_dtoa_r+0x6fc>
 800621a:	9b02      	ldr	r3, [sp, #8]
 800621c:	429d      	cmp	r5, r3
 800621e:	f43f af75 	beq.w	800610c <_dtoa_r+0x47c>
 8006222:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <_dtoa_r+0x650>)
 8006224:	ec51 0b18 	vmov	r0, r1, d8
 8006228:	2200      	movs	r2, #0
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <_dtoa_r+0x650>)
 8006230:	ec41 0b18 	vmov	d8, r0, r1
 8006234:	2200      	movs	r2, #0
 8006236:	4630      	mov	r0, r6
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa f9dd 	bl	80005f8 <__aeabi_dmul>
 800623e:	4606      	mov	r6, r0
 8006240:	460f      	mov	r7, r1
 8006242:	e7c4      	b.n	80061ce <_dtoa_r+0x53e>
 8006244:	ec51 0b17 	vmov	r0, r1, d7
 8006248:	f7fa f9d6 	bl	80005f8 <__aeabi_dmul>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	9d00      	ldr	r5, [sp, #0]
 8006250:	930c      	str	r3, [sp, #48]	; 0x30
 8006252:	ec41 0b18 	vmov	d8, r0, r1
 8006256:	4639      	mov	r1, r7
 8006258:	4630      	mov	r0, r6
 800625a:	f7fa fc7d 	bl	8000b58 <__aeabi_d2iz>
 800625e:	9011      	str	r0, [sp, #68]	; 0x44
 8006260:	f7fa f960 	bl	8000524 <__aeabi_i2d>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4630      	mov	r0, r6
 800626a:	4639      	mov	r1, r7
 800626c:	f7fa f80c 	bl	8000288 <__aeabi_dsub>
 8006270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006272:	3330      	adds	r3, #48	; 0x30
 8006274:	f805 3b01 	strb.w	r3, [r5], #1
 8006278:	9b02      	ldr	r3, [sp, #8]
 800627a:	429d      	cmp	r5, r3
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	d134      	bne.n	80062f0 <_dtoa_r+0x660>
 8006286:	4b19      	ldr	r3, [pc, #100]	; (80062ec <_dtoa_r+0x65c>)
 8006288:	ec51 0b18 	vmov	r0, r1, d8
 800628c:	f7f9 fffe 	bl	800028c <__adddf3>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4630      	mov	r0, r6
 8006296:	4639      	mov	r1, r7
 8006298:	f7fa fc3e 	bl	8000b18 <__aeabi_dcmpgt>
 800629c:	2800      	cmp	r0, #0
 800629e:	d175      	bne.n	800638c <_dtoa_r+0x6fc>
 80062a0:	ec53 2b18 	vmov	r2, r3, d8
 80062a4:	4911      	ldr	r1, [pc, #68]	; (80062ec <_dtoa_r+0x65c>)
 80062a6:	2000      	movs	r0, #0
 80062a8:	f7f9 ffee 	bl	8000288 <__aeabi_dsub>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7fa fc12 	bl	8000adc <__aeabi_dcmplt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f43f af27 	beq.w	800610c <_dtoa_r+0x47c>
 80062be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062c0:	1e6b      	subs	r3, r5, #1
 80062c2:	930c      	str	r3, [sp, #48]	; 0x30
 80062c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d0f8      	beq.n	80062be <_dtoa_r+0x62e>
 80062cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80062d0:	e04a      	b.n	8006368 <_dtoa_r+0x6d8>
 80062d2:	bf00      	nop
 80062d4:	08007e00 	.word	0x08007e00
 80062d8:	08007dd8 	.word	0x08007dd8
 80062dc:	3ff00000 	.word	0x3ff00000
 80062e0:	40240000 	.word	0x40240000
 80062e4:	401c0000 	.word	0x401c0000
 80062e8:	40140000 	.word	0x40140000
 80062ec:	3fe00000 	.word	0x3fe00000
 80062f0:	4baf      	ldr	r3, [pc, #700]	; (80065b0 <_dtoa_r+0x920>)
 80062f2:	f7fa f981 	bl	80005f8 <__aeabi_dmul>
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	e7ac      	b.n	8006256 <_dtoa_r+0x5c6>
 80062fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006300:	9d00      	ldr	r5, [sp, #0]
 8006302:	4642      	mov	r2, r8
 8006304:	464b      	mov	r3, r9
 8006306:	4630      	mov	r0, r6
 8006308:	4639      	mov	r1, r7
 800630a:	f7fa fa9f 	bl	800084c <__aeabi_ddiv>
 800630e:	f7fa fc23 	bl	8000b58 <__aeabi_d2iz>
 8006312:	9002      	str	r0, [sp, #8]
 8006314:	f7fa f906 	bl	8000524 <__aeabi_i2d>
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	f7fa f96c 	bl	80005f8 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ffae 	bl	8000288 <__aeabi_dsub>
 800632c:	9e02      	ldr	r6, [sp, #8]
 800632e:	9f01      	ldr	r7, [sp, #4]
 8006330:	3630      	adds	r6, #48	; 0x30
 8006332:	f805 6b01 	strb.w	r6, [r5], #1
 8006336:	9e00      	ldr	r6, [sp, #0]
 8006338:	1bae      	subs	r6, r5, r6
 800633a:	42b7      	cmp	r7, r6
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	d137      	bne.n	80063b2 <_dtoa_r+0x722>
 8006342:	f7f9 ffa3 	bl	800028c <__adddf3>
 8006346:	4642      	mov	r2, r8
 8006348:	464b      	mov	r3, r9
 800634a:	4606      	mov	r6, r0
 800634c:	460f      	mov	r7, r1
 800634e:	f7fa fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8006352:	b9c8      	cbnz	r0, 8006388 <_dtoa_r+0x6f8>
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006360:	b110      	cbz	r0, 8006368 <_dtoa_r+0x6d8>
 8006362:	9b02      	ldr	r3, [sp, #8]
 8006364:	07d9      	lsls	r1, r3, #31
 8006366:	d40f      	bmi.n	8006388 <_dtoa_r+0x6f8>
 8006368:	4620      	mov	r0, r4
 800636a:	4659      	mov	r1, fp
 800636c:	f000 fad6 	bl	800691c <_Bfree>
 8006370:	2300      	movs	r3, #0
 8006372:	702b      	strb	r3, [r5, #0]
 8006374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006376:	f10a 0001 	add.w	r0, sl, #1
 800637a:	6018      	str	r0, [r3, #0]
 800637c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800637e:	2b00      	cmp	r3, #0
 8006380:	f43f acd8 	beq.w	8005d34 <_dtoa_r+0xa4>
 8006384:	601d      	str	r5, [r3, #0]
 8006386:	e4d5      	b.n	8005d34 <_dtoa_r+0xa4>
 8006388:	f8cd a01c 	str.w	sl, [sp, #28]
 800638c:	462b      	mov	r3, r5
 800638e:	461d      	mov	r5, r3
 8006390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006394:	2a39      	cmp	r2, #57	; 0x39
 8006396:	d108      	bne.n	80063aa <_dtoa_r+0x71a>
 8006398:	9a00      	ldr	r2, [sp, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d1f7      	bne.n	800638e <_dtoa_r+0x6fe>
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	9900      	ldr	r1, [sp, #0]
 80063a2:	3201      	adds	r2, #1
 80063a4:	9207      	str	r2, [sp, #28]
 80063a6:	2230      	movs	r2, #48	; 0x30
 80063a8:	700a      	strb	r2, [r1, #0]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	3201      	adds	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	e78c      	b.n	80062cc <_dtoa_r+0x63c>
 80063b2:	4b7f      	ldr	r3, [pc, #508]	; (80065b0 <_dtoa_r+0x920>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	f7fa f91f 	bl	80005f8 <__aeabi_dmul>
 80063ba:	2200      	movs	r2, #0
 80063bc:	2300      	movs	r3, #0
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	f7fa fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d09b      	beq.n	8006302 <_dtoa_r+0x672>
 80063ca:	e7cd      	b.n	8006368 <_dtoa_r+0x6d8>
 80063cc:	9a08      	ldr	r2, [sp, #32]
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	f000 80c4 	beq.w	800655c <_dtoa_r+0x8cc>
 80063d4:	9a05      	ldr	r2, [sp, #20]
 80063d6:	2a01      	cmp	r2, #1
 80063d8:	f300 80a8 	bgt.w	800652c <_dtoa_r+0x89c>
 80063dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063de:	2a00      	cmp	r2, #0
 80063e0:	f000 80a0 	beq.w	8006524 <_dtoa_r+0x894>
 80063e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063e8:	9e06      	ldr	r6, [sp, #24]
 80063ea:	4645      	mov	r5, r8
 80063ec:	9a04      	ldr	r2, [sp, #16]
 80063ee:	2101      	movs	r1, #1
 80063f0:	441a      	add	r2, r3
 80063f2:	4620      	mov	r0, r4
 80063f4:	4498      	add	r8, r3
 80063f6:	9204      	str	r2, [sp, #16]
 80063f8:	f000 fb4c 	bl	8006a94 <__i2b>
 80063fc:	4607      	mov	r7, r0
 80063fe:	2d00      	cmp	r5, #0
 8006400:	dd0b      	ble.n	800641a <_dtoa_r+0x78a>
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	dd08      	ble.n	800641a <_dtoa_r+0x78a>
 8006408:	42ab      	cmp	r3, r5
 800640a:	9a04      	ldr	r2, [sp, #16]
 800640c:	bfa8      	it	ge
 800640e:	462b      	movge	r3, r5
 8006410:	eba8 0803 	sub.w	r8, r8, r3
 8006414:	1aed      	subs	r5, r5, r3
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	b1fb      	cbz	r3, 800645e <_dtoa_r+0x7ce>
 800641e:	9b08      	ldr	r3, [sp, #32]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 809f 	beq.w	8006564 <_dtoa_r+0x8d4>
 8006426:	2e00      	cmp	r6, #0
 8006428:	dd11      	ble.n	800644e <_dtoa_r+0x7be>
 800642a:	4639      	mov	r1, r7
 800642c:	4632      	mov	r2, r6
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fbec 	bl	8006c0c <__pow5mult>
 8006434:	465a      	mov	r2, fp
 8006436:	4601      	mov	r1, r0
 8006438:	4607      	mov	r7, r0
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fb40 	bl	8006ac0 <__multiply>
 8006440:	4659      	mov	r1, fp
 8006442:	9007      	str	r0, [sp, #28]
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fa69 	bl	800691c <_Bfree>
 800644a:	9b07      	ldr	r3, [sp, #28]
 800644c:	469b      	mov	fp, r3
 800644e:	9b06      	ldr	r3, [sp, #24]
 8006450:	1b9a      	subs	r2, r3, r6
 8006452:	d004      	beq.n	800645e <_dtoa_r+0x7ce>
 8006454:	4659      	mov	r1, fp
 8006456:	4620      	mov	r0, r4
 8006458:	f000 fbd8 	bl	8006c0c <__pow5mult>
 800645c:	4683      	mov	fp, r0
 800645e:	2101      	movs	r1, #1
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fb17 	bl	8006a94 <__i2b>
 8006466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	4606      	mov	r6, r0
 800646c:	dd7c      	ble.n	8006568 <_dtoa_r+0x8d8>
 800646e:	461a      	mov	r2, r3
 8006470:	4601      	mov	r1, r0
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fbca 	bl	8006c0c <__pow5mult>
 8006478:	9b05      	ldr	r3, [sp, #20]
 800647a:	2b01      	cmp	r3, #1
 800647c:	4606      	mov	r6, r0
 800647e:	dd76      	ble.n	800656e <_dtoa_r+0x8de>
 8006480:	2300      	movs	r3, #0
 8006482:	9306      	str	r3, [sp, #24]
 8006484:	6933      	ldr	r3, [r6, #16]
 8006486:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800648a:	6918      	ldr	r0, [r3, #16]
 800648c:	f000 fab2 	bl	80069f4 <__hi0bits>
 8006490:	f1c0 0020 	rsb	r0, r0, #32
 8006494:	9b04      	ldr	r3, [sp, #16]
 8006496:	4418      	add	r0, r3
 8006498:	f010 001f 	ands.w	r0, r0, #31
 800649c:	f000 8086 	beq.w	80065ac <_dtoa_r+0x91c>
 80064a0:	f1c0 0320 	rsb	r3, r0, #32
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	dd7f      	ble.n	80065a8 <_dtoa_r+0x918>
 80064a8:	f1c0 001c 	rsb	r0, r0, #28
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	4403      	add	r3, r0
 80064b0:	4480      	add	r8, r0
 80064b2:	4405      	add	r5, r0
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	dd05      	ble.n	80064c8 <_dtoa_r+0x838>
 80064bc:	4659      	mov	r1, fp
 80064be:	4642      	mov	r2, r8
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fbfd 	bl	8006cc0 <__lshift>
 80064c6:	4683      	mov	fp, r0
 80064c8:	9b04      	ldr	r3, [sp, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd05      	ble.n	80064da <_dtoa_r+0x84a>
 80064ce:	4631      	mov	r1, r6
 80064d0:	461a      	mov	r2, r3
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fbf4 	bl	8006cc0 <__lshift>
 80064d8:	4606      	mov	r6, r0
 80064da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d069      	beq.n	80065b4 <_dtoa_r+0x924>
 80064e0:	4631      	mov	r1, r6
 80064e2:	4658      	mov	r0, fp
 80064e4:	f000 fc58 	bl	8006d98 <__mcmp>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	da63      	bge.n	80065b4 <_dtoa_r+0x924>
 80064ec:	2300      	movs	r3, #0
 80064ee:	4659      	mov	r1, fp
 80064f0:	220a      	movs	r2, #10
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fa34 	bl	8006960 <__multadd>
 80064f8:	9b08      	ldr	r3, [sp, #32]
 80064fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064fe:	4683      	mov	fp, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 818f 	beq.w	8006824 <_dtoa_r+0xb94>
 8006506:	4639      	mov	r1, r7
 8006508:	2300      	movs	r3, #0
 800650a:	220a      	movs	r2, #10
 800650c:	4620      	mov	r0, r4
 800650e:	f000 fa27 	bl	8006960 <__multadd>
 8006512:	f1b9 0f00 	cmp.w	r9, #0
 8006516:	4607      	mov	r7, r0
 8006518:	f300 808e 	bgt.w	8006638 <_dtoa_r+0x9a8>
 800651c:	9b05      	ldr	r3, [sp, #20]
 800651e:	2b02      	cmp	r3, #2
 8006520:	dc50      	bgt.n	80065c4 <_dtoa_r+0x934>
 8006522:	e089      	b.n	8006638 <_dtoa_r+0x9a8>
 8006524:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800652a:	e75d      	b.n	80063e8 <_dtoa_r+0x758>
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	1e5e      	subs	r6, r3, #1
 8006530:	9b06      	ldr	r3, [sp, #24]
 8006532:	42b3      	cmp	r3, r6
 8006534:	bfbf      	itttt	lt
 8006536:	9b06      	ldrlt	r3, [sp, #24]
 8006538:	9606      	strlt	r6, [sp, #24]
 800653a:	1af2      	sublt	r2, r6, r3
 800653c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800653e:	bfb6      	itet	lt
 8006540:	189b      	addlt	r3, r3, r2
 8006542:	1b9e      	subge	r6, r3, r6
 8006544:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	bfb8      	it	lt
 800654a:	2600      	movlt	r6, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb5      	itete	lt
 8006550:	eba8 0503 	sublt.w	r5, r8, r3
 8006554:	9b01      	ldrge	r3, [sp, #4]
 8006556:	2300      	movlt	r3, #0
 8006558:	4645      	movge	r5, r8
 800655a:	e747      	b.n	80063ec <_dtoa_r+0x75c>
 800655c:	9e06      	ldr	r6, [sp, #24]
 800655e:	9f08      	ldr	r7, [sp, #32]
 8006560:	4645      	mov	r5, r8
 8006562:	e74c      	b.n	80063fe <_dtoa_r+0x76e>
 8006564:	9a06      	ldr	r2, [sp, #24]
 8006566:	e775      	b.n	8006454 <_dtoa_r+0x7c4>
 8006568:	9b05      	ldr	r3, [sp, #20]
 800656a:	2b01      	cmp	r3, #1
 800656c:	dc18      	bgt.n	80065a0 <_dtoa_r+0x910>
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	b9b3      	cbnz	r3, 80065a0 <_dtoa_r+0x910>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006578:	b9a3      	cbnz	r3, 80065a4 <_dtoa_r+0x914>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006580:	0d1b      	lsrs	r3, r3, #20
 8006582:	051b      	lsls	r3, r3, #20
 8006584:	b12b      	cbz	r3, 8006592 <_dtoa_r+0x902>
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	3301      	adds	r3, #1
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	f108 0801 	add.w	r8, r8, #1
 8006590:	2301      	movs	r3, #1
 8006592:	9306      	str	r3, [sp, #24]
 8006594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af74 	bne.w	8006484 <_dtoa_r+0x7f4>
 800659c:	2001      	movs	r0, #1
 800659e:	e779      	b.n	8006494 <_dtoa_r+0x804>
 80065a0:	2300      	movs	r3, #0
 80065a2:	e7f6      	b.n	8006592 <_dtoa_r+0x902>
 80065a4:	9b02      	ldr	r3, [sp, #8]
 80065a6:	e7f4      	b.n	8006592 <_dtoa_r+0x902>
 80065a8:	d085      	beq.n	80064b6 <_dtoa_r+0x826>
 80065aa:	4618      	mov	r0, r3
 80065ac:	301c      	adds	r0, #28
 80065ae:	e77d      	b.n	80064ac <_dtoa_r+0x81c>
 80065b0:	40240000 	.word	0x40240000
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dc38      	bgt.n	800662c <_dtoa_r+0x99c>
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	dd35      	ble.n	800662c <_dtoa_r+0x99c>
 80065c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80065c4:	f1b9 0f00 	cmp.w	r9, #0
 80065c8:	d10d      	bne.n	80065e6 <_dtoa_r+0x956>
 80065ca:	4631      	mov	r1, r6
 80065cc:	464b      	mov	r3, r9
 80065ce:	2205      	movs	r2, #5
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 f9c5 	bl	8006960 <__multadd>
 80065d6:	4601      	mov	r1, r0
 80065d8:	4606      	mov	r6, r0
 80065da:	4658      	mov	r0, fp
 80065dc:	f000 fbdc 	bl	8006d98 <__mcmp>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f73f adbd 	bgt.w	8006160 <_dtoa_r+0x4d0>
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	9d00      	ldr	r5, [sp, #0]
 80065ea:	ea6f 0a03 	mvn.w	sl, r3
 80065ee:	f04f 0800 	mov.w	r8, #0
 80065f2:	4631      	mov	r1, r6
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f991 	bl	800691c <_Bfree>
 80065fa:	2f00      	cmp	r7, #0
 80065fc:	f43f aeb4 	beq.w	8006368 <_dtoa_r+0x6d8>
 8006600:	f1b8 0f00 	cmp.w	r8, #0
 8006604:	d005      	beq.n	8006612 <_dtoa_r+0x982>
 8006606:	45b8      	cmp	r8, r7
 8006608:	d003      	beq.n	8006612 <_dtoa_r+0x982>
 800660a:	4641      	mov	r1, r8
 800660c:	4620      	mov	r0, r4
 800660e:	f000 f985 	bl	800691c <_Bfree>
 8006612:	4639      	mov	r1, r7
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f981 	bl	800691c <_Bfree>
 800661a:	e6a5      	b.n	8006368 <_dtoa_r+0x6d8>
 800661c:	2600      	movs	r6, #0
 800661e:	4637      	mov	r7, r6
 8006620:	e7e1      	b.n	80065e6 <_dtoa_r+0x956>
 8006622:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006624:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006628:	4637      	mov	r7, r6
 800662a:	e599      	b.n	8006160 <_dtoa_r+0x4d0>
 800662c:	9b08      	ldr	r3, [sp, #32]
 800662e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80fd 	beq.w	8006832 <_dtoa_r+0xba2>
 8006638:	2d00      	cmp	r5, #0
 800663a:	dd05      	ble.n	8006648 <_dtoa_r+0x9b8>
 800663c:	4639      	mov	r1, r7
 800663e:	462a      	mov	r2, r5
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fb3d 	bl	8006cc0 <__lshift>
 8006646:	4607      	mov	r7, r0
 8006648:	9b06      	ldr	r3, [sp, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d05c      	beq.n	8006708 <_dtoa_r+0xa78>
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f923 	bl	800689c <_Balloc>
 8006656:	4605      	mov	r5, r0
 8006658:	b928      	cbnz	r0, 8006666 <_dtoa_r+0x9d6>
 800665a:	4b80      	ldr	r3, [pc, #512]	; (800685c <_dtoa_r+0xbcc>)
 800665c:	4602      	mov	r2, r0
 800665e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006662:	f7ff bb2e 	b.w	8005cc2 <_dtoa_r+0x32>
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	f107 010c 	add.w	r1, r7, #12
 8006670:	300c      	adds	r0, #12
 8006672:	f000 f905 	bl	8006880 <memcpy>
 8006676:	2201      	movs	r2, #1
 8006678:	4629      	mov	r1, r5
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fb20 	bl	8006cc0 <__lshift>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	444b      	add	r3, r9
 800668a:	9307      	str	r3, [sp, #28]
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	46b8      	mov	r8, r7
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	4607      	mov	r7, r0
 8006698:	9b01      	ldr	r3, [sp, #4]
 800669a:	4631      	mov	r1, r6
 800669c:	3b01      	subs	r3, #1
 800669e:	4658      	mov	r0, fp
 80066a0:	9302      	str	r3, [sp, #8]
 80066a2:	f7ff fa67 	bl	8005b74 <quorem>
 80066a6:	4603      	mov	r3, r0
 80066a8:	3330      	adds	r3, #48	; 0x30
 80066aa:	9004      	str	r0, [sp, #16]
 80066ac:	4641      	mov	r1, r8
 80066ae:	4658      	mov	r0, fp
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	f000 fb71 	bl	8006d98 <__mcmp>
 80066b6:	463a      	mov	r2, r7
 80066b8:	4681      	mov	r9, r0
 80066ba:	4631      	mov	r1, r6
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fb87 	bl	8006dd0 <__mdiff>
 80066c2:	68c2      	ldr	r2, [r0, #12]
 80066c4:	9b08      	ldr	r3, [sp, #32]
 80066c6:	4605      	mov	r5, r0
 80066c8:	bb02      	cbnz	r2, 800670c <_dtoa_r+0xa7c>
 80066ca:	4601      	mov	r1, r0
 80066cc:	4658      	mov	r0, fp
 80066ce:	f000 fb63 	bl	8006d98 <__mcmp>
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	4602      	mov	r2, r0
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80066de:	f000 f91d 	bl	800691c <_Bfree>
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e6:	9d01      	ldr	r5, [sp, #4]
 80066e8:	ea43 0102 	orr.w	r1, r3, r2
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	430b      	orrs	r3, r1
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	d10d      	bne.n	8006710 <_dtoa_r+0xa80>
 80066f4:	2b39      	cmp	r3, #57	; 0x39
 80066f6:	d029      	beq.n	800674c <_dtoa_r+0xabc>
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	dd01      	ble.n	8006702 <_dtoa_r+0xa72>
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	3331      	adds	r3, #49	; 0x31
 8006702:	9a02      	ldr	r2, [sp, #8]
 8006704:	7013      	strb	r3, [r2, #0]
 8006706:	e774      	b.n	80065f2 <_dtoa_r+0x962>
 8006708:	4638      	mov	r0, r7
 800670a:	e7b9      	b.n	8006680 <_dtoa_r+0x9f0>
 800670c:	2201      	movs	r2, #1
 800670e:	e7e2      	b.n	80066d6 <_dtoa_r+0xa46>
 8006710:	f1b9 0f00 	cmp.w	r9, #0
 8006714:	db06      	blt.n	8006724 <_dtoa_r+0xa94>
 8006716:	9905      	ldr	r1, [sp, #20]
 8006718:	ea41 0909 	orr.w	r9, r1, r9
 800671c:	9906      	ldr	r1, [sp, #24]
 800671e:	ea59 0101 	orrs.w	r1, r9, r1
 8006722:	d120      	bne.n	8006766 <_dtoa_r+0xad6>
 8006724:	2a00      	cmp	r2, #0
 8006726:	ddec      	ble.n	8006702 <_dtoa_r+0xa72>
 8006728:	4659      	mov	r1, fp
 800672a:	2201      	movs	r2, #1
 800672c:	4620      	mov	r0, r4
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	f000 fac6 	bl	8006cc0 <__lshift>
 8006734:	4631      	mov	r1, r6
 8006736:	4683      	mov	fp, r0
 8006738:	f000 fb2e 	bl	8006d98 <__mcmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	dc02      	bgt.n	8006748 <_dtoa_r+0xab8>
 8006742:	d1de      	bne.n	8006702 <_dtoa_r+0xa72>
 8006744:	07da      	lsls	r2, r3, #31
 8006746:	d5dc      	bpl.n	8006702 <_dtoa_r+0xa72>
 8006748:	2b39      	cmp	r3, #57	; 0x39
 800674a:	d1d8      	bne.n	80066fe <_dtoa_r+0xa6e>
 800674c:	9a02      	ldr	r2, [sp, #8]
 800674e:	2339      	movs	r3, #57	; 0x39
 8006750:	7013      	strb	r3, [r2, #0]
 8006752:	462b      	mov	r3, r5
 8006754:	461d      	mov	r5, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800675c:	2a39      	cmp	r2, #57	; 0x39
 800675e:	d050      	beq.n	8006802 <_dtoa_r+0xb72>
 8006760:	3201      	adds	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e745      	b.n	80065f2 <_dtoa_r+0x962>
 8006766:	2a00      	cmp	r2, #0
 8006768:	dd03      	ble.n	8006772 <_dtoa_r+0xae2>
 800676a:	2b39      	cmp	r3, #57	; 0x39
 800676c:	d0ee      	beq.n	800674c <_dtoa_r+0xabc>
 800676e:	3301      	adds	r3, #1
 8006770:	e7c7      	b.n	8006702 <_dtoa_r+0xa72>
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	9907      	ldr	r1, [sp, #28]
 8006776:	f802 3c01 	strb.w	r3, [r2, #-1]
 800677a:	428a      	cmp	r2, r1
 800677c:	d02a      	beq.n	80067d4 <_dtoa_r+0xb44>
 800677e:	4659      	mov	r1, fp
 8006780:	2300      	movs	r3, #0
 8006782:	220a      	movs	r2, #10
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f8eb 	bl	8006960 <__multadd>
 800678a:	45b8      	cmp	r8, r7
 800678c:	4683      	mov	fp, r0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	f04f 020a 	mov.w	r2, #10
 8006796:	4641      	mov	r1, r8
 8006798:	4620      	mov	r0, r4
 800679a:	d107      	bne.n	80067ac <_dtoa_r+0xb1c>
 800679c:	f000 f8e0 	bl	8006960 <__multadd>
 80067a0:	4680      	mov	r8, r0
 80067a2:	4607      	mov	r7, r0
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	3301      	adds	r3, #1
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	e775      	b.n	8006698 <_dtoa_r+0xa08>
 80067ac:	f000 f8d8 	bl	8006960 <__multadd>
 80067b0:	4639      	mov	r1, r7
 80067b2:	4680      	mov	r8, r0
 80067b4:	2300      	movs	r3, #0
 80067b6:	220a      	movs	r2, #10
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 f8d1 	bl	8006960 <__multadd>
 80067be:	4607      	mov	r7, r0
 80067c0:	e7f0      	b.n	80067a4 <_dtoa_r+0xb14>
 80067c2:	f1b9 0f00 	cmp.w	r9, #0
 80067c6:	9a00      	ldr	r2, [sp, #0]
 80067c8:	bfcc      	ite	gt
 80067ca:	464d      	movgt	r5, r9
 80067cc:	2501      	movle	r5, #1
 80067ce:	4415      	add	r5, r2
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	4659      	mov	r1, fp
 80067d6:	2201      	movs	r2, #1
 80067d8:	4620      	mov	r0, r4
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f000 fa70 	bl	8006cc0 <__lshift>
 80067e0:	4631      	mov	r1, r6
 80067e2:	4683      	mov	fp, r0
 80067e4:	f000 fad8 	bl	8006d98 <__mcmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	dcb2      	bgt.n	8006752 <_dtoa_r+0xac2>
 80067ec:	d102      	bne.n	80067f4 <_dtoa_r+0xb64>
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	07db      	lsls	r3, r3, #31
 80067f2:	d4ae      	bmi.n	8006752 <_dtoa_r+0xac2>
 80067f4:	462b      	mov	r3, r5
 80067f6:	461d      	mov	r5, r3
 80067f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067fc:	2a30      	cmp	r2, #48	; 0x30
 80067fe:	d0fa      	beq.n	80067f6 <_dtoa_r+0xb66>
 8006800:	e6f7      	b.n	80065f2 <_dtoa_r+0x962>
 8006802:	9a00      	ldr	r2, [sp, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d1a5      	bne.n	8006754 <_dtoa_r+0xac4>
 8006808:	f10a 0a01 	add.w	sl, sl, #1
 800680c:	2331      	movs	r3, #49	; 0x31
 800680e:	e779      	b.n	8006704 <_dtoa_r+0xa74>
 8006810:	4b13      	ldr	r3, [pc, #76]	; (8006860 <_dtoa_r+0xbd0>)
 8006812:	f7ff baaf 	b.w	8005d74 <_dtoa_r+0xe4>
 8006816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f aa86 	bne.w	8005d2a <_dtoa_r+0x9a>
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <_dtoa_r+0xbd4>)
 8006820:	f7ff baa8 	b.w	8005d74 <_dtoa_r+0xe4>
 8006824:	f1b9 0f00 	cmp.w	r9, #0
 8006828:	dc03      	bgt.n	8006832 <_dtoa_r+0xba2>
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	2b02      	cmp	r3, #2
 800682e:	f73f aec9 	bgt.w	80065c4 <_dtoa_r+0x934>
 8006832:	9d00      	ldr	r5, [sp, #0]
 8006834:	4631      	mov	r1, r6
 8006836:	4658      	mov	r0, fp
 8006838:	f7ff f99c 	bl	8005b74 <quorem>
 800683c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006840:	f805 3b01 	strb.w	r3, [r5], #1
 8006844:	9a00      	ldr	r2, [sp, #0]
 8006846:	1aaa      	subs	r2, r5, r2
 8006848:	4591      	cmp	r9, r2
 800684a:	ddba      	ble.n	80067c2 <_dtoa_r+0xb32>
 800684c:	4659      	mov	r1, fp
 800684e:	2300      	movs	r3, #0
 8006850:	220a      	movs	r2, #10
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f884 	bl	8006960 <__multadd>
 8006858:	4683      	mov	fp, r0
 800685a:	e7eb      	b.n	8006834 <_dtoa_r+0xba4>
 800685c:	08007d63 	.word	0x08007d63
 8006860:	08007cbc 	.word	0x08007cbc
 8006864:	08007ce0 	.word	0x08007ce0

08006868 <_localeconv_r>:
 8006868:	4800      	ldr	r0, [pc, #0]	; (800686c <_localeconv_r+0x4>)
 800686a:	4770      	bx	lr
 800686c:	20000160 	.word	0x20000160

08006870 <malloc>:
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <malloc+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f000 bbef 	b.w	8007058 <_malloc_r>
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c

08006880 <memcpy>:
 8006880:	440a      	add	r2, r1
 8006882:	4291      	cmp	r1, r2
 8006884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006888:	d100      	bne.n	800688c <memcpy+0xc>
 800688a:	4770      	bx	lr
 800688c:	b510      	push	{r4, lr}
 800688e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006896:	4291      	cmp	r1, r2
 8006898:	d1f9      	bne.n	800688e <memcpy+0xe>
 800689a:	bd10      	pop	{r4, pc}

0800689c <_Balloc>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068a0:	4604      	mov	r4, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	b976      	cbnz	r6, 80068c4 <_Balloc+0x28>
 80068a6:	2010      	movs	r0, #16
 80068a8:	f7ff ffe2 	bl	8006870 <malloc>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6260      	str	r0, [r4, #36]	; 0x24
 80068b0:	b920      	cbnz	r0, 80068bc <_Balloc+0x20>
 80068b2:	4b18      	ldr	r3, [pc, #96]	; (8006914 <_Balloc+0x78>)
 80068b4:	4818      	ldr	r0, [pc, #96]	; (8006918 <_Balloc+0x7c>)
 80068b6:	2166      	movs	r1, #102	; 0x66
 80068b8:	f000 fc38 	bl	800712c <__assert_func>
 80068bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068c0:	6006      	str	r6, [r0, #0]
 80068c2:	60c6      	str	r6, [r0, #12]
 80068c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068c6:	68f3      	ldr	r3, [r6, #12]
 80068c8:	b183      	cbz	r3, 80068ec <_Balloc+0x50>
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068d2:	b9b8      	cbnz	r0, 8006904 <_Balloc+0x68>
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f605 	lsl.w	r6, r1, r5
 80068da:	1d72      	adds	r2, r6, #5
 80068dc:	0092      	lsls	r2, r2, #2
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fb5a 	bl	8006f98 <_calloc_r>
 80068e4:	b160      	cbz	r0, 8006900 <_Balloc+0x64>
 80068e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068ea:	e00e      	b.n	800690a <_Balloc+0x6e>
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	2104      	movs	r1, #4
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fb51 	bl	8006f98 <_calloc_r>
 80068f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f8:	60f0      	str	r0, [r6, #12]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e4      	bne.n	80068ca <_Balloc+0x2e>
 8006900:	2000      	movs	r0, #0
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	6802      	ldr	r2, [r0, #0]
 8006906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800690a:	2300      	movs	r3, #0
 800690c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006910:	e7f7      	b.n	8006902 <_Balloc+0x66>
 8006912:	bf00      	nop
 8006914:	08007ced 	.word	0x08007ced
 8006918:	08007d74 	.word	0x08007d74

0800691c <_Bfree>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006920:	4605      	mov	r5, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b976      	cbnz	r6, 8006944 <_Bfree+0x28>
 8006926:	2010      	movs	r0, #16
 8006928:	f7ff ffa2 	bl	8006870 <malloc>
 800692c:	4602      	mov	r2, r0
 800692e:	6268      	str	r0, [r5, #36]	; 0x24
 8006930:	b920      	cbnz	r0, 800693c <_Bfree+0x20>
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <_Bfree+0x3c>)
 8006934:	4809      	ldr	r0, [pc, #36]	; (800695c <_Bfree+0x40>)
 8006936:	218a      	movs	r1, #138	; 0x8a
 8006938:	f000 fbf8 	bl	800712c <__assert_func>
 800693c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006940:	6006      	str	r6, [r0, #0]
 8006942:	60c6      	str	r6, [r0, #12]
 8006944:	b13c      	cbz	r4, 8006956 <_Bfree+0x3a>
 8006946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006948:	6862      	ldr	r2, [r4, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006950:	6021      	str	r1, [r4, #0]
 8006952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	08007ced 	.word	0x08007ced
 800695c:	08007d74 	.word	0x08007d74

08006960 <__multadd>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	690e      	ldr	r6, [r1, #16]
 8006966:	4607      	mov	r7, r0
 8006968:	4698      	mov	r8, r3
 800696a:	460c      	mov	r4, r1
 800696c:	f101 0014 	add.w	r0, r1, #20
 8006970:	2300      	movs	r3, #0
 8006972:	6805      	ldr	r5, [r0, #0]
 8006974:	b2a9      	uxth	r1, r5
 8006976:	fb02 8101 	mla	r1, r2, r1, r8
 800697a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800697e:	0c2d      	lsrs	r5, r5, #16
 8006980:	fb02 c505 	mla	r5, r2, r5, ip
 8006984:	b289      	uxth	r1, r1
 8006986:	3301      	adds	r3, #1
 8006988:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800698c:	429e      	cmp	r6, r3
 800698e:	f840 1b04 	str.w	r1, [r0], #4
 8006992:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006996:	dcec      	bgt.n	8006972 <__multadd+0x12>
 8006998:	f1b8 0f00 	cmp.w	r8, #0
 800699c:	d022      	beq.n	80069e4 <__multadd+0x84>
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	42b3      	cmp	r3, r6
 80069a2:	dc19      	bgt.n	80069d8 <__multadd+0x78>
 80069a4:	6861      	ldr	r1, [r4, #4]
 80069a6:	4638      	mov	r0, r7
 80069a8:	3101      	adds	r1, #1
 80069aa:	f7ff ff77 	bl	800689c <_Balloc>
 80069ae:	4605      	mov	r5, r0
 80069b0:	b928      	cbnz	r0, 80069be <__multadd+0x5e>
 80069b2:	4602      	mov	r2, r0
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <__multadd+0x8c>)
 80069b6:	480e      	ldr	r0, [pc, #56]	; (80069f0 <__multadd+0x90>)
 80069b8:	21b5      	movs	r1, #181	; 0xb5
 80069ba:	f000 fbb7 	bl	800712c <__assert_func>
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	3202      	adds	r2, #2
 80069c2:	f104 010c 	add.w	r1, r4, #12
 80069c6:	0092      	lsls	r2, r2, #2
 80069c8:	300c      	adds	r0, #12
 80069ca:	f7ff ff59 	bl	8006880 <memcpy>
 80069ce:	4621      	mov	r1, r4
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ffa3 	bl	800691c <_Bfree>
 80069d6:	462c      	mov	r4, r5
 80069d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069dc:	3601      	adds	r6, #1
 80069de:	f8c3 8014 	str.w	r8, [r3, #20]
 80069e2:	6126      	str	r6, [r4, #16]
 80069e4:	4620      	mov	r0, r4
 80069e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ea:	bf00      	nop
 80069ec:	08007d63 	.word	0x08007d63
 80069f0:	08007d74 	.word	0x08007d74

080069f4 <__hi0bits>:
 80069f4:	0c03      	lsrs	r3, r0, #16
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	b9d3      	cbnz	r3, 8006a30 <__hi0bits+0x3c>
 80069fa:	0400      	lsls	r0, r0, #16
 80069fc:	2310      	movs	r3, #16
 80069fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a02:	bf04      	itt	eq
 8006a04:	0200      	lsleq	r0, r0, #8
 8006a06:	3308      	addeq	r3, #8
 8006a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a0c:	bf04      	itt	eq
 8006a0e:	0100      	lsleq	r0, r0, #4
 8006a10:	3304      	addeq	r3, #4
 8006a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a16:	bf04      	itt	eq
 8006a18:	0080      	lsleq	r0, r0, #2
 8006a1a:	3302      	addeq	r3, #2
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	db05      	blt.n	8006a2c <__hi0bits+0x38>
 8006a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a24:	f103 0301 	add.w	r3, r3, #1
 8006a28:	bf08      	it	eq
 8006a2a:	2320      	moveq	r3, #32
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	4770      	bx	lr
 8006a30:	2300      	movs	r3, #0
 8006a32:	e7e4      	b.n	80069fe <__hi0bits+0xa>

08006a34 <__lo0bits>:
 8006a34:	6803      	ldr	r3, [r0, #0]
 8006a36:	f013 0207 	ands.w	r2, r3, #7
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	d00b      	beq.n	8006a56 <__lo0bits+0x22>
 8006a3e:	07da      	lsls	r2, r3, #31
 8006a40:	d424      	bmi.n	8006a8c <__lo0bits+0x58>
 8006a42:	0798      	lsls	r0, r3, #30
 8006a44:	bf49      	itett	mi
 8006a46:	085b      	lsrmi	r3, r3, #1
 8006a48:	089b      	lsrpl	r3, r3, #2
 8006a4a:	2001      	movmi	r0, #1
 8006a4c:	600b      	strmi	r3, [r1, #0]
 8006a4e:	bf5c      	itt	pl
 8006a50:	600b      	strpl	r3, [r1, #0]
 8006a52:	2002      	movpl	r0, #2
 8006a54:	4770      	bx	lr
 8006a56:	b298      	uxth	r0, r3
 8006a58:	b9b0      	cbnz	r0, 8006a88 <__lo0bits+0x54>
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a62:	bf04      	itt	eq
 8006a64:	0a1b      	lsreq	r3, r3, #8
 8006a66:	3008      	addeq	r0, #8
 8006a68:	071a      	lsls	r2, r3, #28
 8006a6a:	bf04      	itt	eq
 8006a6c:	091b      	lsreq	r3, r3, #4
 8006a6e:	3004      	addeq	r0, #4
 8006a70:	079a      	lsls	r2, r3, #30
 8006a72:	bf04      	itt	eq
 8006a74:	089b      	lsreq	r3, r3, #2
 8006a76:	3002      	addeq	r0, #2
 8006a78:	07da      	lsls	r2, r3, #31
 8006a7a:	d403      	bmi.n	8006a84 <__lo0bits+0x50>
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	f100 0001 	add.w	r0, r0, #1
 8006a82:	d005      	beq.n	8006a90 <__lo0bits+0x5c>
 8006a84:	600b      	str	r3, [r1, #0]
 8006a86:	4770      	bx	lr
 8006a88:	4610      	mov	r0, r2
 8006a8a:	e7e8      	b.n	8006a5e <__lo0bits+0x2a>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	4770      	bx	lr
 8006a90:	2020      	movs	r0, #32
 8006a92:	4770      	bx	lr

08006a94 <__i2b>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	2101      	movs	r1, #1
 8006a9a:	f7ff feff 	bl	800689c <_Balloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <__i2b+0x1a>
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <__i2b+0x24>)
 8006aa4:	4805      	ldr	r0, [pc, #20]	; (8006abc <__i2b+0x28>)
 8006aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006aaa:	f000 fb3f 	bl	800712c <__assert_func>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	6144      	str	r4, [r0, #20]
 8006ab2:	6103      	str	r3, [r0, #16]
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08007d63 	.word	0x08007d63
 8006abc:	08007d74 	.word	0x08007d74

08006ac0 <__multiply>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	bfb8      	it	lt
 8006ace:	460b      	movlt	r3, r1
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	bfbc      	itt	lt
 8006ad4:	4625      	movlt	r5, r4
 8006ad6:	461c      	movlt	r4, r3
 8006ad8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006adc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ae0:	68ab      	ldr	r3, [r5, #8]
 8006ae2:	6869      	ldr	r1, [r5, #4]
 8006ae4:	eb0a 0709 	add.w	r7, sl, r9
 8006ae8:	42bb      	cmp	r3, r7
 8006aea:	b085      	sub	sp, #20
 8006aec:	bfb8      	it	lt
 8006aee:	3101      	addlt	r1, #1
 8006af0:	f7ff fed4 	bl	800689c <_Balloc>
 8006af4:	b930      	cbnz	r0, 8006b04 <__multiply+0x44>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <__multiply+0x144>)
 8006afa:	4843      	ldr	r0, [pc, #268]	; (8006c08 <__multiply+0x148>)
 8006afc:	f240 115d 	movw	r1, #349	; 0x15d
 8006b00:	f000 fb14 	bl	800712c <__assert_func>
 8006b04:	f100 0614 	add.w	r6, r0, #20
 8006b08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4543      	cmp	r3, r8
 8006b12:	d31e      	bcc.n	8006b52 <__multiply+0x92>
 8006b14:	f105 0c14 	add.w	ip, r5, #20
 8006b18:	f104 0314 	add.w	r3, r4, #20
 8006b1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b24:	9202      	str	r2, [sp, #8]
 8006b26:	ebac 0205 	sub.w	r2, ip, r5
 8006b2a:	3a15      	subs	r2, #21
 8006b2c:	f022 0203 	bic.w	r2, r2, #3
 8006b30:	3204      	adds	r2, #4
 8006b32:	f105 0115 	add.w	r1, r5, #21
 8006b36:	458c      	cmp	ip, r1
 8006b38:	bf38      	it	cc
 8006b3a:	2204      	movcc	r2, #4
 8006b3c:	9201      	str	r2, [sp, #4]
 8006b3e:	9a02      	ldr	r2, [sp, #8]
 8006b40:	9303      	str	r3, [sp, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d808      	bhi.n	8006b58 <__multiply+0x98>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	dc55      	bgt.n	8006bf6 <__multiply+0x136>
 8006b4a:	6107      	str	r7, [r0, #16]
 8006b4c:	b005      	add	sp, #20
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	f843 2b04 	str.w	r2, [r3], #4
 8006b56:	e7db      	b.n	8006b10 <__multiply+0x50>
 8006b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b5c:	f1ba 0f00 	cmp.w	sl, #0
 8006b60:	d020      	beq.n	8006ba4 <__multiply+0xe4>
 8006b62:	f105 0e14 	add.w	lr, r5, #20
 8006b66:	46b1      	mov	r9, r6
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b6e:	f8d9 b000 	ldr.w	fp, [r9]
 8006b72:	b2a1      	uxth	r1, r4
 8006b74:	fa1f fb8b 	uxth.w	fp, fp
 8006b78:	fb0a b101 	mla	r1, sl, r1, fp
 8006b7c:	4411      	add	r1, r2
 8006b7e:	f8d9 2000 	ldr.w	r2, [r9]
 8006b82:	0c24      	lsrs	r4, r4, #16
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b8e:	b289      	uxth	r1, r1
 8006b90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b94:	45f4      	cmp	ip, lr
 8006b96:	f849 1b04 	str.w	r1, [r9], #4
 8006b9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b9e:	d8e4      	bhi.n	8006b6a <__multiply+0xaa>
 8006ba0:	9901      	ldr	r1, [sp, #4]
 8006ba2:	5072      	str	r2, [r6, r1]
 8006ba4:	9a03      	ldr	r2, [sp, #12]
 8006ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006baa:	3304      	adds	r3, #4
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	d01f      	beq.n	8006bf2 <__multiply+0x132>
 8006bb2:	6834      	ldr	r4, [r6, #0]
 8006bb4:	f105 0114 	add.w	r1, r5, #20
 8006bb8:	46b6      	mov	lr, r6
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	880a      	ldrh	r2, [r1, #0]
 8006bc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bc4:	fb09 b202 	mla	r2, r9, r2, fp
 8006bc8:	4492      	add	sl, r2
 8006bca:	b2a4      	uxth	r4, r4
 8006bcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006bd0:	f84e 4b04 	str.w	r4, [lr], #4
 8006bd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bd8:	f8be 2000 	ldrh.w	r2, [lr]
 8006bdc:	0c24      	lsrs	r4, r4, #16
 8006bde:	fb09 2404 	mla	r4, r9, r4, r2
 8006be2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006be6:	458c      	cmp	ip, r1
 8006be8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bec:	d8e7      	bhi.n	8006bbe <__multiply+0xfe>
 8006bee:	9a01      	ldr	r2, [sp, #4]
 8006bf0:	50b4      	str	r4, [r6, r2]
 8006bf2:	3604      	adds	r6, #4
 8006bf4:	e7a3      	b.n	8006b3e <__multiply+0x7e>
 8006bf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1a5      	bne.n	8006b4a <__multiply+0x8a>
 8006bfe:	3f01      	subs	r7, #1
 8006c00:	e7a1      	b.n	8006b46 <__multiply+0x86>
 8006c02:	bf00      	nop
 8006c04:	08007d63 	.word	0x08007d63
 8006c08:	08007d74 	.word	0x08007d74

08006c0c <__pow5mult>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	4615      	mov	r5, r2
 8006c12:	f012 0203 	ands.w	r2, r2, #3
 8006c16:	4606      	mov	r6, r0
 8006c18:	460f      	mov	r7, r1
 8006c1a:	d007      	beq.n	8006c2c <__pow5mult+0x20>
 8006c1c:	4c25      	ldr	r4, [pc, #148]	; (8006cb4 <__pow5mult+0xa8>)
 8006c1e:	3a01      	subs	r2, #1
 8006c20:	2300      	movs	r3, #0
 8006c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c26:	f7ff fe9b 	bl	8006960 <__multadd>
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	10ad      	asrs	r5, r5, #2
 8006c2e:	d03d      	beq.n	8006cac <__pow5mult+0xa0>
 8006c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c32:	b97c      	cbnz	r4, 8006c54 <__pow5mult+0x48>
 8006c34:	2010      	movs	r0, #16
 8006c36:	f7ff fe1b 	bl	8006870 <malloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c3e:	b928      	cbnz	r0, 8006c4c <__pow5mult+0x40>
 8006c40:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <__pow5mult+0xac>)
 8006c42:	481e      	ldr	r0, [pc, #120]	; (8006cbc <__pow5mult+0xb0>)
 8006c44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c48:	f000 fa70 	bl	800712c <__assert_func>
 8006c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c50:	6004      	str	r4, [r0, #0]
 8006c52:	60c4      	str	r4, [r0, #12]
 8006c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c5c:	b94c      	cbnz	r4, 8006c72 <__pow5mult+0x66>
 8006c5e:	f240 2171 	movw	r1, #625	; 0x271
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff16 	bl	8006a94 <__i2b>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c6e:	4604      	mov	r4, r0
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	f04f 0900 	mov.w	r9, #0
 8006c76:	07eb      	lsls	r3, r5, #31
 8006c78:	d50a      	bpl.n	8006c90 <__pow5mult+0x84>
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7ff ff1e 	bl	8006ac0 <__multiply>
 8006c84:	4639      	mov	r1, r7
 8006c86:	4680      	mov	r8, r0
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fe47 	bl	800691c <_Bfree>
 8006c8e:	4647      	mov	r7, r8
 8006c90:	106d      	asrs	r5, r5, #1
 8006c92:	d00b      	beq.n	8006cac <__pow5mult+0xa0>
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	b938      	cbnz	r0, 8006ca8 <__pow5mult+0x9c>
 8006c98:	4622      	mov	r2, r4
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff ff0f 	bl	8006ac0 <__multiply>
 8006ca2:	6020      	str	r0, [r4, #0]
 8006ca4:	f8c0 9000 	str.w	r9, [r0]
 8006ca8:	4604      	mov	r4, r0
 8006caa:	e7e4      	b.n	8006c76 <__pow5mult+0x6a>
 8006cac:	4638      	mov	r0, r7
 8006cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb2:	bf00      	nop
 8006cb4:	08007ec8 	.word	0x08007ec8
 8006cb8:	08007ced 	.word	0x08007ced
 8006cbc:	08007d74 	.word	0x08007d74

08006cc0 <__lshift>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	6849      	ldr	r1, [r1, #4]
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4691      	mov	r9, r2
 8006cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cd8:	f108 0601 	add.w	r6, r8, #1
 8006cdc:	42b3      	cmp	r3, r6
 8006cde:	db0b      	blt.n	8006cf8 <__lshift+0x38>
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff fddb 	bl	800689c <_Balloc>
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	b948      	cbnz	r0, 8006cfe <__lshift+0x3e>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <__lshift+0xd0>)
 8006cee:	4829      	ldr	r0, [pc, #164]	; (8006d94 <__lshift+0xd4>)
 8006cf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cf4:	f000 fa1a 	bl	800712c <__assert_func>
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	e7ee      	b.n	8006cdc <__lshift+0x1c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f100 0114 	add.w	r1, r0, #20
 8006d04:	f100 0210 	add.w	r2, r0, #16
 8006d08:	4618      	mov	r0, r3
 8006d0a:	4553      	cmp	r3, sl
 8006d0c:	db33      	blt.n	8006d76 <__lshift+0xb6>
 8006d0e:	6920      	ldr	r0, [r4, #16]
 8006d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d14:	f104 0314 	add.w	r3, r4, #20
 8006d18:	f019 091f 	ands.w	r9, r9, #31
 8006d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d24:	d02b      	beq.n	8006d7e <__lshift+0xbe>
 8006d26:	f1c9 0e20 	rsb	lr, r9, #32
 8006d2a:	468a      	mov	sl, r1
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	fa00 f009 	lsl.w	r0, r0, r9
 8006d34:	4302      	orrs	r2, r0
 8006d36:	f84a 2b04 	str.w	r2, [sl], #4
 8006d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3e:	459c      	cmp	ip, r3
 8006d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d44:	d8f3      	bhi.n	8006d2e <__lshift+0x6e>
 8006d46:	ebac 0304 	sub.w	r3, ip, r4
 8006d4a:	3b15      	subs	r3, #21
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	3304      	adds	r3, #4
 8006d52:	f104 0015 	add.w	r0, r4, #21
 8006d56:	4584      	cmp	ip, r0
 8006d58:	bf38      	it	cc
 8006d5a:	2304      	movcc	r3, #4
 8006d5c:	50ca      	str	r2, [r1, r3]
 8006d5e:	b10a      	cbz	r2, 8006d64 <__lshift+0xa4>
 8006d60:	f108 0602 	add.w	r6, r8, #2
 8006d64:	3e01      	subs	r6, #1
 8006d66:	4638      	mov	r0, r7
 8006d68:	612e      	str	r6, [r5, #16]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	f7ff fdd6 	bl	800691c <_Bfree>
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	e7c5      	b.n	8006d0a <__lshift+0x4a>
 8006d7e:	3904      	subs	r1, #4
 8006d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d88:	459c      	cmp	ip, r3
 8006d8a:	d8f9      	bhi.n	8006d80 <__lshift+0xc0>
 8006d8c:	e7ea      	b.n	8006d64 <__lshift+0xa4>
 8006d8e:	bf00      	nop
 8006d90:	08007d63 	.word	0x08007d63
 8006d94:	08007d74 	.word	0x08007d74

08006d98 <__mcmp>:
 8006d98:	b530      	push	{r4, r5, lr}
 8006d9a:	6902      	ldr	r2, [r0, #16]
 8006d9c:	690c      	ldr	r4, [r1, #16]
 8006d9e:	1b12      	subs	r2, r2, r4
 8006da0:	d10e      	bne.n	8006dc0 <__mcmp+0x28>
 8006da2:	f100 0314 	add.w	r3, r0, #20
 8006da6:	3114      	adds	r1, #20
 8006da8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006dac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006db0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006db4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006db8:	42a5      	cmp	r5, r4
 8006dba:	d003      	beq.n	8006dc4 <__mcmp+0x2c>
 8006dbc:	d305      	bcc.n	8006dca <__mcmp+0x32>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	bd30      	pop	{r4, r5, pc}
 8006dc4:	4283      	cmp	r3, r0
 8006dc6:	d3f3      	bcc.n	8006db0 <__mcmp+0x18>
 8006dc8:	e7fa      	b.n	8006dc0 <__mcmp+0x28>
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dce:	e7f7      	b.n	8006dc0 <__mcmp+0x28>

08006dd0 <__mdiff>:
 8006dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4620      	mov	r0, r4
 8006ddc:	4617      	mov	r7, r2
 8006dde:	f7ff ffdb 	bl	8006d98 <__mcmp>
 8006de2:	1e05      	subs	r5, r0, #0
 8006de4:	d110      	bne.n	8006e08 <__mdiff+0x38>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff fd57 	bl	800689c <_Balloc>
 8006dee:	b930      	cbnz	r0, 8006dfe <__mdiff+0x2e>
 8006df0:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <__mdiff+0x108>)
 8006df2:	4602      	mov	r2, r0
 8006df4:	f240 2132 	movw	r1, #562	; 0x232
 8006df8:	4838      	ldr	r0, [pc, #224]	; (8006edc <__mdiff+0x10c>)
 8006dfa:	f000 f997 	bl	800712c <__assert_func>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	bfa4      	itt	ge
 8006e0a:	463b      	movge	r3, r7
 8006e0c:	4627      	movge	r7, r4
 8006e0e:	4630      	mov	r0, r6
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	bfa6      	itte	ge
 8006e14:	461c      	movge	r4, r3
 8006e16:	2500      	movge	r5, #0
 8006e18:	2501      	movlt	r5, #1
 8006e1a:	f7ff fd3f 	bl	800689c <_Balloc>
 8006e1e:	b920      	cbnz	r0, 8006e2a <__mdiff+0x5a>
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <__mdiff+0x108>)
 8006e22:	4602      	mov	r2, r0
 8006e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e28:	e7e6      	b.n	8006df8 <__mdiff+0x28>
 8006e2a:	693e      	ldr	r6, [r7, #16]
 8006e2c:	60c5      	str	r5, [r0, #12]
 8006e2e:	6925      	ldr	r5, [r4, #16]
 8006e30:	f107 0114 	add.w	r1, r7, #20
 8006e34:	f104 0914 	add.w	r9, r4, #20
 8006e38:	f100 0e14 	add.w	lr, r0, #20
 8006e3c:	f107 0210 	add.w	r2, r7, #16
 8006e40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e48:	46f2      	mov	sl, lr
 8006e4a:	2700      	movs	r7, #0
 8006e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e54:	fa1f f883 	uxth.w	r8, r3
 8006e58:	fa17 f78b 	uxtah	r7, r7, fp
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	eba7 0808 	sub.w	r8, r7, r8
 8006e62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e6a:	fa1f f888 	uxth.w	r8, r8
 8006e6e:	141f      	asrs	r7, r3, #16
 8006e70:	454d      	cmp	r5, r9
 8006e72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e76:	f84a 3b04 	str.w	r3, [sl], #4
 8006e7a:	d8e7      	bhi.n	8006e4c <__mdiff+0x7c>
 8006e7c:	1b2b      	subs	r3, r5, r4
 8006e7e:	3b15      	subs	r3, #21
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	3304      	adds	r3, #4
 8006e86:	3415      	adds	r4, #21
 8006e88:	42a5      	cmp	r5, r4
 8006e8a:	bf38      	it	cc
 8006e8c:	2304      	movcc	r3, #4
 8006e8e:	4419      	add	r1, r3
 8006e90:	4473      	add	r3, lr
 8006e92:	469e      	mov	lr, r3
 8006e94:	460d      	mov	r5, r1
 8006e96:	4565      	cmp	r5, ip
 8006e98:	d30e      	bcc.n	8006eb8 <__mdiff+0xe8>
 8006e9a:	f10c 0203 	add.w	r2, ip, #3
 8006e9e:	1a52      	subs	r2, r2, r1
 8006ea0:	f022 0203 	bic.w	r2, r2, #3
 8006ea4:	3903      	subs	r1, #3
 8006ea6:	458c      	cmp	ip, r1
 8006ea8:	bf38      	it	cc
 8006eaa:	2200      	movcc	r2, #0
 8006eac:	441a      	add	r2, r3
 8006eae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006eb2:	b17b      	cbz	r3, 8006ed4 <__mdiff+0x104>
 8006eb4:	6106      	str	r6, [r0, #16]
 8006eb6:	e7a5      	b.n	8006e04 <__mdiff+0x34>
 8006eb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006ebc:	fa17 f488 	uxtah	r4, r7, r8
 8006ec0:	1422      	asrs	r2, r4, #16
 8006ec2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006ec6:	b2a4      	uxth	r4, r4
 8006ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ecc:	f84e 4b04 	str.w	r4, [lr], #4
 8006ed0:	1417      	asrs	r7, r2, #16
 8006ed2:	e7e0      	b.n	8006e96 <__mdiff+0xc6>
 8006ed4:	3e01      	subs	r6, #1
 8006ed6:	e7ea      	b.n	8006eae <__mdiff+0xde>
 8006ed8:	08007d63 	.word	0x08007d63
 8006edc:	08007d74 	.word	0x08007d74

08006ee0 <__d2b>:
 8006ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4689      	mov	r9, r1
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	ec57 6b10 	vmov	r6, r7, d0
 8006eec:	4690      	mov	r8, r2
 8006eee:	f7ff fcd5 	bl	800689c <_Balloc>
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	b930      	cbnz	r0, 8006f04 <__d2b+0x24>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4b25      	ldr	r3, [pc, #148]	; (8006f90 <__d2b+0xb0>)
 8006efa:	4826      	ldr	r0, [pc, #152]	; (8006f94 <__d2b+0xb4>)
 8006efc:	f240 310a 	movw	r1, #778	; 0x30a
 8006f00:	f000 f914 	bl	800712c <__assert_func>
 8006f04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f0c:	bb35      	cbnz	r5, 8006f5c <__d2b+0x7c>
 8006f0e:	2e00      	cmp	r6, #0
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	d028      	beq.n	8006f66 <__d2b+0x86>
 8006f14:	4668      	mov	r0, sp
 8006f16:	9600      	str	r6, [sp, #0]
 8006f18:	f7ff fd8c 	bl	8006a34 <__lo0bits>
 8006f1c:	9900      	ldr	r1, [sp, #0]
 8006f1e:	b300      	cbz	r0, 8006f62 <__d2b+0x82>
 8006f20:	9a01      	ldr	r2, [sp, #4]
 8006f22:	f1c0 0320 	rsb	r3, r0, #32
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	40c2      	lsrs	r2, r0
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	9201      	str	r2, [sp, #4]
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	61a3      	str	r3, [r4, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bf14      	ite	ne
 8006f3a:	2202      	movne	r2, #2
 8006f3c:	2201      	moveq	r2, #1
 8006f3e:	6122      	str	r2, [r4, #16]
 8006f40:	b1d5      	cbz	r5, 8006f78 <__d2b+0x98>
 8006f42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f46:	4405      	add	r5, r0
 8006f48:	f8c9 5000 	str.w	r5, [r9]
 8006f4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f50:	f8c8 0000 	str.w	r0, [r8]
 8006f54:	4620      	mov	r0, r4
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f60:	e7d5      	b.n	8006f0e <__d2b+0x2e>
 8006f62:	6161      	str	r1, [r4, #20]
 8006f64:	e7e5      	b.n	8006f32 <__d2b+0x52>
 8006f66:	a801      	add	r0, sp, #4
 8006f68:	f7ff fd64 	bl	8006a34 <__lo0bits>
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	2201      	movs	r2, #1
 8006f72:	6122      	str	r2, [r4, #16]
 8006f74:	3020      	adds	r0, #32
 8006f76:	e7e3      	b.n	8006f40 <__d2b+0x60>
 8006f78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f80:	f8c9 0000 	str.w	r0, [r9]
 8006f84:	6918      	ldr	r0, [r3, #16]
 8006f86:	f7ff fd35 	bl	80069f4 <__hi0bits>
 8006f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f8e:	e7df      	b.n	8006f50 <__d2b+0x70>
 8006f90:	08007d63 	.word	0x08007d63
 8006f94:	08007d74 	.word	0x08007d74

08006f98 <_calloc_r>:
 8006f98:	b513      	push	{r0, r1, r4, lr}
 8006f9a:	434a      	muls	r2, r1
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	9201      	str	r2, [sp, #4]
 8006fa0:	f000 f85a 	bl	8007058 <_malloc_r>
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	b118      	cbz	r0, 8006fb0 <_calloc_r+0x18>
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	2100      	movs	r1, #0
 8006fac:	f7fe f970 	bl	8005290 <memset>
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	b002      	add	sp, #8
 8006fb4:	bd10      	pop	{r4, pc}
	...

08006fb8 <_free_r>:
 8006fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fba:	2900      	cmp	r1, #0
 8006fbc:	d048      	beq.n	8007050 <_free_r+0x98>
 8006fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc2:	9001      	str	r0, [sp, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8006fca:	bfb8      	it	lt
 8006fcc:	18e4      	addlt	r4, r4, r3
 8006fce:	f000 f8ef 	bl	80071b0 <__malloc_lock>
 8006fd2:	4a20      	ldr	r2, [pc, #128]	; (8007054 <_free_r+0x9c>)
 8006fd4:	9801      	ldr	r0, [sp, #4]
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	4615      	mov	r5, r2
 8006fda:	b933      	cbnz	r3, 8006fea <_free_r+0x32>
 8006fdc:	6063      	str	r3, [r4, #4]
 8006fde:	6014      	str	r4, [r2, #0]
 8006fe0:	b003      	add	sp, #12
 8006fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe6:	f000 b8e9 	b.w	80071bc <__malloc_unlock>
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	d90b      	bls.n	8007006 <_free_r+0x4e>
 8006fee:	6821      	ldr	r1, [r4, #0]
 8006ff0:	1862      	adds	r2, r4, r1
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bf04      	itt	eq
 8006ff6:	681a      	ldreq	r2, [r3, #0]
 8006ff8:	685b      	ldreq	r3, [r3, #4]
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	bf04      	itt	eq
 8006ffe:	1852      	addeq	r2, r2, r1
 8007000:	6022      	streq	r2, [r4, #0]
 8007002:	602c      	str	r4, [r5, #0]
 8007004:	e7ec      	b.n	8006fe0 <_free_r+0x28>
 8007006:	461a      	mov	r2, r3
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b10b      	cbz	r3, 8007010 <_free_r+0x58>
 800700c:	42a3      	cmp	r3, r4
 800700e:	d9fa      	bls.n	8007006 <_free_r+0x4e>
 8007010:	6811      	ldr	r1, [r2, #0]
 8007012:	1855      	adds	r5, r2, r1
 8007014:	42a5      	cmp	r5, r4
 8007016:	d10b      	bne.n	8007030 <_free_r+0x78>
 8007018:	6824      	ldr	r4, [r4, #0]
 800701a:	4421      	add	r1, r4
 800701c:	1854      	adds	r4, r2, r1
 800701e:	42a3      	cmp	r3, r4
 8007020:	6011      	str	r1, [r2, #0]
 8007022:	d1dd      	bne.n	8006fe0 <_free_r+0x28>
 8007024:	681c      	ldr	r4, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	6053      	str	r3, [r2, #4]
 800702a:	4421      	add	r1, r4
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	e7d7      	b.n	8006fe0 <_free_r+0x28>
 8007030:	d902      	bls.n	8007038 <_free_r+0x80>
 8007032:	230c      	movs	r3, #12
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	e7d3      	b.n	8006fe0 <_free_r+0x28>
 8007038:	6825      	ldr	r5, [r4, #0]
 800703a:	1961      	adds	r1, r4, r5
 800703c:	428b      	cmp	r3, r1
 800703e:	bf04      	itt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	6063      	str	r3, [r4, #4]
 8007046:	bf04      	itt	eq
 8007048:	1949      	addeq	r1, r1, r5
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	6054      	str	r4, [r2, #4]
 800704e:	e7c7      	b.n	8006fe0 <_free_r+0x28>
 8007050:	b003      	add	sp, #12
 8007052:	bd30      	pop	{r4, r5, pc}
 8007054:	20000210 	.word	0x20000210

08007058 <_malloc_r>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	1ccd      	adds	r5, r1, #3
 800705c:	f025 0503 	bic.w	r5, r5, #3
 8007060:	3508      	adds	r5, #8
 8007062:	2d0c      	cmp	r5, #12
 8007064:	bf38      	it	cc
 8007066:	250c      	movcc	r5, #12
 8007068:	2d00      	cmp	r5, #0
 800706a:	4606      	mov	r6, r0
 800706c:	db01      	blt.n	8007072 <_malloc_r+0x1a>
 800706e:	42a9      	cmp	r1, r5
 8007070:	d903      	bls.n	800707a <_malloc_r+0x22>
 8007072:	230c      	movs	r3, #12
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	2000      	movs	r0, #0
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707a:	f000 f899 	bl	80071b0 <__malloc_lock>
 800707e:	4921      	ldr	r1, [pc, #132]	; (8007104 <_malloc_r+0xac>)
 8007080:	680a      	ldr	r2, [r1, #0]
 8007082:	4614      	mov	r4, r2
 8007084:	b99c      	cbnz	r4, 80070ae <_malloc_r+0x56>
 8007086:	4f20      	ldr	r7, [pc, #128]	; (8007108 <_malloc_r+0xb0>)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	b923      	cbnz	r3, 8007096 <_malloc_r+0x3e>
 800708c:	4621      	mov	r1, r4
 800708e:	4630      	mov	r0, r6
 8007090:	f000 f83c 	bl	800710c <_sbrk_r>
 8007094:	6038      	str	r0, [r7, #0]
 8007096:	4629      	mov	r1, r5
 8007098:	4630      	mov	r0, r6
 800709a:	f000 f837 	bl	800710c <_sbrk_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	d123      	bne.n	80070ea <_malloc_r+0x92>
 80070a2:	230c      	movs	r3, #12
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	4630      	mov	r0, r6
 80070a8:	f000 f888 	bl	80071bc <__malloc_unlock>
 80070ac:	e7e3      	b.n	8007076 <_malloc_r+0x1e>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	1b5b      	subs	r3, r3, r5
 80070b2:	d417      	bmi.n	80070e4 <_malloc_r+0x8c>
 80070b4:	2b0b      	cmp	r3, #11
 80070b6:	d903      	bls.n	80070c0 <_malloc_r+0x68>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	441c      	add	r4, r3
 80070bc:	6025      	str	r5, [r4, #0]
 80070be:	e004      	b.n	80070ca <_malloc_r+0x72>
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	42a2      	cmp	r2, r4
 80070c4:	bf0c      	ite	eq
 80070c6:	600b      	streq	r3, [r1, #0]
 80070c8:	6053      	strne	r3, [r2, #4]
 80070ca:	4630      	mov	r0, r6
 80070cc:	f000 f876 	bl	80071bc <__malloc_unlock>
 80070d0:	f104 000b 	add.w	r0, r4, #11
 80070d4:	1d23      	adds	r3, r4, #4
 80070d6:	f020 0007 	bic.w	r0, r0, #7
 80070da:	1ac2      	subs	r2, r0, r3
 80070dc:	d0cc      	beq.n	8007078 <_malloc_r+0x20>
 80070de:	1a1b      	subs	r3, r3, r0
 80070e0:	50a3      	str	r3, [r4, r2]
 80070e2:	e7c9      	b.n	8007078 <_malloc_r+0x20>
 80070e4:	4622      	mov	r2, r4
 80070e6:	6864      	ldr	r4, [r4, #4]
 80070e8:	e7cc      	b.n	8007084 <_malloc_r+0x2c>
 80070ea:	1cc4      	adds	r4, r0, #3
 80070ec:	f024 0403 	bic.w	r4, r4, #3
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d0e3      	beq.n	80070bc <_malloc_r+0x64>
 80070f4:	1a21      	subs	r1, r4, r0
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f808 	bl	800710c <_sbrk_r>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d1dd      	bne.n	80070bc <_malloc_r+0x64>
 8007100:	e7cf      	b.n	80070a2 <_malloc_r+0x4a>
 8007102:	bf00      	nop
 8007104:	20000210 	.word	0x20000210
 8007108:	20000214 	.word	0x20000214

0800710c <_sbrk_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d06      	ldr	r5, [pc, #24]	; (8007128 <_sbrk_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fa fd0a 	bl	8001b30 <_sbrk>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_sbrk_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_sbrk_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000394 	.word	0x20000394

0800712c <__assert_func>:
 800712c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800712e:	4614      	mov	r4, r2
 8007130:	461a      	mov	r2, r3
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <__assert_func+0x2c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4605      	mov	r5, r0
 8007138:	68d8      	ldr	r0, [r3, #12]
 800713a:	b14c      	cbz	r4, 8007150 <__assert_func+0x24>
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <__assert_func+0x30>)
 800713e:	9100      	str	r1, [sp, #0]
 8007140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007144:	4906      	ldr	r1, [pc, #24]	; (8007160 <__assert_func+0x34>)
 8007146:	462b      	mov	r3, r5
 8007148:	f000 f80e 	bl	8007168 <fiprintf>
 800714c:	f000 fa64 	bl	8007618 <abort>
 8007150:	4b04      	ldr	r3, [pc, #16]	; (8007164 <__assert_func+0x38>)
 8007152:	461c      	mov	r4, r3
 8007154:	e7f3      	b.n	800713e <__assert_func+0x12>
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c
 800715c:	08007ed4 	.word	0x08007ed4
 8007160:	08007ee1 	.word	0x08007ee1
 8007164:	08007f0f 	.word	0x08007f0f

08007168 <fiprintf>:
 8007168:	b40e      	push	{r1, r2, r3}
 800716a:	b503      	push	{r0, r1, lr}
 800716c:	4601      	mov	r1, r0
 800716e:	ab03      	add	r3, sp, #12
 8007170:	4805      	ldr	r0, [pc, #20]	; (8007188 <fiprintf+0x20>)
 8007172:	f853 2b04 	ldr.w	r2, [r3], #4
 8007176:	6800      	ldr	r0, [r0, #0]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	f000 f84f 	bl	800721c <_vfiprintf_r>
 800717e:	b002      	add	sp, #8
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b003      	add	sp, #12
 8007186:	4770      	bx	lr
 8007188:	2000000c 	.word	0x2000000c

0800718c <__ascii_mbtowc>:
 800718c:	b082      	sub	sp, #8
 800718e:	b901      	cbnz	r1, 8007192 <__ascii_mbtowc+0x6>
 8007190:	a901      	add	r1, sp, #4
 8007192:	b142      	cbz	r2, 80071a6 <__ascii_mbtowc+0x1a>
 8007194:	b14b      	cbz	r3, 80071aa <__ascii_mbtowc+0x1e>
 8007196:	7813      	ldrb	r3, [r2, #0]
 8007198:	600b      	str	r3, [r1, #0]
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	1e10      	subs	r0, r2, #0
 800719e:	bf18      	it	ne
 80071a0:	2001      	movne	r0, #1
 80071a2:	b002      	add	sp, #8
 80071a4:	4770      	bx	lr
 80071a6:	4610      	mov	r0, r2
 80071a8:	e7fb      	b.n	80071a2 <__ascii_mbtowc+0x16>
 80071aa:	f06f 0001 	mvn.w	r0, #1
 80071ae:	e7f8      	b.n	80071a2 <__ascii_mbtowc+0x16>

080071b0 <__malloc_lock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__malloc_lock+0x8>)
 80071b2:	f000 bbf1 	b.w	8007998 <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	2000039c 	.word	0x2000039c

080071bc <__malloc_unlock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__malloc_unlock+0x8>)
 80071be:	f000 bbec 	b.w	800799a <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	2000039c 	.word	0x2000039c

080071c8 <__sfputc_r>:
 80071c8:	6893      	ldr	r3, [r2, #8]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	b410      	push	{r4}
 80071d0:	6093      	str	r3, [r2, #8]
 80071d2:	da08      	bge.n	80071e6 <__sfputc_r+0x1e>
 80071d4:	6994      	ldr	r4, [r2, #24]
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	db01      	blt.n	80071de <__sfputc_r+0x16>
 80071da:	290a      	cmp	r1, #10
 80071dc:	d103      	bne.n	80071e6 <__sfputc_r+0x1e>
 80071de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e2:	f000 b94b 	b.w	800747c <__swbuf_r>
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	1c58      	adds	r0, r3, #1
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	7019      	strb	r1, [r3, #0]
 80071ee:	4608      	mov	r0, r1
 80071f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <__sfputs_r>:
 80071f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f8:	4606      	mov	r6, r0
 80071fa:	460f      	mov	r7, r1
 80071fc:	4614      	mov	r4, r2
 80071fe:	18d5      	adds	r5, r2, r3
 8007200:	42ac      	cmp	r4, r5
 8007202:	d101      	bne.n	8007208 <__sfputs_r+0x12>
 8007204:	2000      	movs	r0, #0
 8007206:	e007      	b.n	8007218 <__sfputs_r+0x22>
 8007208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720c:	463a      	mov	r2, r7
 800720e:	4630      	mov	r0, r6
 8007210:	f7ff ffda 	bl	80071c8 <__sfputc_r>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d1f3      	bne.n	8007200 <__sfputs_r+0xa>
 8007218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800721c <_vfiprintf_r>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	460d      	mov	r5, r1
 8007222:	b09d      	sub	sp, #116	; 0x74
 8007224:	4614      	mov	r4, r2
 8007226:	4698      	mov	r8, r3
 8007228:	4606      	mov	r6, r0
 800722a:	b118      	cbz	r0, 8007234 <_vfiprintf_r+0x18>
 800722c:	6983      	ldr	r3, [r0, #24]
 800722e:	b90b      	cbnz	r3, 8007234 <_vfiprintf_r+0x18>
 8007230:	f000 fb14 	bl	800785c <__sinit>
 8007234:	4b89      	ldr	r3, [pc, #548]	; (800745c <_vfiprintf_r+0x240>)
 8007236:	429d      	cmp	r5, r3
 8007238:	d11b      	bne.n	8007272 <_vfiprintf_r+0x56>
 800723a:	6875      	ldr	r5, [r6, #4]
 800723c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800723e:	07d9      	lsls	r1, r3, #31
 8007240:	d405      	bmi.n	800724e <_vfiprintf_r+0x32>
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	059a      	lsls	r2, r3, #22
 8007246:	d402      	bmi.n	800724e <_vfiprintf_r+0x32>
 8007248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800724a:	f000 fba5 	bl	8007998 <__retarget_lock_acquire_recursive>
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	071b      	lsls	r3, r3, #28
 8007252:	d501      	bpl.n	8007258 <_vfiprintf_r+0x3c>
 8007254:	692b      	ldr	r3, [r5, #16]
 8007256:	b9eb      	cbnz	r3, 8007294 <_vfiprintf_r+0x78>
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f000 f96e 	bl	800753c <__swsetup_r>
 8007260:	b1c0      	cbz	r0, 8007294 <_vfiprintf_r+0x78>
 8007262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007264:	07dc      	lsls	r4, r3, #31
 8007266:	d50e      	bpl.n	8007286 <_vfiprintf_r+0x6a>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800726c:	b01d      	add	sp, #116	; 0x74
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	4b7b      	ldr	r3, [pc, #492]	; (8007460 <_vfiprintf_r+0x244>)
 8007274:	429d      	cmp	r5, r3
 8007276:	d101      	bne.n	800727c <_vfiprintf_r+0x60>
 8007278:	68b5      	ldr	r5, [r6, #8]
 800727a:	e7df      	b.n	800723c <_vfiprintf_r+0x20>
 800727c:	4b79      	ldr	r3, [pc, #484]	; (8007464 <_vfiprintf_r+0x248>)
 800727e:	429d      	cmp	r5, r3
 8007280:	bf08      	it	eq
 8007282:	68f5      	ldreq	r5, [r6, #12]
 8007284:	e7da      	b.n	800723c <_vfiprintf_r+0x20>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	0598      	lsls	r0, r3, #22
 800728a:	d4ed      	bmi.n	8007268 <_vfiprintf_r+0x4c>
 800728c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800728e:	f000 fb84 	bl	800799a <__retarget_lock_release_recursive>
 8007292:	e7e9      	b.n	8007268 <_vfiprintf_r+0x4c>
 8007294:	2300      	movs	r3, #0
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	2320      	movs	r3, #32
 800729a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800729e:	f8cd 800c 	str.w	r8, [sp, #12]
 80072a2:	2330      	movs	r3, #48	; 0x30
 80072a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007468 <_vfiprintf_r+0x24c>
 80072a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072ac:	f04f 0901 	mov.w	r9, #1
 80072b0:	4623      	mov	r3, r4
 80072b2:	469a      	mov	sl, r3
 80072b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b8:	b10a      	cbz	r2, 80072be <_vfiprintf_r+0xa2>
 80072ba:	2a25      	cmp	r2, #37	; 0x25
 80072bc:	d1f9      	bne.n	80072b2 <_vfiprintf_r+0x96>
 80072be:	ebba 0b04 	subs.w	fp, sl, r4
 80072c2:	d00b      	beq.n	80072dc <_vfiprintf_r+0xc0>
 80072c4:	465b      	mov	r3, fp
 80072c6:	4622      	mov	r2, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ff93 	bl	80071f6 <__sfputs_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	f000 80aa 	beq.w	800742a <_vfiprintf_r+0x20e>
 80072d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d8:	445a      	add	r2, fp
 80072da:	9209      	str	r2, [sp, #36]	; 0x24
 80072dc:	f89a 3000 	ldrb.w	r3, [sl]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80a2 	beq.w	800742a <_vfiprintf_r+0x20e>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f0:	f10a 0a01 	add.w	sl, sl, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	9307      	str	r3, [sp, #28]
 80072f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072fc:	931a      	str	r3, [sp, #104]	; 0x68
 80072fe:	4654      	mov	r4, sl
 8007300:	2205      	movs	r2, #5
 8007302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007306:	4858      	ldr	r0, [pc, #352]	; (8007468 <_vfiprintf_r+0x24c>)
 8007308:	f7f8 ff6a 	bl	80001e0 <memchr>
 800730c:	9a04      	ldr	r2, [sp, #16]
 800730e:	b9d8      	cbnz	r0, 8007348 <_vfiprintf_r+0x12c>
 8007310:	06d1      	lsls	r1, r2, #27
 8007312:	bf44      	itt	mi
 8007314:	2320      	movmi	r3, #32
 8007316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731a:	0713      	lsls	r3, r2, #28
 800731c:	bf44      	itt	mi
 800731e:	232b      	movmi	r3, #43	; 0x2b
 8007320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007324:	f89a 3000 	ldrb.w	r3, [sl]
 8007328:	2b2a      	cmp	r3, #42	; 0x2a
 800732a:	d015      	beq.n	8007358 <_vfiprintf_r+0x13c>
 800732c:	9a07      	ldr	r2, [sp, #28]
 800732e:	4654      	mov	r4, sl
 8007330:	2000      	movs	r0, #0
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	4621      	mov	r1, r4
 8007338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800733c:	3b30      	subs	r3, #48	; 0x30
 800733e:	2b09      	cmp	r3, #9
 8007340:	d94e      	bls.n	80073e0 <_vfiprintf_r+0x1c4>
 8007342:	b1b0      	cbz	r0, 8007372 <_vfiprintf_r+0x156>
 8007344:	9207      	str	r2, [sp, #28]
 8007346:	e014      	b.n	8007372 <_vfiprintf_r+0x156>
 8007348:	eba0 0308 	sub.w	r3, r0, r8
 800734c:	fa09 f303 	lsl.w	r3, r9, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	46a2      	mov	sl, r4
 8007356:	e7d2      	b.n	80072fe <_vfiprintf_r+0xe2>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	1d19      	adds	r1, r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	9103      	str	r1, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfbb      	ittet	lt
 8007364:	425b      	neglt	r3, r3
 8007366:	f042 0202 	orrlt.w	r2, r2, #2
 800736a:	9307      	strge	r3, [sp, #28]
 800736c:	9307      	strlt	r3, [sp, #28]
 800736e:	bfb8      	it	lt
 8007370:	9204      	strlt	r2, [sp, #16]
 8007372:	7823      	ldrb	r3, [r4, #0]
 8007374:	2b2e      	cmp	r3, #46	; 0x2e
 8007376:	d10c      	bne.n	8007392 <_vfiprintf_r+0x176>
 8007378:	7863      	ldrb	r3, [r4, #1]
 800737a:	2b2a      	cmp	r3, #42	; 0x2a
 800737c:	d135      	bne.n	80073ea <_vfiprintf_r+0x1ce>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	1d1a      	adds	r2, r3, #4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	9203      	str	r2, [sp, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfb8      	it	lt
 800738a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800738e:	3402      	adds	r4, #2
 8007390:	9305      	str	r3, [sp, #20]
 8007392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007478 <_vfiprintf_r+0x25c>
 8007396:	7821      	ldrb	r1, [r4, #0]
 8007398:	2203      	movs	r2, #3
 800739a:	4650      	mov	r0, sl
 800739c:	f7f8 ff20 	bl	80001e0 <memchr>
 80073a0:	b140      	cbz	r0, 80073b4 <_vfiprintf_r+0x198>
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	eba0 000a 	sub.w	r0, r0, sl
 80073a8:	fa03 f000 	lsl.w	r0, r3, r0
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	4303      	orrs	r3, r0
 80073b0:	3401      	adds	r4, #1
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b8:	482c      	ldr	r0, [pc, #176]	; (800746c <_vfiprintf_r+0x250>)
 80073ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073be:	2206      	movs	r2, #6
 80073c0:	f7f8 ff0e 	bl	80001e0 <memchr>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d03f      	beq.n	8007448 <_vfiprintf_r+0x22c>
 80073c8:	4b29      	ldr	r3, [pc, #164]	; (8007470 <_vfiprintf_r+0x254>)
 80073ca:	bb1b      	cbnz	r3, 8007414 <_vfiprintf_r+0x1f8>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	3307      	adds	r3, #7
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	3308      	adds	r3, #8
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073da:	443b      	add	r3, r7
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	e767      	b.n	80072b0 <_vfiprintf_r+0x94>
 80073e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073e4:	460c      	mov	r4, r1
 80073e6:	2001      	movs	r0, #1
 80073e8:	e7a5      	b.n	8007336 <_vfiprintf_r+0x11a>
 80073ea:	2300      	movs	r3, #0
 80073ec:	3401      	adds	r4, #1
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	4619      	mov	r1, r3
 80073f2:	f04f 0c0a 	mov.w	ip, #10
 80073f6:	4620      	mov	r0, r4
 80073f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073fc:	3a30      	subs	r2, #48	; 0x30
 80073fe:	2a09      	cmp	r2, #9
 8007400:	d903      	bls.n	800740a <_vfiprintf_r+0x1ee>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0c5      	beq.n	8007392 <_vfiprintf_r+0x176>
 8007406:	9105      	str	r1, [sp, #20]
 8007408:	e7c3      	b.n	8007392 <_vfiprintf_r+0x176>
 800740a:	fb0c 2101 	mla	r1, ip, r1, r2
 800740e:	4604      	mov	r4, r0
 8007410:	2301      	movs	r3, #1
 8007412:	e7f0      	b.n	80073f6 <_vfiprintf_r+0x1da>
 8007414:	ab03      	add	r3, sp, #12
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462a      	mov	r2, r5
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <_vfiprintf_r+0x258>)
 800741c:	a904      	add	r1, sp, #16
 800741e:	4630      	mov	r0, r6
 8007420:	f7fd ffde 	bl	80053e0 <_printf_float>
 8007424:	4607      	mov	r7, r0
 8007426:	1c78      	adds	r0, r7, #1
 8007428:	d1d6      	bne.n	80073d8 <_vfiprintf_r+0x1bc>
 800742a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d405      	bmi.n	800743c <_vfiprintf_r+0x220>
 8007430:	89ab      	ldrh	r3, [r5, #12]
 8007432:	059a      	lsls	r2, r3, #22
 8007434:	d402      	bmi.n	800743c <_vfiprintf_r+0x220>
 8007436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007438:	f000 faaf 	bl	800799a <__retarget_lock_release_recursive>
 800743c:	89ab      	ldrh	r3, [r5, #12]
 800743e:	065b      	lsls	r3, r3, #25
 8007440:	f53f af12 	bmi.w	8007268 <_vfiprintf_r+0x4c>
 8007444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007446:	e711      	b.n	800726c <_vfiprintf_r+0x50>
 8007448:	ab03      	add	r3, sp, #12
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	462a      	mov	r2, r5
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <_vfiprintf_r+0x258>)
 8007450:	a904      	add	r1, sp, #16
 8007452:	4630      	mov	r0, r6
 8007454:	f7fe fa68 	bl	8005928 <_printf_i>
 8007458:	e7e4      	b.n	8007424 <_vfiprintf_r+0x208>
 800745a:	bf00      	nop
 800745c:	0800804c 	.word	0x0800804c
 8007460:	0800806c 	.word	0x0800806c
 8007464:	0800802c 	.word	0x0800802c
 8007468:	08007f1a 	.word	0x08007f1a
 800746c:	08007f24 	.word	0x08007f24
 8007470:	080053e1 	.word	0x080053e1
 8007474:	080071f7 	.word	0x080071f7
 8007478:	08007f20 	.word	0x08007f20

0800747c <__swbuf_r>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	460e      	mov	r6, r1
 8007480:	4614      	mov	r4, r2
 8007482:	4605      	mov	r5, r0
 8007484:	b118      	cbz	r0, 800748e <__swbuf_r+0x12>
 8007486:	6983      	ldr	r3, [r0, #24]
 8007488:	b90b      	cbnz	r3, 800748e <__swbuf_r+0x12>
 800748a:	f000 f9e7 	bl	800785c <__sinit>
 800748e:	4b21      	ldr	r3, [pc, #132]	; (8007514 <__swbuf_r+0x98>)
 8007490:	429c      	cmp	r4, r3
 8007492:	d12b      	bne.n	80074ec <__swbuf_r+0x70>
 8007494:	686c      	ldr	r4, [r5, #4]
 8007496:	69a3      	ldr	r3, [r4, #24]
 8007498:	60a3      	str	r3, [r4, #8]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	071a      	lsls	r2, r3, #28
 800749e:	d52f      	bpl.n	8007500 <__swbuf_r+0x84>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	b36b      	cbz	r3, 8007500 <__swbuf_r+0x84>
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	1ac0      	subs	r0, r0, r3
 80074aa:	6963      	ldr	r3, [r4, #20]
 80074ac:	b2f6      	uxtb	r6, r6
 80074ae:	4283      	cmp	r3, r0
 80074b0:	4637      	mov	r7, r6
 80074b2:	dc04      	bgt.n	80074be <__swbuf_r+0x42>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f93c 	bl	8007734 <_fflush_r>
 80074bc:	bb30      	cbnz	r0, 800750c <__swbuf_r+0x90>
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	60a3      	str	r3, [r4, #8]
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	6022      	str	r2, [r4, #0]
 80074ca:	701e      	strb	r6, [r3, #0]
 80074cc:	6963      	ldr	r3, [r4, #20]
 80074ce:	3001      	adds	r0, #1
 80074d0:	4283      	cmp	r3, r0
 80074d2:	d004      	beq.n	80074de <__swbuf_r+0x62>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	07db      	lsls	r3, r3, #31
 80074d8:	d506      	bpl.n	80074e8 <__swbuf_r+0x6c>
 80074da:	2e0a      	cmp	r6, #10
 80074dc:	d104      	bne.n	80074e8 <__swbuf_r+0x6c>
 80074de:	4621      	mov	r1, r4
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 f927 	bl	8007734 <_fflush_r>
 80074e6:	b988      	cbnz	r0, 800750c <__swbuf_r+0x90>
 80074e8:	4638      	mov	r0, r7
 80074ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <__swbuf_r+0x9c>)
 80074ee:	429c      	cmp	r4, r3
 80074f0:	d101      	bne.n	80074f6 <__swbuf_r+0x7a>
 80074f2:	68ac      	ldr	r4, [r5, #8]
 80074f4:	e7cf      	b.n	8007496 <__swbuf_r+0x1a>
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <__swbuf_r+0xa0>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	bf08      	it	eq
 80074fc:	68ec      	ldreq	r4, [r5, #12]
 80074fe:	e7ca      	b.n	8007496 <__swbuf_r+0x1a>
 8007500:	4621      	mov	r1, r4
 8007502:	4628      	mov	r0, r5
 8007504:	f000 f81a 	bl	800753c <__swsetup_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	d0cb      	beq.n	80074a4 <__swbuf_r+0x28>
 800750c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007510:	e7ea      	b.n	80074e8 <__swbuf_r+0x6c>
 8007512:	bf00      	nop
 8007514:	0800804c 	.word	0x0800804c
 8007518:	0800806c 	.word	0x0800806c
 800751c:	0800802c 	.word	0x0800802c

08007520 <__ascii_wctomb>:
 8007520:	b149      	cbz	r1, 8007536 <__ascii_wctomb+0x16>
 8007522:	2aff      	cmp	r2, #255	; 0xff
 8007524:	bf85      	ittet	hi
 8007526:	238a      	movhi	r3, #138	; 0x8a
 8007528:	6003      	strhi	r3, [r0, #0]
 800752a:	700a      	strbls	r2, [r1, #0]
 800752c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007530:	bf98      	it	ls
 8007532:	2001      	movls	r0, #1
 8007534:	4770      	bx	lr
 8007536:	4608      	mov	r0, r1
 8007538:	4770      	bx	lr
	...

0800753c <__swsetup_r>:
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <__swsetup_r+0xcc>)
 800753e:	b570      	push	{r4, r5, r6, lr}
 8007540:	681d      	ldr	r5, [r3, #0]
 8007542:	4606      	mov	r6, r0
 8007544:	460c      	mov	r4, r1
 8007546:	b125      	cbz	r5, 8007552 <__swsetup_r+0x16>
 8007548:	69ab      	ldr	r3, [r5, #24]
 800754a:	b913      	cbnz	r3, 8007552 <__swsetup_r+0x16>
 800754c:	4628      	mov	r0, r5
 800754e:	f000 f985 	bl	800785c <__sinit>
 8007552:	4b2e      	ldr	r3, [pc, #184]	; (800760c <__swsetup_r+0xd0>)
 8007554:	429c      	cmp	r4, r3
 8007556:	d10f      	bne.n	8007578 <__swsetup_r+0x3c>
 8007558:	686c      	ldr	r4, [r5, #4]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007560:	0719      	lsls	r1, r3, #28
 8007562:	d42c      	bmi.n	80075be <__swsetup_r+0x82>
 8007564:	06dd      	lsls	r5, r3, #27
 8007566:	d411      	bmi.n	800758c <__swsetup_r+0x50>
 8007568:	2309      	movs	r3, #9
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007576:	e03e      	b.n	80075f6 <__swsetup_r+0xba>
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <__swsetup_r+0xd4>)
 800757a:	429c      	cmp	r4, r3
 800757c:	d101      	bne.n	8007582 <__swsetup_r+0x46>
 800757e:	68ac      	ldr	r4, [r5, #8]
 8007580:	e7eb      	b.n	800755a <__swsetup_r+0x1e>
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <__swsetup_r+0xd8>)
 8007584:	429c      	cmp	r4, r3
 8007586:	bf08      	it	eq
 8007588:	68ec      	ldreq	r4, [r5, #12]
 800758a:	e7e6      	b.n	800755a <__swsetup_r+0x1e>
 800758c:	0758      	lsls	r0, r3, #29
 800758e:	d512      	bpl.n	80075b6 <__swsetup_r+0x7a>
 8007590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007592:	b141      	cbz	r1, 80075a6 <__swsetup_r+0x6a>
 8007594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007598:	4299      	cmp	r1, r3
 800759a:	d002      	beq.n	80075a2 <__swsetup_r+0x66>
 800759c:	4630      	mov	r0, r6
 800759e:	f7ff fd0b 	bl	8006fb8 <_free_r>
 80075a2:	2300      	movs	r3, #0
 80075a4:	6363      	str	r3, [r4, #52]	; 0x34
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	2300      	movs	r3, #0
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f043 0308 	orr.w	r3, r3, #8
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	b94b      	cbnz	r3, 80075d6 <__swsetup_r+0x9a>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075cc:	d003      	beq.n	80075d6 <__swsetup_r+0x9a>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 fa07 	bl	80079e4 <__smakebuf_r>
 80075d6:	89a0      	ldrh	r0, [r4, #12]
 80075d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075dc:	f010 0301 	ands.w	r3, r0, #1
 80075e0:	d00a      	beq.n	80075f8 <__swsetup_r+0xbc>
 80075e2:	2300      	movs	r3, #0
 80075e4:	60a3      	str	r3, [r4, #8]
 80075e6:	6963      	ldr	r3, [r4, #20]
 80075e8:	425b      	negs	r3, r3
 80075ea:	61a3      	str	r3, [r4, #24]
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	b943      	cbnz	r3, 8007602 <__swsetup_r+0xc6>
 80075f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075f4:	d1ba      	bne.n	800756c <__swsetup_r+0x30>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	0781      	lsls	r1, r0, #30
 80075fa:	bf58      	it	pl
 80075fc:	6963      	ldrpl	r3, [r4, #20]
 80075fe:	60a3      	str	r3, [r4, #8]
 8007600:	e7f4      	b.n	80075ec <__swsetup_r+0xb0>
 8007602:	2000      	movs	r0, #0
 8007604:	e7f7      	b.n	80075f6 <__swsetup_r+0xba>
 8007606:	bf00      	nop
 8007608:	2000000c 	.word	0x2000000c
 800760c:	0800804c 	.word	0x0800804c
 8007610:	0800806c 	.word	0x0800806c
 8007614:	0800802c 	.word	0x0800802c

08007618 <abort>:
 8007618:	b508      	push	{r3, lr}
 800761a:	2006      	movs	r0, #6
 800761c:	f000 fa4a 	bl	8007ab4 <raise>
 8007620:	2001      	movs	r0, #1
 8007622:	f7fa fa0d 	bl	8001a40 <_exit>
	...

08007628 <__sflush_r>:
 8007628:	898a      	ldrh	r2, [r1, #12]
 800762a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	4605      	mov	r5, r0
 8007630:	0710      	lsls	r0, r2, #28
 8007632:	460c      	mov	r4, r1
 8007634:	d458      	bmi.n	80076e8 <__sflush_r+0xc0>
 8007636:	684b      	ldr	r3, [r1, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	dc05      	bgt.n	8007648 <__sflush_r+0x20>
 800763c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	dc02      	bgt.n	8007648 <__sflush_r+0x20>
 8007642:	2000      	movs	r0, #0
 8007644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764a:	2e00      	cmp	r6, #0
 800764c:	d0f9      	beq.n	8007642 <__sflush_r+0x1a>
 800764e:	2300      	movs	r3, #0
 8007650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007654:	682f      	ldr	r7, [r5, #0]
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	d032      	beq.n	80076c0 <__sflush_r+0x98>
 800765a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	075a      	lsls	r2, r3, #29
 8007660:	d505      	bpl.n	800766e <__sflush_r+0x46>
 8007662:	6863      	ldr	r3, [r4, #4]
 8007664:	1ac0      	subs	r0, r0, r3
 8007666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007668:	b10b      	cbz	r3, 800766e <__sflush_r+0x46>
 800766a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800766c:	1ac0      	subs	r0, r0, r3
 800766e:	2300      	movs	r3, #0
 8007670:	4602      	mov	r2, r0
 8007672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	4628      	mov	r0, r5
 8007678:	47b0      	blx	r6
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	d106      	bne.n	800768e <__sflush_r+0x66>
 8007680:	6829      	ldr	r1, [r5, #0]
 8007682:	291d      	cmp	r1, #29
 8007684:	d82c      	bhi.n	80076e0 <__sflush_r+0xb8>
 8007686:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <__sflush_r+0x108>)
 8007688:	40ca      	lsrs	r2, r1
 800768a:	07d6      	lsls	r6, r2, #31
 800768c:	d528      	bpl.n	80076e0 <__sflush_r+0xb8>
 800768e:	2200      	movs	r2, #0
 8007690:	6062      	str	r2, [r4, #4]
 8007692:	04d9      	lsls	r1, r3, #19
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	d504      	bpl.n	80076a4 <__sflush_r+0x7c>
 800769a:	1c42      	adds	r2, r0, #1
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0x7a>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b903      	cbnz	r3, 80076a4 <__sflush_r+0x7c>
 80076a2:	6560      	str	r0, [r4, #84]	; 0x54
 80076a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d0ca      	beq.n	8007642 <__sflush_r+0x1a>
 80076ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076b0:	4299      	cmp	r1, r3
 80076b2:	d002      	beq.n	80076ba <__sflush_r+0x92>
 80076b4:	4628      	mov	r0, r5
 80076b6:	f7ff fc7f 	bl	8006fb8 <_free_r>
 80076ba:	2000      	movs	r0, #0
 80076bc:	6360      	str	r0, [r4, #52]	; 0x34
 80076be:	e7c1      	b.n	8007644 <__sflush_r+0x1c>
 80076c0:	6a21      	ldr	r1, [r4, #32]
 80076c2:	2301      	movs	r3, #1
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b0      	blx	r6
 80076c8:	1c41      	adds	r1, r0, #1
 80076ca:	d1c7      	bne.n	800765c <__sflush_r+0x34>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0c4      	beq.n	800765c <__sflush_r+0x34>
 80076d2:	2b1d      	cmp	r3, #29
 80076d4:	d001      	beq.n	80076da <__sflush_r+0xb2>
 80076d6:	2b16      	cmp	r3, #22
 80076d8:	d101      	bne.n	80076de <__sflush_r+0xb6>
 80076da:	602f      	str	r7, [r5, #0]
 80076dc:	e7b1      	b.n	8007642 <__sflush_r+0x1a>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e7ad      	b.n	8007644 <__sflush_r+0x1c>
 80076e8:	690f      	ldr	r7, [r1, #16]
 80076ea:	2f00      	cmp	r7, #0
 80076ec:	d0a9      	beq.n	8007642 <__sflush_r+0x1a>
 80076ee:	0793      	lsls	r3, r2, #30
 80076f0:	680e      	ldr	r6, [r1, #0]
 80076f2:	bf08      	it	eq
 80076f4:	694b      	ldreq	r3, [r1, #20]
 80076f6:	600f      	str	r7, [r1, #0]
 80076f8:	bf18      	it	ne
 80076fa:	2300      	movne	r3, #0
 80076fc:	eba6 0807 	sub.w	r8, r6, r7
 8007700:	608b      	str	r3, [r1, #8]
 8007702:	f1b8 0f00 	cmp.w	r8, #0
 8007706:	dd9c      	ble.n	8007642 <__sflush_r+0x1a>
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800770c:	4643      	mov	r3, r8
 800770e:	463a      	mov	r2, r7
 8007710:	4628      	mov	r0, r5
 8007712:	47b0      	blx	r6
 8007714:	2800      	cmp	r0, #0
 8007716:	dc06      	bgt.n	8007726 <__sflush_r+0xfe>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007724:	e78e      	b.n	8007644 <__sflush_r+0x1c>
 8007726:	4407      	add	r7, r0
 8007728:	eba8 0800 	sub.w	r8, r8, r0
 800772c:	e7e9      	b.n	8007702 <__sflush_r+0xda>
 800772e:	bf00      	nop
 8007730:	20400001 	.word	0x20400001

08007734 <_fflush_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	4605      	mov	r5, r0
 800773a:	460c      	mov	r4, r1
 800773c:	b913      	cbnz	r3, 8007744 <_fflush_r+0x10>
 800773e:	2500      	movs	r5, #0
 8007740:	4628      	mov	r0, r5
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	b118      	cbz	r0, 800774e <_fflush_r+0x1a>
 8007746:	6983      	ldr	r3, [r0, #24]
 8007748:	b90b      	cbnz	r3, 800774e <_fflush_r+0x1a>
 800774a:	f000 f887 	bl	800785c <__sinit>
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <_fflush_r+0x6c>)
 8007750:	429c      	cmp	r4, r3
 8007752:	d11b      	bne.n	800778c <_fflush_r+0x58>
 8007754:	686c      	ldr	r4, [r5, #4]
 8007756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0ef      	beq.n	800773e <_fflush_r+0xa>
 800775e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007760:	07d0      	lsls	r0, r2, #31
 8007762:	d404      	bmi.n	800776e <_fflush_r+0x3a>
 8007764:	0599      	lsls	r1, r3, #22
 8007766:	d402      	bmi.n	800776e <_fflush_r+0x3a>
 8007768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776a:	f000 f915 	bl	8007998 <__retarget_lock_acquire_recursive>
 800776e:	4628      	mov	r0, r5
 8007770:	4621      	mov	r1, r4
 8007772:	f7ff ff59 	bl	8007628 <__sflush_r>
 8007776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007778:	07da      	lsls	r2, r3, #31
 800777a:	4605      	mov	r5, r0
 800777c:	d4e0      	bmi.n	8007740 <_fflush_r+0xc>
 800777e:	89a3      	ldrh	r3, [r4, #12]
 8007780:	059b      	lsls	r3, r3, #22
 8007782:	d4dd      	bmi.n	8007740 <_fflush_r+0xc>
 8007784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007786:	f000 f908 	bl	800799a <__retarget_lock_release_recursive>
 800778a:	e7d9      	b.n	8007740 <_fflush_r+0xc>
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <_fflush_r+0x70>)
 800778e:	429c      	cmp	r4, r3
 8007790:	d101      	bne.n	8007796 <_fflush_r+0x62>
 8007792:	68ac      	ldr	r4, [r5, #8]
 8007794:	e7df      	b.n	8007756 <_fflush_r+0x22>
 8007796:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <_fflush_r+0x74>)
 8007798:	429c      	cmp	r4, r3
 800779a:	bf08      	it	eq
 800779c:	68ec      	ldreq	r4, [r5, #12]
 800779e:	e7da      	b.n	8007756 <_fflush_r+0x22>
 80077a0:	0800804c 	.word	0x0800804c
 80077a4:	0800806c 	.word	0x0800806c
 80077a8:	0800802c 	.word	0x0800802c

080077ac <std>:
 80077ac:	2300      	movs	r3, #0
 80077ae:	b510      	push	{r4, lr}
 80077b0:	4604      	mov	r4, r0
 80077b2:	e9c0 3300 	strd	r3, r3, [r0]
 80077b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ba:	6083      	str	r3, [r0, #8]
 80077bc:	8181      	strh	r1, [r0, #12]
 80077be:	6643      	str	r3, [r0, #100]	; 0x64
 80077c0:	81c2      	strh	r2, [r0, #14]
 80077c2:	6183      	str	r3, [r0, #24]
 80077c4:	4619      	mov	r1, r3
 80077c6:	2208      	movs	r2, #8
 80077c8:	305c      	adds	r0, #92	; 0x5c
 80077ca:	f7fd fd61 	bl	8005290 <memset>
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <std+0x38>)
 80077d0:	6263      	str	r3, [r4, #36]	; 0x24
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <std+0x3c>)
 80077d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80077d6:	4b05      	ldr	r3, [pc, #20]	; (80077ec <std+0x40>)
 80077d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <std+0x44>)
 80077dc:	6224      	str	r4, [r4, #32]
 80077de:	6323      	str	r3, [r4, #48]	; 0x30
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	08007aed 	.word	0x08007aed
 80077e8:	08007b0f 	.word	0x08007b0f
 80077ec:	08007b47 	.word	0x08007b47
 80077f0:	08007b6b 	.word	0x08007b6b

080077f4 <_cleanup_r>:
 80077f4:	4901      	ldr	r1, [pc, #4]	; (80077fc <_cleanup_r+0x8>)
 80077f6:	f000 b8af 	b.w	8007958 <_fwalk_reent>
 80077fa:	bf00      	nop
 80077fc:	08007735 	.word	0x08007735

08007800 <__sfmoreglue>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	1e4a      	subs	r2, r1, #1
 8007804:	2568      	movs	r5, #104	; 0x68
 8007806:	4355      	muls	r5, r2
 8007808:	460e      	mov	r6, r1
 800780a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800780e:	f7ff fc23 	bl	8007058 <_malloc_r>
 8007812:	4604      	mov	r4, r0
 8007814:	b140      	cbz	r0, 8007828 <__sfmoreglue+0x28>
 8007816:	2100      	movs	r1, #0
 8007818:	e9c0 1600 	strd	r1, r6, [r0]
 800781c:	300c      	adds	r0, #12
 800781e:	60a0      	str	r0, [r4, #8]
 8007820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007824:	f7fd fd34 	bl	8005290 <memset>
 8007828:	4620      	mov	r0, r4
 800782a:	bd70      	pop	{r4, r5, r6, pc}

0800782c <__sfp_lock_acquire>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sfp_lock_acquire+0x8>)
 800782e:	f000 b8b3 	b.w	8007998 <__retarget_lock_acquire_recursive>
 8007832:	bf00      	nop
 8007834:	200003a0 	.word	0x200003a0

08007838 <__sfp_lock_release>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__sfp_lock_release+0x8>)
 800783a:	f000 b8ae 	b.w	800799a <__retarget_lock_release_recursive>
 800783e:	bf00      	nop
 8007840:	200003a0 	.word	0x200003a0

08007844 <__sinit_lock_acquire>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__sinit_lock_acquire+0x8>)
 8007846:	f000 b8a7 	b.w	8007998 <__retarget_lock_acquire_recursive>
 800784a:	bf00      	nop
 800784c:	2000039b 	.word	0x2000039b

08007850 <__sinit_lock_release>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__sinit_lock_release+0x8>)
 8007852:	f000 b8a2 	b.w	800799a <__retarget_lock_release_recursive>
 8007856:	bf00      	nop
 8007858:	2000039b 	.word	0x2000039b

0800785c <__sinit>:
 800785c:	b510      	push	{r4, lr}
 800785e:	4604      	mov	r4, r0
 8007860:	f7ff fff0 	bl	8007844 <__sinit_lock_acquire>
 8007864:	69a3      	ldr	r3, [r4, #24]
 8007866:	b11b      	cbz	r3, 8007870 <__sinit+0x14>
 8007868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800786c:	f7ff bff0 	b.w	8007850 <__sinit_lock_release>
 8007870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007874:	6523      	str	r3, [r4, #80]	; 0x50
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <__sinit+0x68>)
 8007878:	4a13      	ldr	r2, [pc, #76]	; (80078c8 <__sinit+0x6c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	62a2      	str	r2, [r4, #40]	; 0x28
 800787e:	42a3      	cmp	r3, r4
 8007880:	bf04      	itt	eq
 8007882:	2301      	moveq	r3, #1
 8007884:	61a3      	streq	r3, [r4, #24]
 8007886:	4620      	mov	r0, r4
 8007888:	f000 f820 	bl	80078cc <__sfp>
 800788c:	6060      	str	r0, [r4, #4]
 800788e:	4620      	mov	r0, r4
 8007890:	f000 f81c 	bl	80078cc <__sfp>
 8007894:	60a0      	str	r0, [r4, #8]
 8007896:	4620      	mov	r0, r4
 8007898:	f000 f818 	bl	80078cc <__sfp>
 800789c:	2200      	movs	r2, #0
 800789e:	60e0      	str	r0, [r4, #12]
 80078a0:	2104      	movs	r1, #4
 80078a2:	6860      	ldr	r0, [r4, #4]
 80078a4:	f7ff ff82 	bl	80077ac <std>
 80078a8:	68a0      	ldr	r0, [r4, #8]
 80078aa:	2201      	movs	r2, #1
 80078ac:	2109      	movs	r1, #9
 80078ae:	f7ff ff7d 	bl	80077ac <std>
 80078b2:	68e0      	ldr	r0, [r4, #12]
 80078b4:	2202      	movs	r2, #2
 80078b6:	2112      	movs	r1, #18
 80078b8:	f7ff ff78 	bl	80077ac <std>
 80078bc:	2301      	movs	r3, #1
 80078be:	61a3      	str	r3, [r4, #24]
 80078c0:	e7d2      	b.n	8007868 <__sinit+0xc>
 80078c2:	bf00      	nop
 80078c4:	08007ca8 	.word	0x08007ca8
 80078c8:	080077f5 	.word	0x080077f5

080078cc <__sfp>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	4607      	mov	r7, r0
 80078d0:	f7ff ffac 	bl	800782c <__sfp_lock_acquire>
 80078d4:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <__sfp+0x84>)
 80078d6:	681e      	ldr	r6, [r3, #0]
 80078d8:	69b3      	ldr	r3, [r6, #24]
 80078da:	b913      	cbnz	r3, 80078e2 <__sfp+0x16>
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff ffbd 	bl	800785c <__sinit>
 80078e2:	3648      	adds	r6, #72	; 0x48
 80078e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	d503      	bpl.n	80078f4 <__sfp+0x28>
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	b30b      	cbz	r3, 8007934 <__sfp+0x68>
 80078f0:	6836      	ldr	r6, [r6, #0]
 80078f2:	e7f7      	b.n	80078e4 <__sfp+0x18>
 80078f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078f8:	b9d5      	cbnz	r5, 8007930 <__sfp+0x64>
 80078fa:	4b16      	ldr	r3, [pc, #88]	; (8007954 <__sfp+0x88>)
 80078fc:	60e3      	str	r3, [r4, #12]
 80078fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007902:	6665      	str	r5, [r4, #100]	; 0x64
 8007904:	f000 f847 	bl	8007996 <__retarget_lock_init_recursive>
 8007908:	f7ff ff96 	bl	8007838 <__sfp_lock_release>
 800790c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007914:	6025      	str	r5, [r4, #0]
 8007916:	61a5      	str	r5, [r4, #24]
 8007918:	2208      	movs	r2, #8
 800791a:	4629      	mov	r1, r5
 800791c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007920:	f7fd fcb6 	bl	8005290 <memset>
 8007924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800792c:	4620      	mov	r0, r4
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007930:	3468      	adds	r4, #104	; 0x68
 8007932:	e7d9      	b.n	80078e8 <__sfp+0x1c>
 8007934:	2104      	movs	r1, #4
 8007936:	4638      	mov	r0, r7
 8007938:	f7ff ff62 	bl	8007800 <__sfmoreglue>
 800793c:	4604      	mov	r4, r0
 800793e:	6030      	str	r0, [r6, #0]
 8007940:	2800      	cmp	r0, #0
 8007942:	d1d5      	bne.n	80078f0 <__sfp+0x24>
 8007944:	f7ff ff78 	bl	8007838 <__sfp_lock_release>
 8007948:	230c      	movs	r3, #12
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	e7ee      	b.n	800792c <__sfp+0x60>
 800794e:	bf00      	nop
 8007950:	08007ca8 	.word	0x08007ca8
 8007954:	ffff0001 	.word	0xffff0001

08007958 <_fwalk_reent>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	4606      	mov	r6, r0
 800795e:	4688      	mov	r8, r1
 8007960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007964:	2700      	movs	r7, #0
 8007966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800796a:	f1b9 0901 	subs.w	r9, r9, #1
 800796e:	d505      	bpl.n	800797c <_fwalk_reent+0x24>
 8007970:	6824      	ldr	r4, [r4, #0]
 8007972:	2c00      	cmp	r4, #0
 8007974:	d1f7      	bne.n	8007966 <_fwalk_reent+0xe>
 8007976:	4638      	mov	r0, r7
 8007978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797c:	89ab      	ldrh	r3, [r5, #12]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d907      	bls.n	8007992 <_fwalk_reent+0x3a>
 8007982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007986:	3301      	adds	r3, #1
 8007988:	d003      	beq.n	8007992 <_fwalk_reent+0x3a>
 800798a:	4629      	mov	r1, r5
 800798c:	4630      	mov	r0, r6
 800798e:	47c0      	blx	r8
 8007990:	4307      	orrs	r7, r0
 8007992:	3568      	adds	r5, #104	; 0x68
 8007994:	e7e9      	b.n	800796a <_fwalk_reent+0x12>

08007996 <__retarget_lock_init_recursive>:
 8007996:	4770      	bx	lr

08007998 <__retarget_lock_acquire_recursive>:
 8007998:	4770      	bx	lr

0800799a <__retarget_lock_release_recursive>:
 800799a:	4770      	bx	lr

0800799c <__swhatbuf_r>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	460e      	mov	r6, r1
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	2900      	cmp	r1, #0
 80079a6:	b096      	sub	sp, #88	; 0x58
 80079a8:	4614      	mov	r4, r2
 80079aa:	461d      	mov	r5, r3
 80079ac:	da07      	bge.n	80079be <__swhatbuf_r+0x22>
 80079ae:	2300      	movs	r3, #0
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	89b3      	ldrh	r3, [r6, #12]
 80079b4:	061a      	lsls	r2, r3, #24
 80079b6:	d410      	bmi.n	80079da <__swhatbuf_r+0x3e>
 80079b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079bc:	e00e      	b.n	80079dc <__swhatbuf_r+0x40>
 80079be:	466a      	mov	r2, sp
 80079c0:	f000 f8fa 	bl	8007bb8 <_fstat_r>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	dbf2      	blt.n	80079ae <__swhatbuf_r+0x12>
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079d2:	425a      	negs	r2, r3
 80079d4:	415a      	adcs	r2, r3
 80079d6:	602a      	str	r2, [r5, #0]
 80079d8:	e7ee      	b.n	80079b8 <__swhatbuf_r+0x1c>
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	2000      	movs	r0, #0
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	b016      	add	sp, #88	; 0x58
 80079e2:	bd70      	pop	{r4, r5, r6, pc}

080079e4 <__smakebuf_r>:
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079e8:	079d      	lsls	r5, r3, #30
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	d507      	bpl.n	8007a00 <__smakebuf_r+0x1c>
 80079f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	6123      	str	r3, [r4, #16]
 80079f8:	2301      	movs	r3, #1
 80079fa:	6163      	str	r3, [r4, #20]
 80079fc:	b002      	add	sp, #8
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	ab01      	add	r3, sp, #4
 8007a02:	466a      	mov	r2, sp
 8007a04:	f7ff ffca 	bl	800799c <__swhatbuf_r>
 8007a08:	9900      	ldr	r1, [sp, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fb23 	bl	8007058 <_malloc_r>
 8007a12:	b948      	cbnz	r0, 8007a28 <__smakebuf_r+0x44>
 8007a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d4ef      	bmi.n	80079fc <__smakebuf_r+0x18>
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	f043 0302 	orr.w	r3, r3, #2
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	e7e3      	b.n	80079f0 <__smakebuf_r+0xc>
 8007a28:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <__smakebuf_r+0x7c>)
 8007a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	6163      	str	r3, [r4, #20]
 8007a3a:	9b01      	ldr	r3, [sp, #4]
 8007a3c:	6120      	str	r0, [r4, #16]
 8007a3e:	b15b      	cbz	r3, 8007a58 <__smakebuf_r+0x74>
 8007a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a44:	4630      	mov	r0, r6
 8007a46:	f000 f8c9 	bl	8007bdc <_isatty_r>
 8007a4a:	b128      	cbz	r0, 8007a58 <__smakebuf_r+0x74>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	89a0      	ldrh	r0, [r4, #12]
 8007a5a:	4305      	orrs	r5, r0
 8007a5c:	81a5      	strh	r5, [r4, #12]
 8007a5e:	e7cd      	b.n	80079fc <__smakebuf_r+0x18>
 8007a60:	080077f5 	.word	0x080077f5

08007a64 <_raise_r>:
 8007a64:	291f      	cmp	r1, #31
 8007a66:	b538      	push	{r3, r4, r5, lr}
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	d904      	bls.n	8007a78 <_raise_r+0x14>
 8007a6e:	2316      	movs	r3, #22
 8007a70:	6003      	str	r3, [r0, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a7a:	b112      	cbz	r2, 8007a82 <_raise_r+0x1e>
 8007a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a80:	b94b      	cbnz	r3, 8007a96 <_raise_r+0x32>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f830 	bl	8007ae8 <_getpid_r>
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a92:	f000 b817 	b.w	8007ac4 <_kill_r>
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d00a      	beq.n	8007ab0 <_raise_r+0x4c>
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	d103      	bne.n	8007aa6 <_raise_r+0x42>
 8007a9e:	2316      	movs	r3, #22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e7e7      	b.n	8007a76 <_raise_r+0x12>
 8007aa6:	2400      	movs	r4, #0
 8007aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007aac:	4628      	mov	r0, r5
 8007aae:	4798      	blx	r3
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e7e0      	b.n	8007a76 <_raise_r+0x12>

08007ab4 <raise>:
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <raise+0xc>)
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff bfd3 	b.w	8007a64 <_raise_r>
 8007abe:	bf00      	nop
 8007ac0:	2000000c 	.word	0x2000000c

08007ac4 <_kill_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4d07      	ldr	r5, [pc, #28]	; (8007ae4 <_kill_r+0x20>)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	4608      	mov	r0, r1
 8007ace:	4611      	mov	r1, r2
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	f7f9 ffa5 	bl	8001a20 <_kill>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d102      	bne.n	8007ae0 <_kill_r+0x1c>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	b103      	cbz	r3, 8007ae0 <_kill_r+0x1c>
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000394 	.word	0x20000394

08007ae8 <_getpid_r>:
 8007ae8:	f7f9 bf92 	b.w	8001a10 <_getpid>

08007aec <__sread>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	f000 f894 	bl	8007c20 <_read_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bfab      	itete	ge
 8007afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007afe:	89a3      	ldrhlt	r3, [r4, #12]
 8007b00:	181b      	addge	r3, r3, r0
 8007b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b06:	bfac      	ite	ge
 8007b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b0a:	81a3      	strhlt	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__swrite>:
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	461f      	mov	r7, r3
 8007b14:	898b      	ldrh	r3, [r1, #12]
 8007b16:	05db      	lsls	r3, r3, #23
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	d505      	bpl.n	8007b2c <__swrite+0x1e>
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	2302      	movs	r3, #2
 8007b26:	2200      	movs	r2, #0
 8007b28:	f000 f868 	bl	8007bfc <_lseek_r>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	f000 b817 	b.w	8007b74 <_write_r>

08007b46 <__sseek>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 f855 	bl	8007bfc <_lseek_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	bf15      	itete	ne
 8007b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b62:	81a3      	strheq	r3, [r4, #12]
 8007b64:	bf18      	it	ne
 8007b66:	81a3      	strhne	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__sclose>:
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 b813 	b.w	8007b98 <_close_r>
	...

08007b74 <_write_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	; (8007b94 <_write_r+0x20>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f7f9 ff83 	bl	8001a8e <_write>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_write_r+0x1e>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_write_r+0x1e>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	20000394 	.word	0x20000394

08007b98 <_close_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d06      	ldr	r5, [pc, #24]	; (8007bb4 <_close_r+0x1c>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7f9 ff8f 	bl	8001ac6 <_close>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_close_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_close_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20000394 	.word	0x20000394

08007bb8 <_fstat_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	; (8007bd8 <_fstat_r+0x20>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	f7f9 ff8a 	bl	8001ade <_fstat>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d102      	bne.n	8007bd4 <_fstat_r+0x1c>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b103      	cbz	r3, 8007bd4 <_fstat_r+0x1c>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000394 	.word	0x20000394

08007bdc <_isatty_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_isatty_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7f9 ff89 	bl	8001afe <_isatty>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_isatty_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_isatty_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000394 	.word	0x20000394

08007bfc <_lseek_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	; (8007c1c <_lseek_r+0x20>)
 8007c00:	4604      	mov	r4, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7f9 ff82 	bl	8001b14 <_lseek>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_lseek_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_lseek_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000394 	.word	0x20000394

08007c20 <_read_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_read_r+0x20>)
 8007c24:	4604      	mov	r4, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f7f9 ff10 	bl	8001a54 <_read>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_read_r+0x1e>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_read_r+0x1e>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000394 	.word	0x20000394

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
